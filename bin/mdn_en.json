{"accent-color": {"desc": "The accent-color CSS property sets the accent color for user-interface controls generated by some elements.", "grammar": "/* Keyword values */\naccent-color: auto;\n\n/* <color> values */\naccent-color: red;\naccent-color: #5729e9;\naccent-color: rgb(0, 200, 0);\naccent-color: hsl(228, 4%, 24%);\n\n/* Global values */\naccent-color: inherit;\naccent-color: initial;\naccent-color: revert;\naccent-color: revert-layer;\naccent-color: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "accent-color"}, "align-content": {"desc": "The CSS align-content property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.The interactive example below uses Grid Layout to demonstrate some of the values of this property.", "grammar": "/* Basic positional alignment */\n/* align-content does not take left and right values */\nalign-content: center;     /* Pack items around the center */\nalign-content: start;      /* Pack items from the start */\nalign-content: end;        /* Pack items from the end */\nalign-content: flex-start; /* Pack flex items from the start */\nalign-content: flex-end;   /* Pack flex items from the end */\n\n/* Normal alignment */\nalign-content: normal;\n\n/* Baseline alignment */\nalign-content: baseline;\nalign-content: first baseline;\nalign-content: last baseline;\n\n/* Distributed alignment */\nalign-content: space-between; /* Distribute items evenly\n                                 The first item is flush with the start,\n                                 the last is flush with the end */\nalign-content: space-around;  /* Distribute items evenly\n                                 Items have a half-size space\n                                 on either end */\nalign-content: space-evenly;  /* Distribute items evenly\n                                 Items have equal space around them */\nalign-content: stretch;       /* Distribute items evenly\n                                 Stretch 'auto'-sized items to fit\n                                 the container */\n\n/* Overflow alignment */\nalign-content: safe center;\nalign-content: unsafe center;\n\n/* Global values */\nalign-content: inherit;\nalign-content: initial;\nalign-content: revert;\nalign-content: revert-layer;\nalign-content: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "multi-line flex containers", "name": "align-content"}, "align-items": {"desc": "The CSS align-items property sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.The interactive example below demonstrates some of the values for align-items using grid layout.", "grammar": "/* Basic keywords */\nalign-items: normal;\nalign-items: stretch;\n\n/* Positional alignment */\n/* align-items does not take left and right values */\nalign-items: center; /* Pack items around the center */\nalign-items: start; /* Pack items from the start */\nalign-items: end; /* Pack items from the end */\nalign-items: flex-start; /* Pack flex items from the start */\nalign-items: flex-end; /* Pack flex items from the end */\n\n/* Baseline alignment */\nalign-items: baseline;\nalign-items: first baseline;\nalign-items: last baseline; /* Overflow alignment (for positional alignment only) */\nalign-items: safe center;\nalign-items: unsafe center;\n\n/* Global values */\nalign-items: inherit;\nalign-items: initial;\nalign-items: revert;\nalign-items: revert-layer;\nalign-items: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "all elements", "name": "align-items"}, "align-self": {"desc": "The align-self CSS property overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.", "grammar": "/* Keyword values */\nalign-self: auto;\nalign-self: normal;\n\n/* Positional alignment */\n/* align-self does not take left and right values */\nalign-self: center; /* Put the item around the center */\nalign-self: start; /* Put the item at the start */\nalign-self: end; /* Put the item at the end */\nalign-self: self-start; /* Align the item flush at the start */\nalign-self: self-end; /* Align the item flush at the end */\nalign-self: flex-start; /* Put the flex item at the start */\nalign-self: flex-end; /* Put the flex item at the end */\n\n/* Baseline alignment */\nalign-self: baseline;\nalign-self: first baseline;\nalign-self: last baseline;\nalign-self: stretch; /* Stretch 'auto'-sized items to fit the container */\n\n/* Overflow alignment */\nalign-self: safe center;\nalign-self: unsafe center;\n\n/* Global values */\nalign-self: inherit;\nalign-self: initial;\nalign-self: revert;\nalign-self: revert-layer;\nalign-self: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "flex items, grid items, and absolutely-positioned boxes", "name": "align-self"}, "all": {"desc": "The all shorthand CSS property resets all of an element's properties except unicode-bidi, direction, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.", "grammar": "/* Global values */\nall: initial;\nall: inherit;\nall: unset;\nall: revert;\nall: revert-layer;\n", "initial value": "There is no practical initial value for it.", "inherit": "no", "applicable elements": "all elements", "name": "all"}, "animation": {"desc": "The animation shorthand CSS property applies an animation between styles. It is a shorthand for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state.", "grammar": "/* @keyframes duration | easing-function | delay |\niteration-count | direction | fill-mode | play-state | name */\nanimation: 3s ease-in 1s 2 reverse both paused slidein;\n\n/* @keyframes name | duration | easing-function | delay */\nanimation: slidein 3s linear 1s;\n\n/* @keyframes name | duration */\nanimation: slidein 3s;\n", "initial value": "as each of the properties of the shorthand:animation-name: noneanimation-duration: 0sanimation-timing-function: easeanimation-delay: 0sanimation-iteration-count: 1animation-direction: normalanimation-fill-mode: noneanimation-play-state: runninganimation-timeline: auto", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation"}, "animation-delay": {"desc": "The animation-delay CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.", "grammar": "/* Single animation */\nanimation-delay: 3s;\nanimation-delay: 0s;\nanimation-delay: -1500ms;\n\n/* Multiple animations */\nanimation-delay: 2.1s, 480ms;\n\n/* Global values */\nanimation-delay: inherit;\nanimation-delay: initial;\nanimation-delay: revert;\nanimation-delay: revert-layer;\nanimation-delay: unset;\n", "initial value": "0s", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation-delay"}, "animation-direction": {"desc": "The animation-direction CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.", "grammar": "/* Single animation */\nanimation-direction: normal;\nanimation-direction: reverse;\nanimation-direction: alternate;\nanimation-direction: alternate-reverse;\n\n/* Multiple animations */\nanimation-direction: normal, reverse;\nanimation-direction: alternate, reverse, normal;\n\n/* Global values */\nanimation-direction: inherit;\nanimation-direction: initial;\nanimation-direction: revert;\nanimation-direction: revert-layer;\nanimation-direction: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation-direction"}, "animation-duration": {"desc": "The animation-duration CSS property sets the length of time that an animation takes to complete one cycle.", "grammar": "/* Single animation */\nanimation-duration: 6s;\nanimation-duration: 120ms;\n\n/* Multiple animations */\nanimation-duration: 1.64s, 15.22s;\nanimation-duration: 10s, 35s, 230ms;\n\n/* Global values */\nanimation-duration: inherit;\nanimation-duration: initial;\nanimation-duration: revert;\nanimation-duration: revert-layer;\nanimation-duration: unset;\n", "initial value": "0s", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation-duration"}, "animation-fill-mode": {"desc": "The animation-fill-mode CSS property sets how a CSS animation applies styles to its target before and after its execution.", "grammar": "/* Single animation */\nanimation-fill-mode: none;\nanimation-fill-mode: forwards;\nanimation-fill-mode: backwards;\nanimation-fill-mode: both;\n\n/* Multiple animations */\nanimation-fill-mode: none, backwards;\nanimation-fill-mode: both, forwards, none;\n\n/* Global values */\nanimation-fill-mode: inherit;\nanimation-fill-mode: initial;\nanimation-fill-mode: revert;\nanimation-fill-mode: revert-layer;\nanimation-fill-mode: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation-fill-mode"}, "animation-iteration-count": {"desc": "The animation-iteration-count CSS property sets the number of times an animation sequence should be played before stopping.", "grammar": "/* Keyword value */\nanimation-iteration-count: infinite;\n\n/* <number> values */\nanimation-iteration-count: 3;\nanimation-iteration-count: 2.4;\n\n/* Multiple values */\nanimation-iteration-count: 2, 0, infinite;\n\n/* Global values */\nanimation-iteration-count: inherit;\nanimation-iteration-count: initial;\nanimation-iteration-count: revert;\nanimation-iteration-count: revert-layer;\nanimation-iteration-count: unset;\n", "initial value": "1", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation-iteration-count"}, "animation-name": {"desc": "The animation-name CSS property specifies the names of one or more @keyframes at-rules describing the animation or animations to apply to the element.", "grammar": "/* Single animation */\nanimation-name: none;\nanimation-name: test_05;\nanimation-name: -specific;\nanimation-name: sliding-vertically;\n\n/* Multiple animations */\nanimation-name: test1, animation4;\nanimation-name: none, -moz-specific, sliding;\n\n/* Global values */\nanimation-name: inherit;\nanimation-name: initial;\nanimation-name: revert;\nanimation-name: revert-layer;\nanimation-name: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation-name"}, "animation-play-state": {"desc": "The animation-play-state CSS property sets whether an animation is running or paused.", "grammar": "/* Single animation */\nanimation-play-state: running;\nanimation-play-state: paused;\n\n/* Multiple animations */\nanimation-play-state: paused, running, running;\n\n/* Global values */\nanimation-play-state: inherit;\nanimation-play-state: initial;\nanimation-play-state: revert;\nanimation-play-state: revert-layer;\nanimation-play-state: unset;\n", "initial value": "running", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation-play-state"}, "animation-timeline": {"desc": "The animation-timeline CSS property specifies the names of one or more @scroll-timeline at-rules describing the scroll animations to apply to the element.It is often convenient to use the shorthand property animation to set all animation properties at once.", "grammar": "/* Single animation */\nanimation-timeline: none;\nanimation-timeline: test_05;\nanimation-timeline: -specific;\nanimation-timeline: sliding-vertically;\n\n/* Multiple animations */\nanimation-timeline: test1, animation4;\nanimation-timeline: none, -moz-specific, sliding;\n\n/* Global values */\nanimation-timeline: inherit;\nanimation-timeline: initial;\nanimation-timeline: revert;\nanimation-timeline: revert-layer;\nanimation-timeline: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements", "name": "animation-timeline"}, "animation-timing-function": {"desc": "The animation-timing-function CSS property sets how an animation progresses through the duration of each cycle.", "grammar": "/* Keyword values */\nanimation-timing-function: ease;\nanimation-timing-function: ease-in;\nanimation-timing-function: ease-out;\nanimation-timing-function: ease-in-out;\nanimation-timing-function: linear;\nanimation-timing-function: step-start;\nanimation-timing-function: step-end;\n\n/* Function values */\nanimation-timing-function: cubic-bezier(0.1, 0.7, 1.0, 0.1);\nanimation-timing-function: steps(4, end);\n\n/* Steps Function keywords */\nanimation-timing-function: steps(4, jump-start);\nanimation-timing-function: steps(10, jump-end);\nanimation-timing-function: steps(20, jump-none);\nanimation-timing-function: steps(5, jump-both);\nanimation-timing-function: steps(6, start);\nanimation-timing-function: steps(8, end);\n\n/* Multiple animations */\nanimation-timing-function: ease, step-start, cubic-bezier(0.1, 0.7, 1.0, 0.1);\n\n/* Global values */\nanimation-timing-function: inherit;\nanimation-timing-function: initial;\nanimation-timing-function: revert;\nanimation-timing-function: revert-layer;\nanimation-timing-function: unset;\n", "initial value": "ease", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "animation-timing-function"}, "appearance": {"desc": "The appearance CSS property is used to control native appearance of UI controls, that are based on operating system's theme.", "grammar": "/* CSS Basic User Interface Module Level 4 values */\nappearance: none;\nappearance: auto;\nappearance: menulist-button;\nappearance: textfield;\n\n/* \"Compat-auto\" values, which have the same effect as 'auto' */\nappearance: button;\nappearance: searchfield;\nappearance: textarea;\nappearance: push-button;\nappearance: slider-horizontal;\nappearance: checkbox;\nappearance: radio;\nappearance: square-button;\nappearance: menulist;\nappearance: listbox;\nappearance: meter;\nappearance: progress-bar;\n\n/* Partial list of available values in Gecko */\n-moz-appearance: scrollbarbutton-up;\n-moz-appearance: button-bevel;\n\n/* Partial list of available values in WebKit/Blink (as well as Gecko and Edge) */\n-webkit-appearance: media-mute-button;\n-webkit-appearance: caret;\n\n/* Global values */\nappearance: inherit;\nappearance: initial;\nappearance: revert;\nappearance: revert-layer;\nappearance: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "appearance"}, "aspect-ratio": {"desc": "The aspect-ratio CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions.", "grammar": "aspect-ratio: 1 / 1;\naspect-ratio: 1;\n\n/* Global values */\naspect-ratio: inherit;\naspect-ratio: initial;\naspect-ratio: revert;\naspect-ratio: revert-layer;\naspect-ratio: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements except inline boxes and internal ruby or table boxes", "name": "aspect-ratio"}, "backdrop-filter": {"desc": "The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent./* Keyword value */backdrop-filter: none; /* URL to SVG filter */backdrop-filter: url(commonfilters.svg#filter); /* <filter-function> values */backdrop-filter: blur(2px);backdrop-filter: brightness(60%);backdrop-filter: contrast(40%);backdrop-filter: drop-shadow(4px 4px 10px blue);backdrop-filter: grayscale(30%);backdrop-filter: hue-rotate(120deg);backdrop-filter: invert(70%);backdrop-filter: opacity(20%);backdrop-filter: sepia(90%);backdrop-filter: saturate(80%); /* Multiple filters */backdrop-filter: url(filters.svg#filter) blur(4px) saturate(150%); /* Global values */backdrop-filter: inherit;backdrop-filter: initial;backdrop-filter: revert;backdrop-filter: revert-layer;backdrop-filter: unset;", "grammar": "/* Keyword value */\nbackdrop-filter: none;\n\n/* URL to SVG filter */\nbackdrop-filter: url(commonfilters.svg#filter);\n\n/* <filter-function> values */\nbackdrop-filter: blur(2px);\nbackdrop-filter: brightness(60%);\nbackdrop-filter: contrast(40%);\nbackdrop-filter: drop-shadow(4px 4px 10px blue);\nbackdrop-filter: grayscale(30%);\nbackdrop-filter: hue-rotate(120deg);\nbackdrop-filter: invert(70%);\nbackdrop-filter: opacity(20%);\nbackdrop-filter: sepia(90%);\nbackdrop-filter: saturate(80%);\n\n/* Multiple filters */\nbackdrop-filter: url(filters.svg#filter) blur(4px) saturate(150%);\n\n/* Global values */\nbackdrop-filter: inherit;\nbackdrop-filter: initial;\nbackdrop-filter: revert;\nbackdrop-filter: revert-layer;\nbackdrop-filter: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "backdrop-filter"}, "backface-visibility": {"desc": "The backface-visibility CSS property sets whether the back face of an element is visible when turned towards the user.", "grammar": "/* Keyword values */\nbackface-visibility: visible;\nbackface-visibility: hidden;\n\n/* Global values */\nbackface-visibility: inherit;\nbackface-visibility: initial;\nbackface-visibility: revert;\nbackface-visibility: revert-layer;\nbackface-visibility: unset;\n", "initial value": "visible", "inherit": "no", "applicable elements": "transformable elements", "name": "backface-visibility"}, "background": {"desc": "The background shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.", "grammar": "/* Using a <background-color> */\nbackground: green;\n\n/* Using a <bg-image> and <repeat-style> */\nbackground: url(\"test.jpg\") repeat-y;\n\n/* Using a <box> and <background-color> */\nbackground: border-box red;\n\n/* A single image, centered and scaled */\nbackground: no-repeat center/80% url(\"../img/image.png\");\n\n/* Global values */\nbackground: inherit;\nbackground: initial;\nbackground: revert;\nbackground: revert-layer;\nbackground: unset;\n", "initial value": "as each of the properties of the shorthand:background-image: nonebackground-position: 0% 0%background-size: auto autobackground-repeat: repeatbackground-origin: padding-boxbackground-clip: border-boxbackground-attachment: scrollbackground-color: transparent", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background"}, "background-attachment": {"desc": "The background-attachment CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.", "grammar": "/* Keyword values */\nbackground-attachment: scroll;\nbackground-attachment: fixed;\nbackground-attachment: local;\n\n/* Global values */\nbackground-attachment: inherit;\nbackground-attachment: initial;\nbackground-attachment: revert;\nbackground-attachment: revert-layer;\nbackground-attachment: unset;\n", "initial value": "scroll", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background-attachment"}, "background-blend-mode": {"desc": "The background-blend-mode CSS property sets how an element's background images should blend with each other and with the element's background color.", "grammar": "/* One value */\nbackground-blend-mode: normal;\n\n/* Two values, one per background */\nbackground-blend-mode: darken, luminosity;\n\n/* Global values */\nbackground-blend-mode: inherit;\nbackground-blend-mode: initial;\nbackground-blend-mode: revert;\nbackground-blend-mode: revert-layer;\nbackground-blend-mode: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "All elements. In SVG, it applies to container elements, graphics elements, and graphics referencing elements.. It also applies to ::first-letter and ::first-line.", "name": "background-blend-mode"}, "background-clip": {"desc": "The background-clip CSS property sets whether an element's background extends underneath its border box, padding box, or content box.", "grammar": "/* Keyword values */\nbackground-clip: border-box;\nbackground-clip: padding-box;\nbackground-clip: content-box;\nbackground-clip: text;\n\n/* Global values */\nbackground-clip: inherit;\nbackground-clip: initial;\nbackground-clip: revert;\nbackground-clip: revert-layer;\nbackground-clip: unset;\n", "initial value": "border-box", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background-clip"}, "background-color": {"desc": "The background-color CSS property sets the background color of an element.", "grammar": "/* Keyword values */\nbackground-color: red;\nbackground-color: indigo;\n\n/* Hexadecimal value */\nbackground-color: #bbff00;    /* Fully opaque */\nbackground-color: #bf0;       /* Fully opaque shorthand */\nbackground-color: #11ffee00;  /* Fully transparent */\nbackground-color: #1fe0;      /* Fully transparent shorthand  */\nbackground-color: #11ffeeff;  /* Fully opaque */\nbackground-color: #1fef;      /* Fully opaque shorthand  */\n\n/* RGB value */\nbackground-color: rgb(255, 255, 128);        /* Fully opaque */\nbackground-color: rgba(117, 190, 218, 0.5);  /* 50% transparent */\n\n/* HSL value */\nbackground-color: hsl(50, 33%, 25%);         /* Fully opaque */\nbackground-color: hsla(50, 33%, 25%, 0.75);  /* 75% opaque, i.e. 25% transparent */\n\n/* Special keyword values */\nbackground-color: currentcolor;\nbackground-color: transparent;\n\n/* Global values */\nbackground-color: inherit;\nbackground-color: initial;\nbackground-color: revert;\nbackground-color: revert-layer;\nbackground-color: unset;\n", "initial value": "transparent", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background-color"}, "background-image": {"desc": "The background-image CSS property sets one or more background images on an element.", "grammar": "background-image:\n  linear-gradient(to bottom, rgba(255,255,0,0.5), rgba(0,0,255,0.5)),\n  url('catfront.png');\n\n/* Global values */\nbackground-image: inherit;\nbackground-image: initial;\nbackground-image: revert;\nbackground-image: revert-layer;\nbackground-image: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background-image"}, "background-origin": {"desc": "The background-origin CSS property sets the background's origin: from the border start, inside the border, or inside the padding.", "grammar": "/* Keyword values */\nbackground-origin: border-box;\nbackground-origin: padding-box;\nbackground-origin: content-box;\n\n/* Global values */\nbackground-origin: inherit;\nbackground-origin: initial;\nbackground-origin: revert;\nbackground-origin: revert-layer;\nbackground-origin: unset;\n", "initial value": "padding-box", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background-origin"}, "background-position": {"desc": "The background-position CSS property sets the initial position for each background image. The position is relative to the position layer set by background-origin.", "grammar": "/* Keyword values */\nbackground-position: top;\nbackground-position: bottom;\nbackground-position: left;\nbackground-position: right;\nbackground-position: center;\n\n/* <percentage> values */\nbackground-position: 25% 75%;\n\n/* <length> values */\nbackground-position: 0 0;\nbackground-position: 1cm 2cm;\nbackground-position: 10ch 8em;\n\n/* Multiple images */\nbackground-position: 0 0, center;\n\n/* Edge offsets values */\nbackground-position: bottom 10px right 20px;\nbackground-position: right 3em bottom 10px;\nbackground-position: bottom 10px right;\nbackground-position: top right 10px;\n\n/* Global values */\nbackground-position: inherit;\nbackground-position: initial;\nbackground-position: revert;\nbackground-position: revert-layer;\nbackground-position: unset;\n", "initial value": "0% 0%", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background-position"}, "background-position-x": {"desc": "The background-position-x CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by background-origin.", "grammar": "/* Keyword values */\nbackground-position-x: left;\nbackground-position-x: center;\nbackground-position-x: right;\n\n/* <percentage> values */\nbackground-position-x: 25%;\n\n/* <length> values */\nbackground-position-x: 0px;\nbackground-position-x: 1cm;\nbackground-position-x: 8em;\n\n/* Side-relative values */\nbackground-position-x: right 3px;\nbackground-position-x: left 25%;\n\n/* Multiple values */\nbackground-position-x: 0px, center;\n\n/* Global values */\nbackground-position-x: inherit;\nbackground-position-x: initial;\nbackground-position-x: revert;\nbackground-position-x: revert-layer;\nbackground-position-x: unset;\n", "initial value": "0%", "inherit": "no", "applicable elements": "all elements", "name": "background-position-x"}, "background-position-y": {"desc": "The background-position-y CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by background-origin.", "grammar": "/* Keyword values */\nbackground-position-y: top;\nbackground-position-y: center;\nbackground-position-y: bottom;\n\n/* <percentage> values */\nbackground-position-y: 25%;\n\n/* <length> values */\nbackground-position-y: 0px;\nbackground-position-y: 1cm;\nbackground-position-y: 8em;\n\n/* Side-relative values */\nbackground-position-y: bottom 3px;\nbackground-position-y: bottom 10%;\n\n/* Multiple values */\nbackground-position-y: 0px, center;\n\n/* Global values */\nbackground-position-y: inherit;\nbackground-position-y: initial;\nbackground-position-y: revert;\nbackground-position-y: revert-layer;\nbackground-position-y: unset;\n", "initial value": "0%", "inherit": "no", "applicable elements": "all elements", "name": "background-position-y"}, "background-repeat": {"desc": "The background-repeat CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.", "grammar": "/* Keyword values */\nbackground-repeat: repeat-x;\nbackground-repeat: repeat-y;\nbackground-repeat: repeat;\nbackground-repeat: space;\nbackground-repeat: round;\nbackground-repeat: no-repeat;\n\n/* Two-value syntax: horizontal | vertical */\nbackground-repeat: repeat space;\nbackground-repeat: repeat repeat;\nbackground-repeat: round space;\nbackground-repeat: no-repeat round;\n\n/* Global values */\nbackground-repeat: inherit;\nbackground-repeat: initial;\nbackground-repeat: revert;\nbackground-repeat: revert-layer;\nbackground-repeat: unset;\n", "initial value": "repeat", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background-repeat"}, "background-size": {"desc": "The background-size CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.", "grammar": "/* Keyword values */\nbackground-size: cover;\nbackground-size: contain;\n\n/* One-value syntax */\n/* the width of the image (height becomes 'auto') */\nbackground-size: 50%;\nbackground-size: 3.2em;\nbackground-size: 12px;\nbackground-size: auto;\n\n/* Two-value syntax */\n/* first value: width of the image, second value: height */\nbackground-size: 50% auto;\nbackground-size: 3em 25%;\nbackground-size: auto 6px;\nbackground-size: auto auto;\n\n/* Multiple backgrounds */\nbackground-size: auto, auto; /* Not to be confused with `auto auto` */\nbackground-size: 50%, 25%, 25%;\nbackground-size: 6px, auto, contain;\n\n/* Global values */\nbackground-size: inherit;\nbackground-size: initial;\nbackground-size: revert;\nbackground-size: revert-layer;\nbackground-size: unset;\n", "initial value": "auto auto", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "background-size"}, "block-size": {"desc": "The block-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode.If the writing mode is vertically oriented, the value of block-size relates to the width of the element; otherwise, it relates to the height of the element. A related property is inline-size, which defines the other dimension of the element.", "grammar": "/* <length> values */\nblock-size: 300px;\nblock-size: 25em;\n\n/* <percentage> values */\nblock-size: 75%;\n\n/* Keyword values */\nblock-size: max-content;\nblock-size: min-content;\nblock-size: fit-content(20em);\nblock-size: auto;\n\n/* Global values */\nblock-size: inherit;\nblock-size: initial;\nblock-size: revert;\nblock-size: revert-layer;\nblock-size: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "same as width and height", "name": "block-size"}, "border": {"desc": "The border shorthand CSS property sets an element's border. It sets the values of border-width, border-style, and border-color.", "grammar": "/* style */\nborder: solid;\n\n/* width | style */\nborder: 2px dotted;\n\n/* style | color */\nborder: outset #f33;\n\n/* width | style | color */\nborder: medium dashed green;\n\n/* Global values */\nborder: inherit;\nborder: initial;\nborder: revert;\nborder: revert-layer;\nborder: unset;\n", "initial value": "as each of the properties of the shorthand:border-width: as each of the properties of the shorthand:border-top-width: mediumborder-right-width: mediumborder-bottom-width: mediumborder-left-width: mediumborder-style: as each of the properties of the shorthand:border-top-style: noneborder-right-style: noneborder-bottom-style: noneborder-left-style: noneborder-color: as each of the properties of the shorthand:border-top-color: currentcolorborder-right-color: currentcolorborder-bottom-color: currentcolorborder-left-color: currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border"}, "border-block": {"desc": "The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.", "grammar": "border-block: 1px;\nborder-block: 2px dotted;\nborder-block: medium dashed blue;\n\n/* Global values */\nborder-block: inherit;\nborder-block: initial;\nborder-block: revert;\nborder-block: revert-layer;\nborder-block: unset;\n", "initial value": "as each of the properties of the shorthand:border-top-width: mediumborder-top-style: noneborder-top-color: currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-block"}, "border-block-color": {"desc": "The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "border-block-color: yellow;\nborder-block-color: #F5F6F7;\n\n/* Global values */\nborder-block-color: inherit;\nborder-block-color: initial;\nborder-block-color: revert;\nborder-block-color: revert-layer;\nborder-block-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-block-color"}, "border-block-end": {"desc": "The border-block-end CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.", "grammar": "border-block-end: 1px;\nborder-block-end: 2px dotted;\nborder-block-end: medium dashed blue;\n\n/* Global values */\nborder-block-end: inherit;\nborder-block-end: initial;\nborder-block-end: revert;\nborder-block-end: revert-layer;\nborder-block-end: unset;\n", "initial value": "as each of the properties of the shorthand:border-top-width: mediumborder-top-style: noneborder-top-color: currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-block-end"}, "border-block-end-color": {"desc": "The border-block-end-color CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "border-block-end-color: yellow;\nborder-block-end-color: #F5F6F7;\n\n/* Global values */\nborder-block-end-color: inherit;\nborder-block-end-color: initial;\nborder-block-end-color: revert;\nborder-block-end-color: revert-layer;\nborder-block-end-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-block-end-color"}, "border-block-end-style": {"desc": "The border-block-end-style CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-style'> values */\nborder-block-end-style: dashed;\nborder-block-end-style: dotted;\nborder-block-end-style: groove;\n\n/* Global values */\nborder-block-end-style: inherit;\nborder-block-end-style: initial;\nborder-block-end-style: revert;\nborder-block-end-style: revert-layer;\nborder-block-end-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "border-block-end-style"}, "border-block-end-width": {"desc": "The border-block-end-width CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-width'> values */\nborder-block-end-width: 5px;\nborder-block-end-width: thick;\n\n/* Global values */\nborder-block-end-width: inherit;\nborder-block-end-width: initial;\nborder-block-end-width: revert;\nborder-block-end-width: revert-layer;\nborder-block-end-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements", "name": "border-block-end-width"}, "border-block-start": {"desc": "The border-block-start CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.", "grammar": "border-block-start: 1px;\nborder-block-start: 2px dotted;\nborder-block-start: medium dashed blue;\n\n/* Global values */\nborder-block-start: inherit;\nborder-block-start: initial;\nborder-block-start: revert;\nborder-block-start: revert-layer;\nborder-block-start: unset;\n", "initial value": "as each of the properties of the shorthand:border-width: as each of the properties of the shorthand:border-top-width: mediumborder-right-width: mediumborder-bottom-width: mediumborder-left-width: mediumborder-style: as each of the properties of the shorthand:border-top-style: noneborder-right-style: noneborder-bottom-style: noneborder-left-style: nonecolor: canvastext", "inherit": "no", "applicable elements": "all elements", "name": "border-block-start"}, "border-block-start-color": {"desc": "The border-block-start-color CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "border-block-start-color: blue;\nborder-block-start-color: #4c5d21;\n\n/* Global values */\nborder-block-start-color: inherit;\nborder-block-start-color: initial;\nborder-block-start-color: revert;\nborder-block-start-color: revert-layer;\nborder-block-start-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-block-start-color"}, "border-block-start-style": {"desc": "The border-block-start-style CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-style'> values */\nborder-block-start-style: dashed;\nborder-block-start-style: dotted;\nborder-block-start-style: groove;\n\n/* Global values */\nborder-block-start-style: inherit;\nborder-block-start-style: initial;\nborder-block-start-style: revert;\nborder-block-start-style: revert-layer;\nborder-block-start-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "border-block-start-style"}, "border-block-start-width": {"desc": "The border-block-start-width CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-width'> values */\nborder-block-start-width: 5px;\nborder-block-start-width: thick;\n\n/* Global values */\nborder-block-start-width: inherit;\nborder-block-start-width: initial;\nborder-block-start-width: revert;\nborder-block-start-width: revert-layer;\nborder-block-start-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements", "name": "border-block-start-width"}, "border-block-style": {"desc": "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-style'> values */\nborder-block-style: dashed;\nborder-block-style: dotted;\nborder-block-style: groove;\n\n/* Global values */\nborder-block-style: inherit;\nborder-block-style: initial;\nborder-block-style: revert;\nborder-block-style: revert-layer;\nborder-block-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "border-block-style"}, "border-block-width": {"desc": "The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-width'> values */\nborder-block-width: 5px;\nborder-block-width: thick;\n\n/* Global values */\nborder-block-width: inherit;\nborder-block-width: initial;\nborder-block-width: revert;\nborder-block-width: revert-layer;\nborder-block-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements", "name": "border-block-width"}, "border-bottom": {"desc": "The border-bottom shorthand CSS property sets an element's bottom border. It sets the values of border-bottom-width, border-bottom-style and border-bottom-color.", "grammar": "border-bottom-style: dotted;\nborder-bottom: thick green;\n", "initial value": "as each of the properties of the shorthand:border-bottom-width: mediumborder-bottom-style: noneborder-bottom-color: currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-bottom"}, "border-bottom-color": {"desc": "The border-bottom-color CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties border-color or border-bottom.", "grammar": "/* <color> values */\nborder-bottom-color: red;\nborder-bottom-color: #ffbb00;\nborder-bottom-color: rgb(255, 0, 0);\nborder-bottom-color: hsla(100%, 50%, 25%, 0.75);\nborder-bottom-color: currentcolor;\nborder-bottom-color: transparent;\n\n/* Global values */\nborder-bottom-color: inherit;\nborder-bottom-color: initial;\nborder-bottom-color: revert;\nborder-bottom-color: revert-layer;\nborder-bottom-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-bottom-color"}, "border-bottom-left-radius": {"desc": "The border-bottom-left-radius CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.", "grammar": "/* the corner is a circle */\n/* border-bottom-left-radius: radius */\nborder-bottom-left-radius: 3px;\n\n/* Percentage values */\n\n/* circle if box is a square or ellipse if box is a rectangle */\nborder-bottom-left-radius: 20%;\n\n/* same as above: 20% of horizontal(width) and vertical(height) */\nborder-bottom-left-radius: 20% 20%;\n\n/* 20% of horizontal(width) and 10% of vertical(height) */\nborder-bottom-left-radius: 20% 10%;\n\n/* the corner is an ellipse */\n/* border-bottom-left-radius: horizontal vertical */\nborder-bottom-left-radius: 0.5em 1em;\n\n/* Global values */\nborder-bottom-left-radius: inherit;\nborder-bottom-left-radius: initial;\nborder-bottom-left-radius: revert;\nborder-bottom-left-radius: revert-layer;\nborder-bottom-left-radius: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-bottom-left-radius"}, "border-bottom-right-radius": {"desc": "The border-bottom-right-radius CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.", "grammar": "/* The corner is a circle */\n/* border-bottom-right-radius: radius */\nborder-bottom-right-radius: 3px;\n\n/* Percentage values */\nborder-bottom-right-radius: 20%; /* corner of a circle if box is a square or else corner of a rectangle */\nborder-bottom-right-radius: 20% 20%; /* same as above */ /* 20% of horizontal(width) and vertical(height) */\nborder-bottom-right-radius: 20% 10%; /* 20% of horizontal(width) and 10% of vertical(height) */\n\n/*The corner is an ellipse */\n/* border-bottom-right-radius: horizontal vertical */\nborder-bottom-right-radius: 0.5em 1em;\n\n/* Global values */\nborder-bottom-right-radius: inherit;\nborder-bottom-right-radius: initial;\nborder-bottom-right-radius: revert;\nborder-bottom-right-radius: revert-layer;\nborder-bottom-right-radius: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-bottom-right-radius"}, "border-bottom-style": {"desc": "The border-bottom-style CSS property sets the line style of an element's bottom border.", "grammar": "/* Keyword values */\nborder-bottom-style: none;\nborder-bottom-style: hidden;\nborder-bottom-style: dotted;\nborder-bottom-style: dashed;\nborder-bottom-style: solid;\nborder-bottom-style: double;\nborder-bottom-style: groove;\nborder-bottom-style: ridge;\nborder-bottom-style: inset;\nborder-bottom-style: outset;\n\n/* Global values */\nborder-bottom-style: inherit;\nborder-bottom-style: initial;\nborder-bottom-style: revert;\nborder-bottom-style: revert-layer;\nborder-bottom-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-bottom-style"}, "border-bottom-width": {"desc": "The border-bottom-width CSS property sets the width of the bottom border of an element.", "grammar": "/* Keyword values */\nborder-bottom-width: thin;\nborder-bottom-width: medium;\nborder-bottom-width: thick;\n\n/* <length> values */\nborder-bottom-width: 10em;\nborder-bottom-width: 3vmax;\nborder-bottom-width: 6px;\n\n/* Global keywords */\nborder-bottom-width: inherit;\nborder-bottom-width: initial;\nborder-bottom-width: revert;\nborder-bottom-width: revert-layer;\nborder-bottom-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-bottom-width"}, "border-collapse": {"desc": "The border-collapse CSS property sets whether cells inside a <table> have shared or separate borders.", "grammar": "/* Keyword values */\nborder-collapse: collapse;\nborder-collapse: separate;\n\n/* Global values */\nborder-collapse: inherit;\nborder-collapse: initial;\nborder-collapse: revert;\nborder-collapse: revert-layer;\nborder-collapse: unset;\n", "initial value": "separate", "inherit": "yes", "applicable elements": "table and inline-table elements", "name": "border-collapse"}, "border-color": {"desc": "The border-color shorthand CSS property sets the color of an element's border.", "grammar": "/* <color> values */\nborder-color: red;\n\n/* top and bottom | left and right */\nborder-color: red #f015ca;\n\n/* top | left and right | bottom */\nborder-color: red rgb(240,30,50,.7) green;\n\n/* top | right | bottom | left */\nborder-color: red yellow green blue;\n\n/* Global values */\nborder-color: inherit;\nborder-color: initial;\nborder-color: revert;\nborder-color: revert-layer;\nborder-color: unset;\n", "initial value": "as each of the properties of the shorthand:border-top-color: currentcolorborder-right-color: currentcolorborder-bottom-color: currentcolorborder-left-color: currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-color"}, "border-end-end-radius": {"desc": "The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode.", "grammar": "/* <length> values */\n/* With one value the corner will be a circle */\nborder-end-end-radius: 10px;\nborder-end-end-radius: 1em;\n\n/* With two values the corner will be an ellipse */\nborder-end-end-radius: 1em 2em;\n\n/* Global values */\nborder-end-end-radius: inherit;\nborder-end-end-radius: initial;\nborder-end-end-radius: revert;\nborder-end-end-radius: revert-layer;\nborder-end-end-radius: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-end-end-radius"}, "border-end-start-radius": {"desc": "The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode.", "grammar": "/* <length> values */\n/* With one value the corner will be a circle */\nborder-end-start-radius: 10px;\nborder-end-start-radius: 1em;\n\n/* With two values the corner will be an ellipse */\nborder-end-start-radius: 1em 2em;\n\n/* Global values */\nborder-end-start-radius: inherit;\nborder-end-start-radius: initial;\nborder-end-start-radius: revert;\nborder-end-start-radius: revert-layer;\nborder-end-start-radius: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-end-start-radius"}, "border-image": {"desc": "The border-image CSS property draws an image around a given element. It replaces the element's regular border.", "grammar": "/* source | slice */\nborder-image: linear-gradient(red, blue) 27;\n\n/* source | slice | repeat */\nborder-image: url(\"/images/border.png\") 27 space;\n\n/* source | slice | width */\nborder-image: linear-gradient(red, blue) 27 / 35px;\n\n/* source | slice | width | outset | repeat */\nborder-image: url(\"/images/border.png\") 27 23 / 50px 30px / 1rem round space;\n\n/* Global values */\nborder-image: inherit;\nborder-image: initial;\nborder-image: revert;\nborder-image: revert-layer;\nborder-image: unset;\n", "initial value": "as each of the properties of the shorthand:border-image-source: noneborder-image-slice: 100%border-image-width: 1border-image-outset: 0border-image-repeat: stretch", "inherit": "no", "applicable elements": "all elements, except internal table elements when border-collapse is collapse. It also applies to ::first-letter.", "name": "border-image"}, "border-image-outset": {"desc": "The border-image-outset CSS property sets the distance by which an element's border image is set out from its border box.The parts of the border image that are rendered outside the element's border box with border-image-outset do not trigger overflow scrollbars and don't capture mouse events.", "grammar": "/* <length> value */\nborder-image-outset: 1rem;\n\n/* <number> value */\nborder-image-outset: 1.5;\n\n/* vertical | horizontal */\nborder-image-outset: 1 1.2;\n\n/* top | horizontal | bottom */\nborder-image-outset: 30px 2 45px;\n\n/* top | right | bottom | left */\nborder-image-outset: 7px 12px 14px 5px;\n\n/* Global values */\nborder-image-outset: inherit;\nborder-image-outset: initial;\nborder-image-outset: revert;\nborder-image-outset: revert-layer;\nborder-image-outset: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except internal table elements when border-collapse is collapse. It also applies to ::first-letter.", "name": "border-image-outset"}, "border-image-repeat": {"desc": "The border-image-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.", "grammar": "/* Keyword value */\nborder-image-repeat: stretch;\nborder-image-repeat: repeat;\nborder-image-repeat: round;\nborder-image-repeat: space;\n\n/* vertical | horizontal */\nborder-image-repeat: round stretch;\n\n/* Global values */\nborder-image-repeat: inherit;\nborder-image-repeat: initial;\nborder-image-repeat: revert;\nborder-image-repeat: revert-layer;\nborder-image-repeat: unset;\n", "initial value": "stretch", "inherit": "no", "applicable elements": "all elements, except internal table elements when border-collapse is collapse. It also applies to ::first-letter.", "name": "border-image-repeat"}, "border-image-slice": {"desc": "The border-image-slice CSS property divides the image specified by border-image-source into regions. These regions form the components of an element's border image.", "grammar": "/* All sides */\nborder-image-slice: 30%;\n\n/* vertical | horizontal */\nborder-image-slice: 10% 30%;\n\n/* top | horizontal | bottom */\nborder-image-slice: 30 30% 45;\n\n/* top | right | bottom | left */\nborder-image-slice: 7 12 14 5;\n\n/* Using the `fill` keyword */\nborder-image-slice: 10% fill 7 12;\n\n/* Global values */\nborder-image-slice: inherit;\nborder-image-slice: initial;\nborder-image-slice: revert;\nborder-image-slice: revert-layer;\nborder-image-slice: unset;\n", "initial value": "100%", "inherit": "no", "applicable elements": "all elements, except internal table elements when border-collapse is collapse. It also applies to ::first-letter.", "name": "border-image-slice"}, "border-image-source": {"desc": "The border-image-source CSS property sets the source image used to create an element's border image.", "grammar": "/* Keyword value */\nborder-image-source: none;\n\n/* <image> values */\nborder-image-source: url(image.jpg);\nborder-image-source: linear-gradient(to top, red, yellow);\n\n/* Global values */\nborder-image-source: inherit;\nborder-image-source: initial;\nborder-image-source: revert;\nborder-image-source: revert-layer;\nborder-image-source: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements, except internal table elements when border-collapse is collapse. It also applies to ::first-letter.", "name": "border-image-source"}, "border-image-width": {"desc": "The border-image-width CSS property sets the width of an element's border image.", "grammar": "/* Keyword value */\nborder-image-width: auto;\n\n/* <length> value */\nborder-image-width: 1rem;\n\n/* <percentage> value */\nborder-image-width: 25%;\n\n/* <number> value */\nborder-image-width: 3;\n\n/* vertical | horizontal */\nborder-image-width: 2em 3em;\n\n/* top | horizontal | bottom */\nborder-image-width: 5% 15% 10%;\n\n/* top | right | bottom | left */\nborder-image-width: 5% 2em 10% auto;\n\n/* Global values */\nborder-image-width: inherit;\nborder-image-width: initial;\nborder-image-width: revert;\nborder-image-width: revert-layer;\nborder-image-width: unset;\n", "initial value": "1", "inherit": "no", "applicable elements": "all elements, except internal table elements when border-collapse is collapse. It also applies to ::first-letter.", "name": "border-image-width"}, "border-inline": {"desc": "The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.", "grammar": "border-inline: 1px;\nborder-inline: 2px dotted;\nborder-inline: medium dashed blue;\n\n/* Global values */\nborder-inline: inherit;\nborder-inline: initial;\nborder-inline: revert;\nborder-inline: revert-layer;\nborder-inline: unset;\n", "initial value": "as each of the properties of the shorthand:border-top-width: mediumborder-top-style: noneborder-top-color: currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-inline"}, "border-inline-color": {"desc": "The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "border-inline-color: yellow;\nborder-inline-color: #F5F6F7;\n\n/* Global values */\nborder-inline-color: inherit;\nborder-inline-color: initial;\nborder-inline-color: revert;\nborder-inline-color: revert-layer;\nborder-inline-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-color"}, "border-inline-end": {"desc": "The border-inline-end CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.", "grammar": "border-inline-end: 1px;\nborder-inline-end: 2px dashed;\nborder-inline-end: medium dashed blue;\n\n/* Global values */\nborder-inline-end: inherit;\nborder-inline-end: initial;\nborder-inline-end: revert;\nborder-inline-end: revert-layer;\nborder-inline-end: unset;\n", "initial value": "as each of the properties of the shorthand:border-width: as each of the properties of the shorthand:border-top-width: mediumborder-right-width: mediumborder-bottom-width: mediumborder-left-width: mediumborder-style: as each of the properties of the shorthand:border-top-style: noneborder-right-style: noneborder-bottom-style: noneborder-left-style: nonecolor: canvastext", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-end"}, "border-inline-end-color": {"desc": "The border-inline-end-color CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "border-inline-end-color: rebeccapurple;\nborder-inline-end-color: #663399;\n\n/* Global values */\nborder-inline-end-color: inherit;\nborder-inline-end-color: initial;\nborder-inline-end-color: revert;\nborder-inline-end-color: revert-layer;\nborder-inline-end-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-end-color"}, "border-inline-end-style": {"desc": "The border-inline-end-style CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-style'> values */\nborder-inline-end-style: dashed;\nborder-inline-end-style: dotted;\nborder-inline-end-style: groove;\n\n/* Global values */\nborder-inline-end-style: inherit;\nborder-inline-end-style: initial;\nborder-inline-end-style: revert;\nborder-inline-end-style: revert-layer;\nborder-inline-end-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-end-style"}, "border-inline-end-width": {"desc": "The border-inline-end-width CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-width'> values */\nborder-inline-end-width: 2px;\nborder-inline-end-width: thick;\n\n/* Global values */\nborder-inline-end-width: inherit;\nborder-inline-end-width: initial;\nborder-inline-end-width: revert;\nborder-inline-end-width: revert-layer;\nborder-inline-end-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-end-width"}, "border-inline-start": {"desc": "The border-inline-start CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.", "grammar": "border-inline-start: 1px;\nborder-inline-start: 2px dotted;\nborder-inline-start: medium dashed green;\n\n/* Global values */\nborder-inline-start: inherit;\nborder-inline-start: initial;\nborder-inline-start: revert;\nborder-inline-start: revert-layer;\nborder-inline-start: unset;\n", "initial value": "as each of the properties of the shorthand:border-width: as each of the properties of the shorthand:border-top-width: mediumborder-right-width: mediumborder-bottom-width: mediumborder-left-width: mediumborder-style: as each of the properties of the shorthand:border-top-style: noneborder-right-style: noneborder-bottom-style: noneborder-left-style: nonecolor: canvastext", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-start"}, "border-inline-start-color": {"desc": "The border-inline-start-color CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "border-inline-start-color: red;\nborder-inline-start-color: #ee4141;\n\n/* Global values */\nborder-inline-start-color: inherit;\nborder-inline-start-color: initial;\nborder-inline-start-color: revert;\nborder-inline-start-color: revert-layer;\nborder-inline-start-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-start-color"}, "border-inline-start-style": {"desc": "The border-inline-start-style CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-style'> values */\nborder-inline-start-style: dashed;\nborder-inline-start-style: dotted;\nborder-inline-start-style: groove;\n\n/* Global values */\nborder-inline-start-style: inherit;\nborder-inline-start-style: initial;\nborder-inline-start-style: revert;\nborder-inline-start-style: revert-layer;\nborder-inline-start-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-start-style"}, "border-inline-start-width": {"desc": "The border-inline-start-width CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-width'> values */\nborder-inline-start-width: 5px;\nborder-inline-start-width: thick;\n\n/* Global values */\nborder-inline-start-width: inherit;\nborder-inline-start-width: initial;\nborder-inline-start-width: revert;\nborder-inline-start-width: revert-layer;\nborder-inline-start-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-start-width"}, "border-inline-style": {"desc": "The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-style'> values */\nborder-inline-style: dashed;\nborder-inline-style: dotted;\nborder-inline-style: groove;\n\n/* Global values */\nborder-inline-style: inherit;\nborder-inline-style: initial;\nborder-inline-style: revert;\nborder-inline-style: revert-layer;\nborder-inline-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-style"}, "border-inline-width": {"desc": "The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <'border-width'> values */\nborder-inline-width: 5px 10px;\nborder-inline-width: 5px;\nborder-inline-width: thick;\n\n/* Global values */\nborder-inline-width: inherit;\nborder-inline-width: initial;\nborder-inline-width: revert;\nborder-inline-width: revert-layer;\nborder-inline-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements", "name": "border-inline-width"}, "border-left": {"desc": "The border-left shorthand CSS property sets all the properties of an element's left border.", "grammar": "border-left-style: dotted;\nborder-left: thick green;\n", "initial value": "as each of the properties of the shorthand:border-left-width: mediumborder-left-style: noneborder-left-color: currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-left"}, "border-left-color": {"desc": "The border-left-color CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties border-color or border-left.", "grammar": "/* <color> values */\nborder-left-color: red;\nborder-left-color: #ffbb00;\nborder-left-color: rgb(255, 0, 0);\nborder-left-color: hsla(100%, 50%, 25%, 0.75);\nborder-left-color: currentcolor;\nborder-left-color: transparent;\n\n/* Global values */\nborder-left-color: inherit;\nborder-left-color: initial;\nborder-left-color: revert;\nborder-left-color: revert-layer;\nborder-left-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-left-color"}, "border-left-style": {"desc": "The border-left-style CSS property sets the line style of an element's left border.", "grammar": "/* Keyword values */\nborder-left-style: none;\nborder-left-style: hidden;\nborder-left-style: dotted;\nborder-left-style: dashed;\nborder-left-style: solid;\nborder-left-style: double;\nborder-left-style: groove;\nborder-left-style: ridge;\nborder-left-style: inset;\nborder-left-style: outset;\n\n/* Global values */\nborder-left-style: inherit;\nborder-left-style: initial;\nborder-left-style: revert;\nborder-left-style: revert-layer;\nborder-left-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-left-style"}, "border-left-width": {"desc": "The border-left-width CSS property sets the width of the left border of an element.", "grammar": "/* Keyword values */\nborder-left-width: thin;\nborder-left-width: medium;\nborder-left-width: thick;\n\n/* <length> values */\nborder-left-width: 10em;\nborder-left-width: 3vmax;\nborder-left-width: 6px;\n\n/* Global keywords */\nborder-left-width: inherit;\nborder-left-width: initial;\nborder-left-width: revert;\nborder-left-width: revert-layer;\nborder-left-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-left-width"}, "border-radius": {"desc": "The border-radius CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.", "grammar": "/* The syntax of the first radius allows one to four values */\n/* Radius is set for all 4 sides */\nborder-radius: 10px;\n\n/* top-left-and-bottom-right | top-right-and-bottom-left */\nborder-radius: 10px 5%;\n\n/* top-left | top-right-and-bottom-left | bottom-right */\nborder-radius: 2px 4px 2px;\n\n/* top-left | top-right | bottom-right | bottom-left */\nborder-radius: 1px 0 3px 4px;\n\n/* The syntax of the second radius allows one to four values */\n/* (first radius values) / radius */\nborder-radius: 10px / 20px;\n\n/* (first radius values) / top-left-and-bottom-right | top-right-and-bottom-left */\nborder-radius: 10px 5% / 20px 30px;\n\n/* (first radius values) / top-left | top-right-and-bottom-left | bottom-right */\nborder-radius: 10px 5px 2em / 20px 25px 30%;\n\n/* (first radius values) / top-left | top-right | bottom-right | bottom-left */\nborder-radius: 10px 5% / 20px 25em 30px 35em;\n\n/* Global values */\nborder-radius: inherit;\nborder-radius: initial;\nborder-radius: revert;\nborder-radius: revert-layer;\nborder-radius: unset;\n", "initial value": "as each of the properties of the shorthand:border-top-left-radius: 0border-top-right-radius: 0border-bottom-right-radius: 0border-bottom-left-radius: 0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-radius"}, "border-right": {"desc": "The border-right shorthand CSS property sets all the properties of an element's right border.", "grammar": "border-right-style: dotted;\nborder-right: thick green;\n", "initial value": "as each of the properties of the shorthand:border-right-width: mediumborder-right-style: noneborder-right-color: currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-right"}, "border-right-color": {"desc": "The border-right-color CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties border-color or border-right.", "grammar": "/* <color> values */\nborder-right-color: red;\nborder-right-color: #ffbb00;\nborder-right-color: rgb(255, 0, 0);\nborder-right-color: hsla(100%, 50%, 25%, 0.75);\nborder-right-color: currentcolor;\nborder-right-color: transparent;\n\n/* Global values */\nborder-right-color: inherit;\nborder-right-color: initial;\nborder-right-color: revert;\nborder-right-color: revert-layer;\nborder-right-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-right-color"}, "border-right-style": {"desc": "The border-right-style CSS property sets the line style of an element's right border.", "grammar": "/* Keyword values */\nborder-right-style: none;\nborder-right-style: hidden;\nborder-right-style: dotted;\nborder-right-style: dashed;\nborder-right-style: solid;\nborder-right-style: double;\nborder-right-style: groove;\nborder-right-style: ridge;\nborder-right-style: inset;\nborder-right-style: outset;\n\n/* Global values */\nborder-right-style: inherit;\nborder-right-style: initial;\nborder-right-style: revert;\nborder-right-style: revert-layer;\nborder-right-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-right-style"}, "border-right-width": {"desc": "The border-right-width CSS property sets the width of the right border of an element.", "grammar": "/* Keyword values */\nborder-right-width: thin;\nborder-right-width: medium;\nborder-right-width: thick;\n\n/* <length> values */\nborder-right-width: 10em;\nborder-right-width: 3vmax;\nborder-right-width: 6px;\n\n/* Global keywords */\nborder-right-width: inherit;\nborder-right-width: initial;\nborder-right-width: revert;\nborder-right-width: revert-layer;\nborder-right-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-right-width"}, "border-spacing": {"desc": "The border-spacing CSS property sets the distance between the borders of adjacent cells in a <table>. This property applies only when border-collapse is separate.", "grammar": "/* <length> */\nborder-spacing: 2px;\n\n/* horizontal <length> | vertical <length> */\nborder-spacing: 1cm 2em;\n\n/* Global values */\nborder-spacing: inherit;\nborder-spacing: initial;\nborder-spacing: revert;\nborder-spacing: revert-layer;\nborder-spacing: unset;\n", "initial value": "0", "inherit": "yes", "applicable elements": "table and inline-table elements", "name": "border-spacing"}, "border-start-end-radius": {"desc": "The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode.", "grammar": "/* <length> values */\n/* With one value the corner will be a circle */\nborder-start-end-radius: 10px;\nborder-start-end-radius: 1em;\n\n/* With two values the corner will be an ellipse */\nborder-start-end-radius: 1em 2em;\n\n/* Global values */\nborder-start-end-radius: inherit;\nborder-start-end-radius: initial;\nborder-start-end-radius: revert;\nborder-start-end-radius: revert-layer;\nborder-start-end-radius: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-start-end-radius"}, "border-start-start-radius": {"desc": "The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation. This is useful when building styles to work regardless of the text orientation and writing mode.", "grammar": "/* <length> values */\n/* With one value the corner will be a circle */\nborder-start-start-radius: 10px;\nborder-start-start-radius: 1em;\n\n/* With two values the corner will be an ellipse */\nborder-start-start-radius: 1em 2em;\n\n/* Global values */\nborder-start-start-radius: inherit;\nborder-start-start-radius: initial;\nborder-start-start-radius: revert;\nborder-start-start-radius: revert-layer;\nborder-start-start-radius: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-start-start-radius"}, "border-style": {"desc": "The border-style shorthand CSS property sets the line style for all four sides of an element's border.", "grammar": "/* Keyword values */\nborder-style: none;\nborder-style: hidden;\nborder-style: dotted;\nborder-style: dashed;\nborder-style: solid;\nborder-style: double;\nborder-style: groove;\nborder-style: ridge;\nborder-style: inset;\nborder-style: outset;\n\n/* top and bottom | left and right */\nborder-style: dotted solid;\n\n/* top | left and right | bottom */\nborder-style: hidden double dashed;\n\n/* top | right | bottom | left */\nborder-style: none solid dotted dashed;\n\n/* Global values */\nborder-style: inherit;\nborder-style: initial;\nborder-style: revert;\nborder-style: revert-layer;\nborder-style: unset;\n", "initial value": "as each of the properties of the shorthand:border-top-style: noneborder-right-style: noneborder-bottom-style: noneborder-left-style: none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-style"}, "border-top": {"desc": "The border-top shorthand CSS property sets all the properties of an element's top border.", "grammar": "border-top-style: dotted;\nborder-top: thick green;\n", "initial value": "as each of the properties of the shorthand:border-top-width: mediumborder-top-style: noneborder-top-color: currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-top"}, "border-top-color": {"desc": "The border-top-color CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties border-color or border-top.", "grammar": "/* <color> values */\nborder-top-color: red;\nborder-top-color: #ffbb00;\nborder-top-color: rgb(255, 0, 0);\nborder-top-color: hsla(100%, 50%, 25%, 0.75);\nborder-top-color: currentcolor;\nborder-top-color: transparent;\n\n/* Global values */\nborder-top-color: inherit;\nborder-top-color: initial;\nborder-top-color: revert;\nborder-top-color: revert-layer;\nborder-top-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-top-color"}, "border-top-left-radius": {"desc": "The border-top-left-radius CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.", "grammar": "/* the corner is a circle */\n/* border-top-left-radius: radius */\nborder-top-left-radius: 3px;\n\n/* the corner is an ellipse */\n/* border-top-left-radius: horizontal vertical */\nborder-top-left-radius: 0.5em 1em;\n\nborder-top-left-radius: inherit;\n\n/* Global values */\nborder-top-left-radius: inherit;\nborder-top-left-radius: initial;\nborder-top-left-radius: revert;\nborder-top-left-radius: revert-layer;\nborder-top-left-radius: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-top-left-radius"}, "border-top-right-radius": {"desc": "The border-top-right-radius CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.", "grammar": "/* the corner is a circle */\n/* border-top-right-radius: radius */\nborder-top-right-radius: 3px;\n\n/* the corner is an ellipse */\n/* border-top-right-radius: horizontal vertical */\nborder-top-right-radius: 0.5em 1em;\n\nborder-top-right-radius: inherit;\n\n/* Global values */\nborder-top-right-radius: inherit;\nborder-top-right-radius: initial;\nborder-top-right-radius: revert;\nborder-top-right-radius: revert-layer;\nborder-top-right-radius: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; but User Agents are not required to apply to table and inline-table elements when border-collapse is collapse. The behavior on internal table elements is undefined for the moment.. It also applies to ::first-letter.", "name": "border-top-right-radius"}, "border-top-style": {"desc": "The border-top-style CSS property sets the line style of an element's top border.", "grammar": "/* Keyword values */\nborder-top-style: none;\nborder-top-style: hidden;\nborder-top-style: dotted;\nborder-top-style: dashed;\nborder-top-style: solid;\nborder-top-style: double;\nborder-top-style: groove;\nborder-top-style: ridge;\nborder-top-style: inset;\nborder-top-style: outset;\n\n/* Global values */\nborder-top-style: inherit;\nborder-top-style: initial;\nborder-top-style: revert;\nborder-top-style: revert-layer;\nborder-top-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-top-style"}, "border-top-width": {"desc": "The border-top-width CSS property sets the width of the top border of an element.", "grammar": "/* Keyword values */\nborder-top-width: thin;\nborder-top-width: medium;\nborder-top-width: thick;\n\n/* <length> values */\nborder-top-width: 10em;\nborder-top-width: 3vmax;\nborder-top-width: 6px;\n\n/* Global keywords */\nborder-top-width: inherit;\nborder-top-width: initial;\nborder-top-width: revert;\nborder-top-width: revert-layer;\nborder-top-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-top-width"}, "border-width": {"desc": "The border-width shorthand CSS property sets the width of an element's border.", "grammar": "/* Keyword values */\nborder-width: thin;\nborder-width: medium;\nborder-width: thick;\n\n/* <length> values */\nborder-width: 4px;\nborder-width: 1.2rem;\n\n/* vertical | horizontal */\nborder-width: 2px 1.5em;\n\n/* top | horizontal | bottom */\nborder-width: 1px 2em 1.5cm;\n\n/* top | right | bottom | left */\nborder-width: 1px 2em 0 4rem;\n\n/* Global values */\nborder-width: inherit;\nborder-width: initial;\nborder-width: revert;\nborder-width: revert-layer;\nborder-width: unset;\n", "initial value": "as each of the properties of the shorthand:border-top-width: mediumborder-right-width: mediumborder-bottom-width: mediumborder-left-width: medium", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "border-width"}, "bottom": {"desc": "The bottom CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.", "grammar": "/* <length> values */\nbottom: 3px;\nbottom: 2.4em;\n\n/* <percentage>s of the height of the containing block */\nbottom: 10%;\n\n/* Keyword value */\nbottom: auto;\n\n/* Global values */\nbottom: inherit;\nbottom: initial;\nbottom: revert;\nbottom: revert-layer;\nbottom: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "bottom"}, "box-decoration-break": {"desc": "The box-decoration-break CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.", "grammar": "/* Keyword values */\nbox-decoration-break: slice;\nbox-decoration-break: clone;\n\n/* Global values */\nbox-decoration-break: inherit;\nbox-decoration-break: initial;\nbox-decoration-break: revert;\nbox-decoration-break: revert-layer;\nbox-decoration-break: unset;\n", "initial value": "slice", "inherit": "no", "applicable elements": "all elements", "name": "box-decoration-break"}, "box-shadow": {"desc": "The box-shadow CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.", "grammar": "/* Keyword values */\nbox-shadow: none;\n\n/* offset-x | offset-y | color */\nbox-shadow: 60px -16px teal;\n\n/* offset-x | offset-y | blur-radius | color */\nbox-shadow: 10px 5px 5px black;\n\n/* offset-x | offset-y | blur-radius | spread-radius | color */\nbox-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);\n\n/* inset | offset-x | offset-y | color */\nbox-shadow: inset 5em 1em gold;\n\n/* Any number of shadows, separated by commas */\nbox-shadow: 3px 3px red, -1em 0 0.4em olive;\n\n/* Global values */\nbox-shadow: inherit;\nbox-shadow: initial;\nbox-shadow: revert;\nbox-shadow: revert-layer;\nbox-shadow: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter.", "name": "box-shadow"}, "box-sizing": {"desc": "The box-sizing CSS property sets how the total width and height of an element is calculated.", "grammar": "box-sizing: border-box;\nbox-sizing: content-box;\n\n/* Global values */\nbox-sizing: inherit;\nbox-sizing: initial;\nbox-sizing: revert;\nbox-sizing: revert-layer;\nbox-sizing: unset;\n", "initial value": "content-box", "inherit": "no", "applicable elements": "all elements that accept width or height", "name": "box-sizing"}, "break-after": {"desc": "The break-after CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored./* Generic break values */break-after: auto;break-after: avoid;break-after: always;break-after: all; /* Page break values */break-after: avoid-page;break-after: page;break-after: left;break-after: right;break-after: recto;break-after: verso; /* Column break values */break-after: avoid-column;break-after: column; /* Region break values */break-after: avoid-region;break-after: region; /* Global values */break-after: inherit;break-after: initial;break-after: revert;break-after: revert-layer;break-after: unset; Each possible break point (in other words, each element boundary) is affected by three properties: the break-after value of the previous element, the break-before value of the next element, and the break-inside value of the containing element.To determine if a break must be done, the following rules are applied: If any of the three concerned values is a forced break value (always, left, right, page, column, or region), it has precedence. If more than one of them are such a break, the one of the element that appears the latest in the flow is taken (i.e., the break-before value has precedence over the break-after value, which itself has precedence over the break-inside value).If any of the three concerned values is an avoid break value (avoid, avoid-page, avoid-region, or avoid-column), no such break will be applied at that point. Once forced breaks have been applied, soft breaks may be added if needed, but not on element boundaries that resolve in a corresponding avoid value.", "grammar": "/* Generic break values */\nbreak-after: auto;\nbreak-after: avoid;\nbreak-after: always;\nbreak-after: all;\n\n/* Page break values */\nbreak-after: avoid-page;\nbreak-after: page;\nbreak-after: left;\nbreak-after: right;\nbreak-after: recto;\nbreak-after: verso;\n\n/* Column break values */\nbreak-after: avoid-column;\nbreak-after: column;\n\n/* Region break values */\nbreak-after: avoid-region;\nbreak-after: region;\n\n/* Global values */\nbreak-after: inherit;\nbreak-after: initial;\nbreak-after: revert;\nbreak-after: revert-layer;\nbreak-after: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "block-level elements", "name": "break-after"}, "break-before": {"desc": "The break-before CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored./* Generic break values */break-before: auto;break-before: avoid;break-before: always;break-before: all; /* Page break values */break-before: avoid-page;break-before: page;break-before: left;break-before: right;break-before: recto;break-before: verso; /* Column break values */break-before: avoid-column;break-before: column; /* Region break values */break-before: avoid-region;break-before: region; /* Global values */break-before: inherit;break-before: initial;break-before: revert;break-before: revert-layer;break-before: unset; Each possible break point (in other words, each element boundary) is affected by three properties: the break-after value of the previous element, the break-before value of the next element, and the break-inside value of the containing element.To determine if a break must be done, the following rules are applied: If any of the three concerned values is a forced break value (always, left, right, page, column, or region), it has precedence. If more than one of them are such a break, the one of the element that appears the latest in the flow is taken (i.e., the break-before value has precedence over the break-after value, which itself has precedence over the break-inside value).If any of the three concerned values is an avoid break value (avoid, avoid-page, avoid-region, or avoid-column), no such break will be applied at that point. Once forced breaks have been applied, soft breaks may be added if needed, but not on element boundaries that resolve in a corresponding avoid value.", "grammar": "/* Generic break values */\nbreak-before: auto;\nbreak-before: avoid;\nbreak-before: always;\nbreak-before: all;\n\n/* Page break values */\nbreak-before: avoid-page;\nbreak-before: page;\nbreak-before: left;\nbreak-before: right;\nbreak-before: recto;\nbreak-before: verso;\n\n/* Column break values */\nbreak-before: avoid-column;\nbreak-before: column;\n\n/* Region break values */\nbreak-before: avoid-region;\nbreak-before: region;\n\n/* Global values */\nbreak-before: inherit;\nbreak-before: initial;\nbreak-before: revert;\nbreak-before: revert-layer;\nbreak-before: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "block-level elements", "name": "break-before"}, "break-inside": {"desc": "The break-inside CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored./* Keyword values */break-inside: auto;break-inside: avoid;break-inside: avoid-page;break-inside: avoid-column;break-inside: avoid-region; /* Global values */break-inside: inherit;break-inside: initial;break-inside: revert;break-inside: revert-layer;break-inside: unset; Each possible break point (in other words, each element boundary) is affected by three properties: the break-after value of the previous element, the break-before value of the next element, and the break-inside value of the containing element.To determine if a break must be done, the following rules are applied: If any of the three concerned values is a forced break value (always, left, right, page, column, or region), it has precedence. If more than one of them are such a break, the value of the element that appears the latest in the flow is used. Thus, the break-before value has precedence over the break-after value, which in turn has precedence over the break-inside value.If any of the three concerned values is an avoid break value (avoid, avoid-page, avoid-region, or avoid-column), no such break will be applied at that point. Once forced breaks have been applied, soft breaks may be added if needed, but not on element boundaries that resolve in a corresponding avoid value.", "grammar": "/* Keyword values */\nbreak-inside: auto;\nbreak-inside: avoid;\nbreak-inside: avoid-page;\nbreak-inside: avoid-column;\nbreak-inside: avoid-region;\n\n/* Global values */\nbreak-inside: inherit;\nbreak-inside: initial;\nbreak-inside: revert;\nbreak-inside: revert-layer;\nbreak-inside: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "block-level elements", "name": "break-inside"}, "caption-side": {"desc": "The caption-side CSS property puts the content of a table's <caption> on the specified side. The values are relative to the writing-mode of the table.", "grammar": "/* Directional values */\ncaption-side: top;\ncaption-side: bottom;\n\n/* Logical values */\ncaption-side: block-start;\ncaption-side: block-end;\ncaption-side: inline-start;\ncaption-side: inline-end;\n\n/* Global values */\ncaption-side: inherit;\ncaption-side: initial;\ncaption-side: revert;\ncaption-side: revert-layer;\ncaption-side: unset;\n", "initial value": "top", "inherit": "yes", "applicable elements": "table-caption elements", "name": "caption-side"}, "caret-color": {"desc": "The caret-color CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. This is sometimes referred to as the text input cursor. The caret appears in elements such as <input> or those with the contenteditable attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.", "grammar": "/* Keyword values */\ncaret-color: auto;\ncaret-color: transparent;\ncaret-color: currentcolor;\n\n/* <color> values */\ncaret-color: red;\ncaret-color: #5729e9;\ncaret-color: rgb(0, 200, 0);\ncaret-color: hsla(228, 4%, 24%, 0.8);\n\n/* Global values */\ncaret-color: inherit;\ncaret-color: initial;\ncaret-color: revert;\ncaret-color: revert-layer;\ncaret-color: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "caret-color"}, "clear": {"desc": "The clear CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The clear property applies to floating and non-floating elements.", "grammar": "#container::after {\n  content: \"\";\n  display: block;\n  clear: both;\n}\n", "initial value": "none", "inherit": "no", "applicable elements": "block-level elements", "name": "clear"}, "clip": {"desc": "The clip CSS property defines a visible portion of an element. The clip property applies only to absolutely positioned elements — that is, elements with position:absolute or position:fixed./* Keyword value */clip: auto; /* <shape> values */clip: rect(1px, 10em, 3rem, 2ch); /* Global values */clip: inherit;clip: initial;clip: revert;clip: revert-layer;clip: unset;", "grammar": "/* Keyword value */\nclip: auto;\n\n/* <shape> values */\nclip: rect(1px, 10em, 3rem, 2ch);\n\n/* Global values */\nclip: inherit;\nclip: initial;\nclip: revert;\nclip: revert-layer;\nclip: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "absolutely positioned elements", "name": "clip"}, "clip-path": {"desc": "The clip-path CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.", "grammar": "/* Keyword values */\nclip-path: none;\n\n/* <clip-source> values */\nclip-path: url(resources.svg#c1);\n\n/* <geometry-box> values */\nclip-path: margin-box;\nclip-path: border-box;\nclip-path: padding-box;\nclip-path: content-box;\nclip-path: fill-box;\nclip-path: stroke-box;\nclip-path: view-box;\n\n/* <basic-shape> values */\nclip-path: inset(100px 50px);\nclip-path: circle(50px at 0 100px);\nclip-path: ellipse(50px 60px at 0 10% 20%);\nclip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\nclip-path: path('M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z');\n\n/* Box and shape values combined */\nclip-path: padding-box circle(50px at 0 100px);\n\n/* Global values */\nclip-path: inherit;\nclip-path: initial;\nclip-path: revert;\nclip-path: revert-layer;\nclip-path: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "clip-path"}, "color": {"desc": "The color CSS property sets the foreground color value of an element's text and text decorations, and sets the currentcolor value. currentcolor may be used as an indirect value on other properties and is the default for other color properties, such as border-color.", "grammar": "/* Keyword values */\ncolor: currentcolor;\n\n/* <named-color> values */\ncolor: red;\ncolor: orange;\ncolor: tan;\ncolor: rebeccapurple;\n\n/* <hex-color> values */\ncolor: #090;\ncolor: #009900;\ncolor: #090a;\ncolor: #009900aa;\n\n/* <rgb()> values */\ncolor: rgb(34, 12, 64, 0.6);\ncolor: rgba(34, 12, 64, 0.6);\ncolor: rgb(34 12 64 / 0.6);\ncolor: rgba(34 12 64 / 0.3);\ncolor: rgb(34.0 12 64 / 60%);\ncolor: rgba(34.6 12 64 / 30%);\n\n/* <hsl()> values */\ncolor: hsl(30, 100%, 50%, 0.6);\ncolor: hsla(30, 100%, 50%, 0.6);\ncolor: hsl(30 100% 50% / 0.6);\ncolor: hsla(30 100% 50% / 0.6);\ncolor: hsl(30.0 100% 50% / 60%);\ncolor: hsla(30.2 100% 50% / 60%);\n\n/* <hwb()> values */\ncolor: hwb(90 10% 10%);\ncolor: hwb(90 10% 10% / 0.5);\ncolor: hwb(90deg 10% 10%);\ncolor: hwb(1.5708rad 60% 0%);\ncolor: hwb(.25turn 0% 40% / 50%);\n\n/* Global values */\ncolor: inherit;\ncolor: initial;\ncolor: revert;\ncolor: revert-layer;\ncolor: unset;\n", "initial value": "canvastext", "inherit": "yes", "applicable elements": "all elements and text. It also applies to ::first-letter and ::first-line.", "name": "color"}, "color-scheme": {"desc": "The color-scheme CSS property allows an element to indicate which color schemes it can comfortably be rendered in.Common choices for operating system color schemes are \"light\" and \"dark\", or \"day mode\" and \"night mode\". When a user selects one of these color schemes, the operating system makes adjustments to the user interface. This includes form controls, scrollbars, and the used values of CSS system colors.", "grammar": "color-scheme: normal;\ncolor-scheme: light;\ncolor-scheme: dark;\ncolor-scheme: light dark;\n\n/* Global values */\ncolor-scheme: inherit;\ncolor-scheme: initial;\ncolor-scheme: revert;\ncolor-scheme: revert-layer;\ncolor-scheme: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements and text", "name": "color-scheme"}, "column-count": {"desc": "The column-count CSS property breaks an element's content into the specified number of columns.", "grammar": "/* Keyword value */\ncolumn-count: auto;\n\n/* <integer> value */\ncolumn-count: 3;\n\n/* Global values */\ncolumn-count: inherit;\ncolumn-count: initial;\ncolumn-count: revert;\ncolumn-count: revert-layer;\ncolumn-count: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "Block containers except table wrapper boxes", "name": "column-count"}, "column-fill": {"desc": "The column-fill CSS property controls how an element's contents are balanced when broken into columns.", "grammar": "/* Keyword values */\ncolumn-fill: auto;\ncolumn-fill: balance;\ncolumn-fill: balance-all;\n\n/* Global values */\ncolumn-fill: inherit;\ncolumn-fill: initial;\ncolumn-fill: revert;\ncolumn-fill: revert-layer;\ncolumn-fill: unset;\n", "initial value": "balance", "inherit": "no", "applicable elements": "multicol elements", "name": "column-fill"}, "column-gap (grid-column-gap)": {"desc": "The column-gap CSS property sets the size of the gap (gutter) between an element's columns.", "grammar": "/* Keyword value */\ncolumn-gap: normal;\n\n/* <length> values */\ncolumn-gap: 3px;\ncolumn-gap: 2.5em;\n\n/* <percentage> value */\ncolumn-gap: 3%;\n\n/* Global values */\ncolumn-gap: inherit;\ncolumn-gap: initial;\ncolumn-gap: revert;\ncolumn-gap: revert-layer;\ncolumn-gap: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "multi-column elements, flex containers, grid containers", "name": "column-gap (grid-column-gap)"}, "column-rule": {"desc": "The column-rule shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.", "grammar": "column-rule: dotted;\ncolumn-rule: solid 8px;\ncolumn-rule: solid blue;\ncolumn-rule: thick inset blue;\n\n/* Global values */\ncolumn-rule: inherit;\ncolumn-rule: initial;\ncolumn-rule: revert;\ncolumn-rule: revert-layer;\ncolumn-rule: unset;\n", "initial value": "as each of the properties of the shorthand:column-rule-width: mediumcolumn-rule-style: nonecolumn-rule-color: currentcolor", "inherit": "no", "applicable elements": "multicol elements", "name": "column-rule"}, "column-rule-color": {"desc": "The column-rule-color CSS property sets the color of the line drawn between columns in a multi-column layout.", "grammar": "/* <color> values */\ncolumn-rule-color: red;\ncolumn-rule-color: rgb(192, 56, 78);\ncolumn-rule-color: transparent;\ncolumn-rule-color: hsla(0, 100%, 50%, 0.6);\n\n/* Global values */\ncolumn-rule-color: inherit;\ncolumn-rule-color: initial;\ncolumn-rule-color: revert;\ncolumn-rule-color: revert-layer;\ncolumn-rule-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "multicol elements", "name": "column-rule-color"}, "column-rule-style": {"desc": "The column-rule-style CSS property sets the style of the line drawn between columns in a multi-column layout.", "grammar": "/* <'border-style'> values */\ncolumn-rule-style: none;\ncolumn-rule-style: hidden;\ncolumn-rule-style: dotted;\ncolumn-rule-style: dashed;\ncolumn-rule-style: solid;\ncolumn-rule-style: double;\ncolumn-rule-style: groove;\ncolumn-rule-style: ridge;\ncolumn-rule-style: inset;\ncolumn-rule-style: outset;\n\n/* Global values */\ncolumn-rule-style: inherit;\ncolumn-rule-style: initial;\ncolumn-rule-style: revert;\ncolumn-rule-style: revert-layer;\ncolumn-rule-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "multicol elements", "name": "column-rule-style"}, "column-rule-width": {"desc": "The column-rule-width CSS property sets the width of the line drawn between columns in a multi-column layout.", "grammar": "/* Keyword values */\ncolumn-rule-width: thin;\ncolumn-rule-width: medium;\ncolumn-rule-width: thick;\n\n/* <length> values */\ncolumn-rule-width: 1px;\ncolumn-rule-width: 2.5em;\n\n/* Global values */\ncolumn-rule-width: inherit;\ncolumn-rule-width: initial;\ncolumn-rule-width: revert;\ncolumn-rule-width: revert-layer;\ncolumn-rule-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "multicol elements", "name": "column-rule-width"}, "column-span": {"desc": "The column-span CSS property makes it possible for an element to span across all columns when its value is set to all.", "grammar": "/* Keyword values */\ncolumn-span: none;\ncolumn-span: all;\n\n/* Global values */\ncolumn-span: inherit;\ncolumn-span: initial;\ncolumn-span: revert;\ncolumn-span: revert-layer;\ncolumn-span: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "in-flow block-level elements", "name": "column-span"}, "column-width": {"desc": "The column-width CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the column-width value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.", "grammar": "/* Keyword value */\ncolumn-width: auto;\n\n/* <length> values */\ncolumn-width: 60px;\ncolumn-width: 15.5em;\ncolumn-width: 3.3vw;\n\n/* Global values */\ncolumn-width: inherit;\ncolumn-width: initial;\ncolumn-width: revert;\ncolumn-width: revert-layer;\ncolumn-width: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "Block containers except table wrapper boxes", "name": "column-width"}, "columns": {"desc": "The columns CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.", "grammar": "/* Column width */\ncolumns: 18em;\n\n/* Column count */\ncolumns: auto;\ncolumns: 2;\n\n/* Both column width and count */\ncolumns: 2 auto;\ncolumns: auto 12em;\ncolumns: auto auto;\n\n/* Global values */\ncolumns: inherit;\ncolumns: initial;\ncolumns: revert;\ncolumns: revert-layer;\ncolumns: unset;\n", "initial value": "as each of the properties of the shorthand:column-width: autocolumn-count: auto", "inherit": "no", "applicable elements": "Block containers except table wrapper boxes", "name": "columns"}, "contain": {"desc": "The contain CSS property allows an author to indicate that an element and its contents are, as much as possible, independent of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page, leading to obvious performance benefits.", "grammar": "/* Keyword values */\ncontain: none;\ncontain: strict;\ncontain: content;\ncontain: size;\ncontain: layout;\ncontain: style;\ncontain: paint;\n\n/* Multiple keywords */\ncontain: size paint;\ncontain: size layout paint;\n\n/* Global values */\ncontain: inherit;\ncontain: initial;\ncontain: revert;\ncontain: revert-layer;\ncontain: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "contain"}, "content": {"desc": "The content CSS property replaces an element with a generated value. Objects inserted using the content property are anonymous replaced elements./* Keywords that cannot be combined with other values */content: normal;content: none; /* <image> values */content: url(\"http://www.example.com/test.png\");content: linear-gradient(#e66465, #9198e5);content: image-set(\"image1x.png\" 1x, \"image2x.png\" 2x); /* alt text for generated content, added in the Level 3 specification */content: url(\"http://www.example.com/test.png\") / \"This is the alt text\"; /* <string> value */content: \"prefix\"; /* <counter> values, optionally with <list-style-type> */content: counter(chapter_counter);content: counter(chapter_counter, upper-roman);content: counters(section_counter, \".\");content: counters(section_counter, \".\", decimal-leading-zero); /* attr() value linked to the HTML attribute value */content: attr(value string); /* Language- and position-dependent keywords */content: open-quote;content: close-quote;content: no-open-quote;content: no-close-quote; /* Except for normal and none, several values can be used simultaneously */content: open-quote counter(chapter_counter); /* Global values */content: inherit;content: initial;content: revert;content: revert-layer;content: unset;", "grammar": "/* Keywords that cannot be combined with other values */\ncontent: normal;\ncontent: none;\n\n/* <image> values */\ncontent: url(\"http://www.example.com/test.png\");\ncontent: linear-gradient(#e66465, #9198e5);\ncontent: image-set(\"image1x.png\" 1x, \"image2x.png\" 2x);\n\n/* alt text for generated content, added in the Level 3 specification */\ncontent: url(\"http://www.example.com/test.png\") / \"This is the alt text\";\n\n/* <string> value */\ncontent: \"prefix\";\n\n/* <counter> values, optionally with <list-style-type> */\ncontent: counter(chapter_counter);\ncontent: counter(chapter_counter, upper-roman);\ncontent: counters(section_counter, \".\");\ncontent: counters(section_counter, \".\", decimal-leading-zero);\n\n/* attr() value linked to the HTML attribute value */\ncontent: attr(value string);\n\n/* Language- and position-dependent keywords */\ncontent: open-quote;\ncontent: close-quote;\ncontent: no-open-quote;\ncontent: no-close-quote;\n\n/* Except for normal and none, several values can be used simultaneously */\ncontent: open-quote counter(chapter_counter);\n\n/* Global values */\ncontent: inherit;\ncontent: initial;\ncontent: revert;\ncontent: revert-layer;\ncontent: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "All elements, tree-abiding pseudo-elements, and page margin boxes", "name": "content"}, "content-visibility": {"desc": "The content-visibility CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. Basically it enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.", "grammar": "/* Keyword values */\ncontent-visibility: visible;\ncontent-visibility: hidden;\ncontent-visibility: auto;\n\n/* Global values */\ncontent-visibility: inherit;\ncontent-visibility: initial;\ncontent-visibility: revert;\ncontent-visibility: revert-layer;\ncontent-visibility: unset;\n", "initial value": "visible", "inherit": "no", "applicable elements": "elementsForWhichLayoutContainmentCanApply", "name": "content-visibility"}, "counter-increment": {"desc": "The counter-increment CSS property increases or decreases the value of a CSS counter by a given value.", "grammar": "/* Increment \"my-counter\" by 1 */\ncounter-increment: my-counter;\n\n/* Decrement \"my-counter\" by 1 */\ncounter-increment: my-counter -1;\n\n/* Increment \"counter1\" by 1, and decrement \"counter2\" by 4 */\ncounter-increment: counter1 counter2 -4;\n\n/* Do not increment/decrement anything: used to override less specific rules */\ncounter-increment: none;\n\n/* Global values */\ncounter-increment: inherit;\ncounter-increment: initial;\ncounter-increment: revert;\ncounter-increment: revert-layer;\ncounter-increment: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "counter-increment"}, "counter-reset": {"desc": "The counter-reset CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element. Normal counters have a default initial value of 0. Reversed counters are intended to count down, and have a default initial value set to the number of elements at the current level. The default initial values make it easy to implement the two most common numbering patterns: counting up from one to the number of elements, and counting down from the number of elements to one. A counter's value is increased or decreased using the counter-increment CSS property, and the value of an existing counter may be set using counter-set.", "grammar": "/* Set \"my-counter\" to 0 */\ncounter-reset: my-counter;\n\n/* Set \"my-counter\" to -3 */\ncounter-reset: my-counter -3;\n\n/* Set reversed \"my-counter\" to \"the number of peer elements\" */\ncounter-reset: reversed(my-counter);\n\n/* Set reversed \"my-counter\" to -1 */\ncounter-reset: reversed(my-counter) -1;\n\n/* Set counter2 to 9 and reversed \"counter1\" and \"counter3\" to 1 and 4, respectively*/\ncounter-reset: reversed(counter1) 1 counter2 9 reversed(counter3) 4;\n\n/* Cancel any reset that could have been set in less specific rules */\ncounter-reset: none;\n\n/* Global values */\ncounter-reset: inherit;\ncounter-reset: initial;\ncounter-reset: revert;\ncounter-reset: revert-layer;\ncounter-reset: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "counter-reset"}, "counter-set": {"desc": "The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.", "grammar": "/* Set \"my-counter\" to 0 */\ncounter-set: my-counter;\n\n/* Set \"my-counter\" to -1 */\ncounter-set: my-counter -1;\n\n/* Set \"counter1\" to 1, and \"counter2\" to 4 */\ncounter-set: counter1 1 counter2 4;\n\n/* Cancel any counter that could have been set in less specific rules */\ncounter-set: none;\n\n/* Global values */\ncounter-set: inherit;\ncounter-set: initial;\ncounter-set: revert;\ncounter-set: revert-layer;\ncounter-set: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "counter-set"}, "cursor": {"desc": "The cursor CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element. The cursor setting should inform users of the mouse operations that can be performed at the current location, including: text selection, activating help or context menus, copying content, resizing tables, and so on. You can specify either the type of cursor using a keyword, or load a specific icon to use (with optional fallback images and mandatory keyword as a final fallback).", "grammar": "/* Keyword value */\ncursor: auto;\ncursor: pointer;\n...\ncursor: zoom-out;\n\n/* URL with mandatory keyword fallback */\ncursor: url(hand.cur), pointer;\n\n/* URL and coordinates, with mandatory keyword fallback */\ncursor: url(cursor_1.png) 4 12, auto;\ncursor: url(cursor_2.png) 2 2, pointer;\n\n/* URLs and fallback URLs (some with coordinates), with mandatory keyword fallback */\ncursor: url(cursor_1.svg) 4 5, url(cursor_2.svg), ... , url(cursor_n.cur) 5 5, progress;\n\n/* Global values */\ncursor: inherit;\ncursor: initial;\ncursor: revert;\ncursor: revert-layer;\ncursor: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "cursor"}, "direction": {"desc": "The direction CSS property sets the direction of text, table columns, and horizontal overflow. Use rtl for languages written from right to left (like Hebrew or Arabic), and ltr for those written from left to right (like English and most other languages).", "grammar": "/* Keyword values */\ndirection: ltr;\ndirection: rtl;\n\n/* Global values */\ndirection: inherit;\ndirection: initial;\ndirection: revert;\ndirection: revert-layer;\ndirection: unset;\n", "initial value": "ltr", "inherit": "yes", "applicable elements": "all elements", "name": "direction"}, "display": {"desc": "The display CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.Formally, the display property sets an element's inner and outer display types. The outer type sets an element's participation in flow layout; the inner type sets the layout of children. Some values of display are fully defined in their own individual specifications; for example the detail of what happens when display: flex is declared is defined in the CSS Flexible Box Model specification.", "grammar": "/* precomposed values */\ndisplay: block;\ndisplay: inline;\ndisplay: inline-block;\ndisplay: flex;\ndisplay: inline-flex;\ndisplay: grid;\ndisplay: inline-grid;\ndisplay: flow-root;\n\n/* box generation */\ndisplay: none;\ndisplay: contents;\n\n/* two-value syntax */\ndisplay: block flow;\ndisplay: inline flow;\ndisplay: inline flow-root;\ndisplay: block flex;\ndisplay: inline flex;\ndisplay: block grid;\ndisplay: inline grid;\ndisplay: block flow-root;\n\n/* other values */\ndisplay: table;\ndisplay: table-row; /* all table elements have an equivalent CSS display value */\ndisplay: list-item;\n\n/* Global values */\ndisplay: inherit;\ndisplay: initial;\ndisplay: revert;\ndisplay: revert-layer;\ndisplay: unset;\n", "initial value": "inline", "inherit": "no", "applicable elements": "all elements", "name": "display"}, "empty-cells": {"desc": "The empty-cells CSS property sets whether borders and backgrounds appear around <table> cells that have no visible content.", "grammar": "/* Keyword values */\nempty-cells: show;\nempty-cells: hide;\n\n/* Global values */\nempty-cells: inherit;\nempty-cells: initial;\nempty-cells: revert;\nempty-cells: revert-layer;\nempty-cells: unset;\n", "initial value": "show", "inherit": "yes", "applicable elements": "table-cell elements", "name": "empty-cells"}, "filter": {"desc": "The filter CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.Included in the CSS standard are several functions that achieve predefined effects. You can also reference an SVG filter with a URL to an SVG filter element.", "grammar": "/* URL to SVG filter */\nfilter: url(\"filters.svg#filter-id\");\n\n/* <filter-function> values */\nfilter: blur(5px);\nfilter: brightness(0.4);\nfilter: contrast(200%);\nfilter: drop-shadow(16px 16px 20px blue);\nfilter: grayscale(50%);\nfilter: hue-rotate(90deg);\nfilter: invert(75%);\nfilter: opacity(25%);\nfilter: saturate(30%);\nfilter: sepia(60%);\n\n/* Multiple filters */\nfilter: contrast(175%) brightness(3%);\n\n/* Use no filter */\nfilter: none;\n\n/* Global values */\nfilter: inherit;\nfilter: initial;\nfilter: revert;\nfilter: revert-layer;\nfilter: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "filter"}, "flex": {"desc": "The flex CSS shorthand property sets how a flex item will grow or shrink to fit the space available in its flex container.", "grammar": "/* Keyword values */\nflex: auto;\nflex: initial;\nflex: none;\n\n/* One value, unitless number: flex-grow\nflex-basis is then equal to 0. */\nflex: 2;\n\n/* One value, width/height: flex-basis */\nflex: 10em;\nflex: 30%;\nflex: min-content;\n\n/* Two values: flex-grow | flex-basis */\nflex: 1 30px;\n\n/* Two values: flex-grow | flex-shrink */\nflex: 2 2;\n\n/* Three values: flex-grow | flex-shrink | flex-basis */\nflex: 2 2 10%;\n\n/* Global values */\nflex: inherit;\nflex: initial;\nflex: revert;\nflex: revert-layer;\nflex: unset;\n", "initial value": "as each of the properties of the shorthand:flex-grow: 0flex-shrink: 1flex-basis: auto", "inherit": "no", "applicable elements": "flex items, including in-flow pseudo-elements", "name": "flex"}, "flex-basis": {"desc": "The flex-basis CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with box-sizing.", "grammar": "/* Specify <'width'> */\nflex-basis: 10em;\nflex-basis: 3px;\nflex-basis: auto;\n\n/* Intrinsic sizing keywords */\nflex-basis: fill;\nflex-basis: max-content;\nflex-basis: min-content;\nflex-basis: fit-content;\n\n/* Automatically size based on the flex item's content */\nflex-basis: content;\n\n/* Global values */\nflex-basis: inherit;\nflex-basis: initial;\nflex-basis: revert;\nflex-basis: revert-layer;\nflex-basis: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "flex items, including in-flow pseudo-elements", "name": "flex-basis"}, "flex-direction": {"desc": "The flex-direction CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).", "grammar": "/* The direction text is laid out in a line */\nflex-direction: row;\n\n/* Like <row>, but reversed */\nflex-direction: row-reverse;\n\n/* The direction in which lines of text are stacked */\nflex-direction: column;\n\n/* Like <column>, but reversed */\nflex-direction: column-reverse;\n\n/* Global values */\nflex-direction: inherit;\nflex-direction: initial;\nflex-direction: revert;\nflex-direction: revert-layer;\nflex-direction: unset;\n", "initial value": "row", "inherit": "no", "applicable elements": "flex containers", "name": "flex-direction"}, "flex-flow": {"desc": "The flex-flow CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.", "grammar": "/* flex-flow: <'flex-direction'> */\nflex-flow: row;\nflex-flow: row-reverse;\nflex-flow: column;\nflex-flow: column-reverse;\n\n/* flex-flow: <'flex-wrap'> */\nflex-flow: nowrap;\nflex-flow: wrap;\nflex-flow: wrap-reverse;\n\n/* flex-flow: <'flex-direction'> and <'flex-wrap'> */\nflex-flow: row nowrap;\nflex-flow: column wrap;\nflex-flow: column-reverse wrap-reverse;\n\n/* Global values */\nflex-flow: inherit;\nflex-flow: initial;\nflex-flow: revert;\nflex-flow: revert-layer;\nflex-flow: unset;\n", "initial value": "as each of the properties of the shorthand:flex-direction: rowflex-wrap: nowrap", "inherit": "no", "applicable elements": "flex containers", "name": "flex-flow"}, "flex-grow": {"desc": "The flex-grow CSS property sets the flex grow factor of a flex item's main size.", "grammar": "/* <number> values */\nflex-grow: 3;\nflex-grow: 0.6;\n\n/* Global values */\nflex-grow: inherit;\nflex-grow: initial;\nflex-grow: revert;\nflex-grow: revert-layer;\nflex-grow: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "flex items, including in-flow pseudo-elements", "name": "flex-grow"}, "flex-shrink": {"desc": "The flex-shrink CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to flex-shrink.In use, flex-shrink is used alongside the other flex properties flex-grow and flex-basis, and normally defined using the flex shorthand.", "grammar": "/* <number> values */\nflex-shrink: 2;\nflex-shrink: 0.6;\n\n/* Global values */\nflex-shrink: inherit;\nflex-shrink: initial;\nflex-shrink: revert;\nflex-shrink: revert-layer;\nflex-shrink: unset;\n", "initial value": "1", "inherit": "no", "applicable elements": "flex items, including in-flow pseudo-elements", "name": "flex-shrink"}, "flex-wrap": {"desc": "The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.", "grammar": "flex-wrap: nowrap; /* Default value */\nflex-wrap: wrap;\nflex-wrap: wrap-reverse;\n\n/* Global values */\nflex-wrap: inherit;\nflex-wrap: initial;\nflex-wrap: revert;\nflex-wrap: revert-layer;\nflex-wrap: unset;\n", "initial value": "nowrap", "inherit": "no", "applicable elements": "flex containers", "name": "flex-wrap"}, "float": {"desc": "The float CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).", "grammar": "/* Keyword values */\nfloat: left;\nfloat: right;\nfloat: none;\nfloat: inline-start;\nfloat: inline-end;\n\n/* Global values */\nfloat: inherit;\nfloat: initial;\nfloat: revert;\nfloat: revert-layer;\nfloat: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements, but has no effect if the value of display is none.", "name": "float"}, "font": {"desc": "The font CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.", "grammar": "/* Set the font size to 12px and the line height to 14px.\n   Set the font family to sans-serif */\np { font: 12px/14px sans-serif }\n\n/* Set the font size to 80% of the parent element\n   or default value (if no parent element present).\n   Set the font family to sans-serif */\np { font: 80% sans-serif }\n\n/* Set the font weight to bold,\n   the font-style to italic,\n   the font size to large,\n   and the font family to serif. */\np { font: bold italic large serif }\n\n/* Use the same font as the status bar of the window */\np { font: status-bar }\n", "initial value": "as each of the properties of the shorthand:font-style: normalfont-variant: normalfont-weight: normalfont-stretch: normalfont-size: mediumline-height: normalfont-family: depends on user agent", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font"}, "font-family": {"desc": "The font-family CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.", "grammar": "/* A font family name and a generic family name */\nfont-family: \"Gill Sans Extrabold\", sans-serif;\nfont-family: \"Goudy Bookletter 1911\", sans-serif;\n\n/* A generic family name only */\nfont-family: serif;\nfont-family: sans-serif;\nfont-family: monospace;\nfont-family: cursive;\nfont-family: fantasy;\nfont-family: system-ui;\nfont-family: ui-serif;\nfont-family: ui-sans-serif;\nfont-family: ui-monospace;\nfont-family: ui-rounded;\nfont-family: emoji;\nfont-family: math;\nfont-family: fangsong;\n\n/* Global values */\nfont-family: inherit;\nfont-family: initial;\nfont-family: revert;\nfont-family: revert-layer;\nfont-family: unset;\n", "initial value": "depends on user agent", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-family"}, "font-feature-settings": {"desc": "The font-feature-settings CSS property controls advanced typographic features in OpenType fonts.", "grammar": "/* Use the default settings */\nfont-feature-settings: normal;\n\n/* Set values for OpenType feature tags */\nfont-feature-settings: \"smcp\";\nfont-feature-settings: \"smcp\" on;\nfont-feature-settings: \"swsh\" 2;\nfont-feature-settings: \"smcp\", \"swsh\" 2;\n\n/* Global values */\nfont-feature-settings: inherit;\nfont-feature-settings: initial;\nfont-feature-settings: revert;\nfont-feature-settings: revert-layer;\nfont-feature-settings: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-feature-settings"}, "font-kerning": {"desc": "The font-kerning CSS property sets the use of the kerning information stored in a font.", "grammar": "font-kerning: auto;\nfont-kerning: normal;\nfont-kerning: none;\n\n/* Global values */\nfont-kerning: inherit;\nfont-kerning: initial;\nfont-kerning: revert;\nfont-kerning: revert-layer;\nfont-kerning: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-kerning"}, "font-language-override": {"desc": "The font-language-override CSS property controls the use of language-specific glyphs in a typeface./* Keyword value */font-language-override: normal; /* <string> values */font-language-override: \"ENG\"; /* Use English glyphs */font-language-override: \"TRK\"; /* Use Turkish glyphs */ /* Global values */font-language-override: inherit;font-language-override: initial;font-language-override: revert;font-language-override: revert-layer;font-language-override: unset; By default, HTML's lang attribute tells browsers to display glyphs designed specifically for that language. For example, a lot of fonts have a special character for the digraph fi that merge the dot on the \"i\" with the \"f.\" However, if the language is set to Turkish the typeface will likely know not to use the merged glyph; Turkish has two versions of the \"i,\" one with a dot (i) and one without (ı), and using the ligature would incorrectly transform a dotted \"i\" into a dotless \"i.\"The font-language-override property lets you override the typeface behavior for a specific language. This is useful, for example, when the typeface you're using lacks proper support for the language. For instance, if a typeface doesn't have proper rules for the Azeri language, you can force the font to use Turkish glyphs, which follow similar rules.", "grammar": "/* Keyword value */\nfont-language-override: normal;\n\n/* <string> values */\nfont-language-override: \"ENG\";  /* Use English glyphs */\nfont-language-override: \"TRK\";  /* Use Turkish glyphs */\n\n/* Global values */\nfont-language-override: inherit;\nfont-language-override: initial;\nfont-language-override: revert;\nfont-language-override: revert-layer;\nfont-language-override: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-language-override"}, "font-optical-sizing": {"desc": "The font-optical-sizing CSS property sets whether text rendering is optimized for viewing at different sizes.", "grammar": "/* keyword values */\nfont-optical-sizing: none;\nfont-optical-sizing: auto; /* default */\n\n/* Global values */\nfont-optical-sizing: inherit;\nfont-optical-sizing: initial;\nfont-optical-sizing: revert;\nfont-optical-sizing: revert-layer;\nfont-optical-sizing: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-optical-sizing"}, "font-size": {"desc": "The font-size CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative <length> units, such as em, ex, and so forth.", "grammar": "/* <absolute-size> values */\nfont-size: xx-small;\nfont-size: x-small;\nfont-size: small;\nfont-size: medium;\nfont-size: large;\nfont-size: x-large;\nfont-size: xx-large;\nfont-size: xxx-large;\n\n/* <relative-size> values */\nfont-size: smaller;\nfont-size: larger;\n\n/* <length> values */\nfont-size: 12px;\nfont-size: 0.8em;\n\n/* <percentage> values */\nfont-size: 80%;\n\n/* Global values */\nfont-size: inherit;\nfont-size: initial;\nfont-size: revert;\nfont-size: revert-layer;\nfont-size: unset;\n", "initial value": "medium", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-size"}, "font-size-adjust": {"desc": "The font-size-adjust CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters)./* Use the specified font size */font-size-adjust: none; /* Use a font size that makes lowercase letters half the specified font size */font-size-adjust: 0.5; /* Two values - added in the Level 5 spec */font-size-adjust: ex-height 0.5; /* Global values */font-size-adjust: inherit;font-size-adjust: initial;font-size-adjust: revert;font-size-adjust: revert-layer;font-size-adjust: unset; The property is useful since the legibility of fonts, especially at small sizes, is determined more by the size of lowercase letters than by the size of capital letters. Legibility can become an issue when the first-choice font-family is unavailable and its replacement has a significantly different aspect ratio (the ratio of the size of lowercase letters to the size of the font).To use this property in a way that is compatible with browsers that do not support font-size-adjust, it is specified as a number that the font-size property is multiplied by. This means the value specified for the property should generally be the aspect ratio of the first choice font. For example, a style sheet that specifies:font-size: 14px;font-size-adjust: 0.5; ... is really specifying that the lowercase letters of the font should be 7px high (0.5 × 14px). This will still produce reasonable results in browsers that do not support font-size-adjust, where a 14px font will be used.", "grammar": "/* Use the specified font size */\nfont-size-adjust: none;\n\n/* Use a font size that makes lowercase\n   letters half the specified font size */\nfont-size-adjust: 0.5;\n\n/* Two values - added in the Level 5 spec */\nfont-size-adjust: ex-height 0.5;\n\n/* Global values */\nfont-size-adjust: inherit;\nfont-size-adjust: initial;\nfont-size-adjust: revert;\nfont-size-adjust: revert-layer;\nfont-size-adjust: unset;\n", "initial value": "none", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-size-adjust"}, "font-stretch": {"desc": "The font-stretch CSS property selects a normal, condensed, or expanded face from a font.", "grammar": "/* Keyword values */\nfont-stretch: ultra-condensed;\nfont-stretch: extra-condensed;\nfont-stretch: condensed;\nfont-stretch: semi-condensed;\nfont-stretch: normal;\nfont-stretch: semi-expanded;\nfont-stretch: expanded;\nfont-stretch: extra-expanded;\nfont-stretch: ultra-expanded;\n\n/* Percentage values */\nfont-stretch: 50%;\nfont-stretch: 100%;\nfont-stretch: 200%;\n\n/* Global values */\nfont-stretch: inherit;\nfont-stretch: initial;\nfont-stretch: revert;\nfont-stretch: revert-layer;\nfont-stretch: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-stretch"}, "font-style": {"desc": "The font-style CSS property sets whether a font should be styled with a normal, italic, or oblique face from its font-family.", "grammar": "font-style: normal;\nfont-style: italic;\nfont-style: oblique;\nfont-style: oblique 10deg;\n\n/* Global values */\nfont-style: inherit;\nfont-style: initial;\nfont-style: revert;\nfont-style: revert-layer;\nfont-style: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-style"}, "font-synthesis": {"desc": "The font-synthesis CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.", "grammar": "font-synthesis: none;\nfont-synthesis: weight;\nfont-synthesis: style;\nfont-synthesis: small-caps;\nfont-synthesis: weight style small-caps;\n\n/* Global values */\nfont-synthesis: inherit;\nfont-synthesis: initial;\nfont-synthesis: revert;\nfont-synthesis: revert-layer;\nfont-synthesis: unset;\n", "initial value": "weight style", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-synthesis"}, "font-variant": {"desc": "The font-variant CSS shorthand property allows you to set all the font variants for a font.You can also set the CSS Level 2 (Revision 1) values of font-variant, (that is, normal or small-caps), by using the font shorthand.", "grammar": "font-variant: small-caps;\nfont-variant: common-ligatures small-caps;\n\n/* Global values */\nfont-variant: inherit;\nfont-variant: initial;\nfont-variant: revert;\nfont-variant: revert-layer;\nfont-variant: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-variant"}, "font-variant-alternates": {"desc": "The font-variant-alternates CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in @font-feature-values./* Keyword values */font-variant-alternates: normal;font-variant-alternates: historical-forms; /* Functional notation values */font-variant-alternates: stylistic(user-defined-ident);font-variant-alternates: styleset(user-defined-ident);font-variant-alternates: character-variant(user-defined-ident);font-variant-alternates: swash(user-defined-ident);font-variant-alternates: ornaments(user-defined-ident);font-variant-alternates: annotation(user-defined-ident);font-variant-alternates: swash(ident1) annotation(ident2); /* Global values */font-variant-alternates: inherit;font-variant-alternates: initial;font-variant-alternates: revert;font-variant-alternates: revert-layer;font-variant-alternates: unset; The @font-feature-values at-rule can define names for alternative glyph functions (stylistic, styleset, character-variant, swash, ornament or annotation), associating the name with OpenType parameters. This property allows those human-readable names (defined in @font-feature-values) in the stylesheet.", "grammar": "/* Keyword values */\nfont-variant-alternates: normal;\nfont-variant-alternates: historical-forms;\n\n/* Functional notation values */\nfont-variant-alternates: stylistic(user-defined-ident);\nfont-variant-alternates: styleset(user-defined-ident);\nfont-variant-alternates: character-variant(user-defined-ident);\nfont-variant-alternates: swash(user-defined-ident);\nfont-variant-alternates: ornaments(user-defined-ident);\nfont-variant-alternates: annotation(user-defined-ident);\nfont-variant-alternates: swash(ident1) annotation(ident2);\n\n/* Global values */\nfont-variant-alternates: inherit;\nfont-variant-alternates: initial;\nfont-variant-alternates: revert;\nfont-variant-alternates: revert-layer;\nfont-variant-alternates: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-variant-alternates"}, "font-variant-caps": {"desc": "The font-variant-caps CSS property controls the use of alternate glyphs for capital letters.", "grammar": "/* Keyword values */\nfont-variant-caps: normal;\nfont-variant-caps: small-caps;\nfont-variant-caps: all-small-caps;\nfont-variant-caps: petite-caps;\nfont-variant-caps: all-petite-caps;\nfont-variant-caps: unicase;\nfont-variant-caps: titling-caps;\n\n/* Global values */\nfont-variant-caps: inherit;\nfont-variant-caps: initial;\nfont-variant-caps: revert;\nfont-variant-caps: revert-layer;\nfont-variant-caps: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-variant-caps"}, "font-variant-east-asian": {"desc": "The font-variant-east-asian CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.font-variant-east-asian: normal;font-variant-east-asian: ruby;font-variant-east-asian: jis78; /* <east-asian-variant-values> */font-variant-east-asian: jis83; /* <east-asian-variant-values> */font-variant-east-asian: jis90; /* <east-asian-variant-values> */font-variant-east-asian: jis04; /* <east-asian-variant-values> */font-variant-east-asian: simplified; /* <east-asian-variant-values> */font-variant-east-asian: traditional; /* <east-asian-variant-values> */font-variant-east-asian: full-width; /* <east-asian-width-values> */font-variant-east-asian: proportional-width; /* <east-asian-width-values> */font-variant-east-asian: ruby full-width jis83; /* Global values */font-variant-east-asian: inherit;font-variant-east-asian: initial;font-variant-east-asian: revert;font-variant-east-asian: revert-layer;font-variant-east-asian: unset;", "grammar": "font-variant-east-asian: normal;\nfont-variant-east-asian: ruby;\nfont-variant-east-asian: jis78;              /* <east-asian-variant-values> */\nfont-variant-east-asian: jis83;              /* <east-asian-variant-values> */\nfont-variant-east-asian: jis90;              /* <east-asian-variant-values> */\nfont-variant-east-asian: jis04;              /* <east-asian-variant-values> */\nfont-variant-east-asian: simplified;         /* <east-asian-variant-values> */\nfont-variant-east-asian: traditional;        /* <east-asian-variant-values> */\nfont-variant-east-asian: full-width;         /* <east-asian-width-values> */\nfont-variant-east-asian: proportional-width; /* <east-asian-width-values> */\nfont-variant-east-asian: ruby full-width jis83;\n\n/* Global values */\nfont-variant-east-asian: inherit;\nfont-variant-east-asian: initial;\nfont-variant-east-asian: revert;\nfont-variant-east-asian: revert-layer;\nfont-variant-east-asian: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-variant-east-asian"}, "font-variant-ligatures": {"desc": "The font-variant-ligatures CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.", "grammar": "/* Keyword values */\nfont-variant-ligatures: normal;\nfont-variant-ligatures: none;\nfont-variant-ligatures: common-ligatures;           /* <common-lig-values> */\nfont-variant-ligatures: no-common-ligatures;        /* <common-lig-values> */\nfont-variant-ligatures: discretionary-ligatures;    /* <discretionary-lig-values> */\nfont-variant-ligatures: no-discretionary-ligatures; /* <discretionary-lig-values> */\nfont-variant-ligatures: historical-ligatures;       /* <historical-lig-values> */\nfont-variant-ligatures: no-historical-ligatures;    /* <historical-lig-values> */\nfont-variant-ligatures: contextual;                 /* <contextual-alt-values> */\nfont-variant-ligatures: no-contextual;              /* <contextual-alt-values> */\n\n/* Global values */\nfont-variant-ligatures: inherit;\nfont-variant-ligatures: initial;\nfont-variant-ligatures: revert;\nfont-variant-ligatures: revert-layer;\nfont-variant-ligatures: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-variant-ligatures"}, "font-variant-numeric": {"desc": "The font-variant-numeric CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.", "grammar": "font-variant-numeric: normal;\nfont-variant-numeric: ordinal;\nfont-variant-numeric: slashed-zero;\nfont-variant-numeric: lining-nums;         /* <numeric-figure-values> */\nfont-variant-numeric: oldstyle-nums;       /* <numeric-figure-values> */\nfont-variant-numeric: proportional-nums;   /* <numeric-spacing-values> */\nfont-variant-numeric: tabular-nums;        /* <numeric-spacing-values> */\nfont-variant-numeric: diagonal-fractions;  /* <numeric-fraction-values> */\nfont-variant-numeric: stacked-fractions;   /* <numeric-fraction-values> */\nfont-variant-numeric: oldstyle-nums stacked-fractions;\n\n/* Global values */\nfont-variant-numeric: inherit;\nfont-variant-numeric: initial;\nfont-variant-numeric: revert;\nfont-variant-numeric: revert-layer;\nfont-variant-numeric: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-variant-numeric"}, "font-variant-position": {"desc": "The font-variant-position CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.The glyphs are positioned relative to the baseline of the font, which remains unchanged. These glyphs are typically used in <sub> and <sup> elements./* Keyword values */font-variant-position: normal;font-variant-position: sub;font-variant-position: super; /* Global values */font-variant-position: inherit;font-variant-position: initial;font-variant-position: revert;font-variant-position: revert-layer;font-variant-position: unset; When the usage of these alternate glyphs is activated, if one character in the run doesn't have such a typographically-enhanced glyph, the whole set of characters of the run is rendered using a fallback method, synthesizing these glyphs.These alternate glyphs share the same em-box and the same baseline as the rest of the font. They are merely graphically enhanced, and have no effect on the line-height and other box characteristics.", "grammar": "/* Keyword values */\nfont-variant-position: normal;\nfont-variant-position: sub;\nfont-variant-position: super;\n\n/* Global values */\nfont-variant-position: inherit;\nfont-variant-position: initial;\nfont-variant-position: revert;\nfont-variant-position: revert-layer;\nfont-variant-position: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-variant-position"}, "font-variation-settings": {"desc": "The font-variation-settings CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.", "grammar": "/* Use the default settings */\nfont-variation-settings: normal;\n\n/* Set values for variable font axis names */\nfont-variation-settings: \"XHGT\" 0.7;\n\n/* Global values */\nfont-variation-settings: inherit;\nfont-variation-settings: initial;\nfont-variation-settings: revert;\nfont-variation-settings: revert-layer;\nfont-variation-settings: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-variation-settings"}, "font-weight": {"desc": "The font-weight CSS property sets the weight (or boldness) of the font. The weights available depend on the font-family that is currently set.", "grammar": "/* Keyword values */\nfont-weight: normal;\nfont-weight: bold;\n\n/* Keyword values relative to the parent */\nfont-weight: lighter;\nfont-weight: bolder;\n\n/* Numeric keyword values */\nfont-weight: 100;\nfont-weight: 200;\nfont-weight: 300;\nfont-weight: 400;// normal\nfont-weight: 500;\nfont-weight: 600;\nfont-weight: 700;// bold\nfont-weight: 800;\nfont-weight: 900;\n\n/* Global values */\nfont-weight: inherit;\nfont-weight: initial;\nfont-weight: revert;\nfont-weight: revert-layer;\nfont-weight: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "font-weight"}, "forced-color-adjust": {"desc": "The forced-color-adjust CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.", "grammar": "forced-color-adjust: auto;\nforced-color-adjust: none;\n\n/* Global values */\nforced-color-adjust: inherit;\nforced-color-adjust: initial;\nforced-color-adjust: revert;\nforced-color-adjust: revert-layer;\nforced-color-adjust: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements and text", "name": "forced-color-adjust"}, "gap (grid-gap)": {"desc": "The gap CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for row-gap and column-gap.", "grammar": "/* One <length> value */\ngap: 20px;\ngap: 1em;\ngap: 3vmin;\ngap: 0.5cm;\n\n/* One <percentage> value */\ngap: 16%;\ngap: 100%;\n\n/* Two <length> values */\ngap: 20px 10px;\ngap: 1em 0.5em;\ngap: 3vmin 2vmax;\ngap: 0.5cm 2mm;\n\n/* One or two <percentage> values */\ngap: 16% 100%;\ngap: 21px 82%;\n\n/* calc() values */\ngap: calc(10% + 20px);\ngap: calc(20px + 10%) calc(10% - 5px);\n\n/* Global values */\ngap: inherit;\ngap: initial;\ngap: revert;\ngap: revert-layer;\ngap: unset;\n", "initial value": "as each of the properties of the shorthand:row-gap: normalcolumn-gap: normal", "inherit": "no", "applicable elements": "multi-column elements, flex containers, grid containers", "name": "gap (grid-gap)"}, "grid": {"desc": "The grid CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.Using grid you specify one axis using grid-template-rows or grid-template-columns, you then specify how content should auto-repeat in the other axis using the implicit grid properties: grid-auto-rows, grid-auto-columns, and grid-auto-flow.", "grammar": "/* <'grid-template'> values */\ngrid: none;\ngrid: \"a\" 100px \"b\" 1fr;\ngrid: [linename1] \"a\" 100px [linename2];\ngrid: \"a\" 200px \"b\" min-content;\ngrid: \"a\" minmax(100px, max-content) \"b\" 20%;\ngrid: 100px / 200px;\ngrid: minmax(400px, min-content) / repeat(auto-fill, 50px);\n\n/* <'grid-template-rows'> /\n   [ auto-flow && dense? ] <'grid-auto-columns'>? values */\ngrid: 200px / auto-flow;\ngrid: 30% / auto-flow dense;\ngrid: repeat(3, [line1 line2 line3] 200px) / auto-flow 300px;\ngrid: [line1] minmax(20em, max-content) / auto-flow dense 40%;\n\n/* [ auto-flow && dense? ] <'grid-auto-rows'>? /\n   <'grid-template-columns'> values */\ngrid: auto-flow / 200px;\ngrid: auto-flow dense / 30%;\ngrid: auto-flow 300px / repeat(3, [line1 line2 line3] 200px);\ngrid: auto-flow dense 40% / [line1] minmax(20em, max-content);\n\n/* Global values */\ngrid: inherit;\ngrid: initial;\ngrid: revert;\ngrid: revert-layer;\ngrid: unset;\n", "initial value": "as each of the properties of the shorthand:grid-template-rows: nonegrid-template-columns: nonegrid-template-areas: nonegrid-auto-rows: autogrid-auto-columns: autogrid-auto-flow: rowgrid-column-gap: 0grid-row-gap: 0column-gap: normalrow-gap: normal", "inherit": "no", "applicable elements": "grid containers", "name": "grid"}, "grid-area": {"desc": "The grid-area CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.", "grammar": "/* Keyword values */\ngrid-area: auto;\ngrid-area: auto / auto;\ngrid-area: auto / auto / auto;\ngrid-area: auto / auto / auto / auto;\n\n/* <custom-ident> values */\ngrid-area: some-grid-area;\ngrid-area: some-grid-area / another-grid-area;\n\n/* <integer> && <custom-ident>? values */\ngrid-area:  4 some-grid-area;\ngrid-area:  4 some-grid-area / 2 another-grid-area;\n\n/* span && [ <integer> || <custom-ident> ] values */\ngrid-area: span 3;\ngrid-area: span 3 / span some-grid-area;\ngrid-area: 2 span / another-grid-area span;\n\n/* Global values */\ngrid-area: inherit;\ngrid-area: initial;\ngrid-area: revert;\ngrid-area: revert-layer;\ngrid-area: unset;\n", "initial value": "as each of the properties of the shorthand:grid-row-start: autogrid-column-start: autogrid-row-end: autogrid-column-end: auto", "inherit": "no", "applicable elements": "grid items and absolutely-positioned boxes whose containing block is a grid container", "name": "grid-area"}, "grid-auto-columns": {"desc": "The grid-auto-columns CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.", "grammar": "/* Keyword values */\ngrid-auto-columns: min-content;\ngrid-auto-columns: max-content;\ngrid-auto-columns: auto;\n\n/* <length> values */\ngrid-auto-columns: 100px;\ngrid-auto-columns: 20cm;\ngrid-auto-columns: 50vmax;\n\n/* <percentage> values */\ngrid-auto-columns: 10%;\ngrid-auto-columns: 33.3%;\n\n/* <flex> values */\ngrid-auto-columns: 0.5fr;\ngrid-auto-columns: 3fr;\n\n/* minmax() values */\ngrid-auto-columns: minmax(100px, auto);\ngrid-auto-columns: minmax(max-content, 2fr);\ngrid-auto-columns: minmax(20%, 80vmax);\n\n/* fit-content() values */\ngrid-auto-columns: fit-content(400px);\ngrid-auto-columns: fit-content(5cm);\ngrid-auto-columns: fit-content(20%);\n\n/* multiple track-size values */\ngrid-auto-columns: min-content max-content auto;\ngrid-auto-columns: 100px 150px 390px;\ngrid-auto-columns: 10% 33.3%;\ngrid-auto-columns: 0.5fr 3fr 1fr;\ngrid-auto-columns: minmax(100px, auto) minmax(max-content, 2fr) minmax(20%, 80vmax);\ngrid-auto-columns: 100px minmax(100px, auto) 10% 0.5fr fit-content(400px);\n\n/* Global values */\ngrid-auto-columns: inherit;\ngrid-auto-columns: initial;\ngrid-auto-columns: revert;\ngrid-auto-columns: revert-layer;\ngrid-auto-columns: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "grid containers", "name": "grid-auto-columns"}, "grid-auto-flow": {"desc": "The grid-auto-flow CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.", "grammar": "/* Keyword values */\ngrid-auto-flow: row;\ngrid-auto-flow: column;\ngrid-auto-flow: dense;\ngrid-auto-flow: row dense;\ngrid-auto-flow: column dense;\n\n/* Global values */\ngrid-auto-flow: inherit;\ngrid-auto-flow: initial;\ngrid-auto-flow: revert;\ngrid-auto-flow: revert-layer;\ngrid-auto-flow: unset;\n", "initial value": "row", "inherit": "no", "applicable elements": "grid containers", "name": "grid-auto-flow"}, "grid-auto-rows": {"desc": "The grid-auto-rows CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.", "grammar": "/* Keyword values */\ngrid-auto-rows: min-content;\ngrid-auto-rows: max-content;\ngrid-auto-rows: auto;\n\n/* <length> values */\ngrid-auto-rows: 100px;\ngrid-auto-rows: 20cm;\ngrid-auto-rows: 50vmax;\n\n/* <percentage> values */\ngrid-auto-rows: 10%;\ngrid-auto-rows: 33.3%;\n\n/* <flex> values */\ngrid-auto-rows: 0.5fr;\ngrid-auto-rows: 3fr;\n\n/* minmax() values */\ngrid-auto-rows: minmax(100px, auto);\ngrid-auto-rows: minmax(max-content, 2fr);\ngrid-auto-rows: minmax(20%, 80vmax);\n\n/* multiple track-size values */\ngrid-auto-rows: min-content max-content auto;\ngrid-auto-rows: 100px 150px 390px;\ngrid-auto-rows: 10% 33.3%;\ngrid-auto-rows: 0.5fr 3fr 1fr;\ngrid-auto-rows: minmax(100px, auto) minmax(max-content, 2fr) minmax(20%, 80vmax);\ngrid-auto-rows: 100px minmax(100px, auto) 10% 0.5fr fit-content(400px);\n\n/* Global values */\ngrid-auto-rows: inherit;\ngrid-auto-rows: initial;\ngrid-auto-rows: revert;\ngrid-auto-rows: revert-layer;\ngrid-auto-rows: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "grid containers", "name": "grid-auto-rows"}, "grid-column": {"desc": "The grid-column CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.", "grammar": "grid-column: auto;\n\n/* with line numbers */\ngrid-column: 1;\ngrid-column: 1 / 3;\ngrid-column: 1 /  span 2;\n\n/* with line names */\ngrid-column: main-start;\ngrid-column: main-start / main-end;\n\n/* Global values */\ngrid-column: inherit;\ngrid-column: initial;\ngrid-column: revert;\ngrid-column: revert-layer;\ngrid-column: unset;\n", "initial value": "as each of the properties of the shorthand:grid-column-start: autogrid-column-end: auto", "inherit": "no", "applicable elements": "grid items and absolutely-positioned boxes whose containing block is a grid container", "name": "grid-column"}, "grid-column-end": {"desc": "The grid-column-end CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.", "grammar": "/* Keyword value */\ngrid-column-end: auto;\n\n/* <custom-ident> values */\ngrid-column-end: somegridarea;\n\n/* <integer> + <custom-ident> values */\ngrid-column-end: 2;\ngrid-column-end: somegridarea 4;\n\n/* span + <integer> + <custom-ident> values */\ngrid-column-end: span 3;\ngrid-column-end: span somegridarea;\ngrid-column-end: 5 somegridarea span;\n\n/* Global values */\ngrid-column-end: inherit;\ngrid-column-end: initial;\ngrid-column-end: revert;\ngrid-column-end: revert-layer;\ngrid-column-end: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "grid items and absolutely-positioned boxes whose containing block is a grid container", "name": "grid-column-end"}, "grid-column-start": {"desc": "The grid-column-start CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.", "grammar": "/* Keyword value */\ngrid-column-start: auto;\n\n/* <custom-ident> value */\ngrid-column-start: somegridarea;\n\n/* <integer> + <custom-ident> values */\ngrid-column-start: 2;\ngrid-column-start: somegridarea 4;\n\n/* span + <integer> + <custom-ident> values */\ngrid-column-start: span 3;\ngrid-column-start: span somegridarea;\ngrid-column-start: span somegridarea 5;\n\n/* Global values */\ngrid-column-start: inherit;\ngrid-column-start: initial;\ngrid-column-start: revert;\ngrid-column-start: revert-layer;\ngrid-column-start: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "grid items and absolutely-positioned boxes whose containing block is a grid container", "name": "grid-column-start"}, "grid-row": {"desc": "The grid-row CSS shorthand property specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.", "grammar": "/* Keyword values */\ngrid-row: auto;\ngrid-row: auto / auto;\n\n/* <custom-ident> values */\ngrid-row: somegridarea;\ngrid-row: somegridarea / someothergridarea;\n\n/* <integer> + <custom-ident> values */\ngrid-row: somegridarea 4;\ngrid-row: 4 somegridarea / 6;\n\n/* span + <integer> + <custom-ident> values */\ngrid-row: span 3;\ngrid-row: span somegridarea;\ngrid-row: 5 somegridarea span;\ngrid-row: span 3 / 6;\ngrid-row: span somegridarea / span someothergridarea;\ngrid-row: 5 somegridarea span / 2 span;\n\n/* Global values */\ngrid-row: inherit;\ngrid-row: initial;\ngrid-row: revert;\ngrid-row: revert-layer;\ngrid-row: unset;\n", "initial value": "as each of the properties of the shorthand:grid-row-start: autogrid-row-end: auto", "inherit": "no", "applicable elements": "grid items and absolutely-positioned boxes whose containing block is a grid container", "name": "grid-row"}, "grid-row-end": {"desc": "The grid-row-end CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.", "grammar": "/* Keyword value */\ngrid-row-end: auto;\n\n/* <custom-ident> values */\ngrid-row-end: somegridarea;\n\n/* <integer> + <custom-ident> values */\ngrid-row-end: 2;\ngrid-row-end: somegridarea 4;\n\n/* span + <integer> + <custom-ident> values */\ngrid-row-end: span 3;\ngrid-row-end: span somegridarea;\ngrid-row-end: 5 somegridarea span;\n\n/* Global values */\ngrid-row-end: inherit;\ngrid-row-end: initial;\ngrid-row-end: revert;\ngrid-row-end: revert-layer;\ngrid-row-end: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "grid items and absolutely-positioned boxes whose containing block is a grid container", "name": "grid-row-end"}, "grid-row-start": {"desc": "The grid-row-start CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.", "grammar": "/* Keyword value */\ngrid-row-start: auto;\n\n/* <custom-ident> values */\ngrid-row-start: somegridarea;\n\n/* <integer> + <custom-ident> values */\ngrid-row-start: 2;\ngrid-row-start: somegridarea 4;\n\n/* span + <integer> + <custom-ident> values */\ngrid-row-start: span 3;\ngrid-row-start: span somegridarea;\ngrid-row-start: 5 somegridarea span;\n\n/* Global values */\ngrid-row-start: inherit;\ngrid-row-start: initial;\ngrid-row-start: revert;\ngrid-row-start: revert-layer;\ngrid-row-start: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "grid items and absolutely-positioned boxes whose containing block is a grid container", "name": "grid-row-start"}, "grid-template": {"desc": "The grid-template CSS property is a shorthand property for defining grid columns, rows, and areas.", "grammar": "/* Keyword value */\ngrid-template: none;\n\n/* grid-template-rows / grid-template-columns values */\ngrid-template: 100px 1fr / 50px 1fr;\ngrid-template: auto 1fr / auto 1fr auto;\ngrid-template: [linename] 100px / [columnname1] 30% [columnname2] 70%;\ngrid-template: fit-content(100px) / fit-content(40%);\n\n/* grid-template-areas grid-template-rows / grid-template-column values */\ngrid-template: \"a a a\"\n               \"b b b\";\ngrid-template: \"a a a\" 20%\n               \"b b b\" auto;\ngrid-template: [header-top] \"a a a\"     [header-bottom]\n                 [main-top] \"b b b\" 1fr [main-bottom]\n                            / auto 1fr auto;\n\n/* Global values */\ngrid-template: inherit;\ngrid-template: initial;\ngrid-template: revert;\ngrid-template: revert-layer;\ngrid-template: unset;\n", "initial value": "as each of the properties of the shorthand:grid-template-columns: nonegrid-template-rows: nonegrid-template-areas: none", "inherit": "no", "applicable elements": "grid containers", "name": "grid-template"}, "grid-template-areas": {"desc": "The grid-template-areas CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.", "grammar": "/* Keyword value */\ngrid-template-areas: none;\n\n/* <string> values */\ngrid-template-areas: \"a b\";\ngrid-template-areas: \"a b b\"\n                     \"a c d\";\n\n/* Global values */\ngrid-template-areas: inherit;\ngrid-template-areas: initial;\ngrid-template-areas: revert;\ngrid-template-areas: revert-layer;\ngrid-template-areas: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "grid containers", "name": "grid-template-areas"}, "grid-template-columns": {"desc": "The grid-template-columns CSS property defines the line names and track sizing functions of the grid columns.", "grammar": "/* Keyword value */\ngrid-template-columns: none;\n\n/* <track-list> values */\ngrid-template-columns: 100px 1fr;\ngrid-template-columns: [linename] 100px;\ngrid-template-columns: [linename1] 100px [linename2 linename3];\ngrid-template-columns: minmax(100px, 1fr);\ngrid-template-columns: fit-content(40%);\ngrid-template-columns: repeat(3, 200px);\ngrid-template-columns: subgrid;\ngrid-template-columns: masonry;\n\n/* <auto-track-list> values */\ngrid-template-columns: 200px repeat(auto-fill, 100px) 300px;\ngrid-template-columns: minmax(100px, max-content)\n                       repeat(auto-fill, 200px) 20%;\ngrid-template-columns: [linename1] 100px [linename2]\n                       repeat(auto-fit, [linename3 linename4] 300px)\n                       100px;\ngrid-template-columns: [linename1 linename2] 100px\n                       repeat(auto-fit, [linename1] 300px) [linename3];\n\n/* Global values */\ngrid-template-columns: inherit;\ngrid-template-columns: initial;\ngrid-template-columns: revert;\ngrid-template-columns: revert-layer;\ngrid-template-columns: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "grid containers", "name": "grid-template-columns"}, "grid-template-rows": {"desc": "The grid-template-rows CSS property defines the line names and track sizing functions of the grid rows.", "grammar": "/* Keyword value */\ngrid-template-rows: none;\n\n/* <track-list> values */\ngrid-template-rows: 100px 1fr;\ngrid-template-rows: [linename] 100px;\ngrid-template-rows: [linename1] 100px [linename2 linename3];\ngrid-template-rows: minmax(100px, 1fr);\ngrid-template-rows: fit-content(40%);\ngrid-template-rows: repeat(3, 200px);\ngrid-template-rows: subgrid;\ngrid-template-rows: masonry;\n\n/* <auto-track-list> values */\ngrid-template-rows: 200px repeat(auto-fill, 100px) 300px;\ngrid-template-rows: minmax(100px, max-content)\n                       repeat(auto-fill, 200px) 20%;\ngrid-template-rows: [linename1] 100px [linename2]\n                       repeat(auto-fit, [linename3 linename4] 300px)\n                       100px;\ngrid-template-rows: [linename1 linename2] 100px\n                       repeat(auto-fit, [linename1] 300px) [linename3];\n\n/* Global values */\ngrid-template-rows: inherit;\ngrid-template-rows: initial;\ngrid-template-rows: revert;\ngrid-template-rows: revert-layer;\ngrid-template-rows: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "grid containers", "name": "grid-template-rows"}, "hanging-punctuation": {"desc": "The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box./* Keyword values */hanging-punctuation: none;hanging-punctuation: first;hanging-punctuation: last;hanging-punctuation: force-end;hanging-punctuation: allow-end; /* Two keywords */hanging-punctuation: first force-end;hanging-punctuation: first allow-end;hanging-punctuation: first last;hanging-punctuation: last force-end;hanging-punctuation: last allow-end; /* Three keywords */hanging-punctuation: first force-end last;hanging-punctuation: first allow-end last; /* Global values */hanging-punctuation: inherit;hanging-punctuation: initial;hanging-punctuation: revert;hanging-punctuation: revert-layer;hanging-punctuation: unset;", "grammar": "/* Keyword values */\nhanging-punctuation: none;\nhanging-punctuation: first;\nhanging-punctuation: last;\nhanging-punctuation: force-end;\nhanging-punctuation: allow-end;\n\n/* Two keywords */\nhanging-punctuation: first force-end;\nhanging-punctuation: first allow-end;\nhanging-punctuation: first last;\nhanging-punctuation: last force-end;\nhanging-punctuation: last allow-end;\n\n/* Three keywords */\nhanging-punctuation: first force-end last;\nhanging-punctuation: first allow-end last;\n\n/* Global values */\nhanging-punctuation: inherit;\nhanging-punctuation: initial;\nhanging-punctuation: revert;\nhanging-punctuation: revert-layer;\nhanging-punctuation: unset;\n", "initial value": "none", "inherit": "yes", "applicable elements": "all elements", "name": "hanging-punctuation"}, "height": {"desc": "The height CSS property specifies the height of an element. By default, the property defines the height of the content area. If box-sizing is set to border-box, however, it instead determines the height of the border area.", "grammar": "/* <length> values */\nheight: 120px;\nheight: 10em;\n\n/* <percentage> value */\nheight: 75%;\n\n/* Keyword values */\nheight: max-content;\nheight: min-content;\nheight: fit-content(20em);\nheight: auto;\n\n/* Global values */\nheight: inherit;\nheight: initial;\nheight: revert;\nheight: revert-layer;\nheight: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements but non-replaced inline elements, table columns, and column groups", "name": "height"}, "hyphenate-character": {"desc": "The hyphenate-character CSS property sets the character (or string) used at the end of a line before a hyphenation break.Both automatic and soft hyphens are displayed according to the specified hyphenate-character value.", "grammar": "hyphenate-character: <string>;\nhyphenate-character: auto;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "hyphenate-character"}, "hyphens": {"desc": "The hyphens CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.", "grammar": "/* Keyword values */\nhyphens: none;\nhyphens: manual;\nhyphens: auto;\n\n/* Global values */\nhyphens: inherit;\nhyphens: initial;\nhyphens: revert;\nhyphens: revert-layer;\nhyphens: unset;\n", "initial value": "manual", "inherit": "yes", "applicable elements": "all elements", "name": "hyphens"}, "image-rendering": {"desc": "The image-rendering CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.", "grammar": "/* Keyword values */\nimage-rendering: auto;\nimage-rendering: crisp-edges;\nimage-rendering: pixelated;\n\n/* Global values */\nimage-rendering: inherit;\nimage-rendering: initial;\nimage-rendering: revert;\nimage-rendering: revert-layer;\nimage-rendering: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "image-rendering"}, "image-resolution": {"desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The image-resolution CSS property specifies the intrinsic resolution of all raster images used in or on the element. It affects content images such as replaced elements and generated content, and decorative images such as background-image images.The image resolution is defined as the number of image pixels per unit length, e.g., pixels per inch. By default, CSS assumes a resolution of one image pixel per CSS px unit; however, the image-resolution property allows a different resolution to be specified.", "grammar": "image-resolution: from-image;\nimage-resolution: 300dpi;\nimage-resolution: from-image 300dpi;\nimage-resolution: 300dpi snap;\n\n/* Global values */\nimage-resolution: inherit;\nimage-resolution: initial;\nimage-resolution: revert;\nimage-resolution: revert-layer;\nimage-resolution: unset;\n", "initial value": "1dppx", "inherit": "yes", "applicable elements": "all elements", "name": "image-resolution"}, "ime-mode": {"desc": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The ime-mode CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete./* Keyword values */ime-mode: auto;ime-mode: normal;ime-mode: active;ime-mode: inactive;ime-mode: disabled; /* Global values */ime-mode: inherit;ime-mode: initial;ime-mode: revert;ime-mode: revert-layer;ime-mode: unset; The ime-mode property is only partially and inconsistently implemented in browsers. It was introduced by Microsoft with Internet Explorer 5 as a proprietary extension. Note: In general, it's not appropriate for a public web site to change the IME mode. This property should only be used for private web applications or to undo the property if it was previously set by legacy code.", "grammar": "/* Keyword values */\nime-mode: auto;\nime-mode: normal;\nime-mode: active;\nime-mode: inactive;\nime-mode: disabled;\n\n/* Global values */\nime-mode: inherit;\nime-mode: initial;\nime-mode: revert;\nime-mode: revert-layer;\nime-mode: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "text fields", "name": "ime-mode"}, "initial-letter": {"desc": "The initial-letter CSS property sets styling for dropped, raised, and sunken initial letters./* Keyword values */initial-letter: normal; /* Numeric values */initial-letter: 1.5; /* Initial letter occupies 1.5 lines */initial-letter: 3.0; /* Initial letter occupies 3 lines */initial-letter: 3.0 2; /* Initial letter occupies 3 lines and sinks 2 lines */ /* Global values */initial-letter: inherit;initial-letter: initial;initial-letter: revert;initial-letter: revert-layer;initial-letter: unset;", "grammar": "/* Keyword values */\ninitial-letter: normal;\n\n/* Numeric values */\ninitial-letter: 1.5;    /* Initial letter occupies 1.5 lines */\ninitial-letter: 3.0;    /* Initial letter occupies 3 lines */\ninitial-letter: 3.0 2;  /* Initial letter occupies 3 lines and\n                           sinks 2 lines */\n\n/* Global values */\ninitial-letter: inherit;\ninitial-letter: initial;\ninitial-letter: revert;\ninitial-letter: revert-layer;\ninitial-letter: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "::first-letter pseudo-elements and inline-level first child of a block container", "name": "initial-letter"}, "initial-letter-align": {"desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The initial-letter-align CSS property specifies the alignment of initial letters within a paragraph./* Keyword values */initial-letter-align: auto;initial-letter-align: alphabetic;initial-letter-align: hanging;initial-letter-align: ideographic; /* Global values */initial-letter-align: inherit;initial-letter-align: initial;initial-letter-align: revert;initial-letter-align: revert-layer;initial-letter-align: unset;", "grammar": "/* Keyword values */\ninitial-letter-align: auto;\ninitial-letter-align: alphabetic;\ninitial-letter-align: hanging;\ninitial-letter-align: ideographic;\n\n/* Global values */\ninitial-letter-align: inherit;\ninitial-letter-align: initial;\ninitial-letter-align: revert;\ninitial-letter-align: revert-layer;\ninitial-letter-align: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "::first-letter pseudo-elements and inline-level first child of a block container", "name": "initial-letter-align"}, "inline-size": {"desc": "The inline-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode.If the writing mode is vertically oriented, the value of inline-size relates to the height of the element; otherwise, it relates to the width of the element. A related property is block-size, which defines the other dimension of the element.", "grammar": "/* <length> values */\ninline-size: 300px;\ninline-size: 25em;\n\n/* <percentage> values */\ninline-size: 75%;\n\n/* Keyword values */\ninline-size: max-content;\ninline-size: min-content;\ninline-size: fit-content(20em);\ninline-size: auto;\n\n/* Global values */\ninline-size: inherit;\ninline-size: initial;\ninline-size: revert;\ninline-size: revert-layer;\ninline-size: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "same as width and height", "name": "inline-size"}, "inset": {"desc": "The inset CSS property is a shorthand that corresponds to the top, right, bottom, and/or left properties. It has the same multi-value syntax of the margin shorthand.", "grammar": "/* <length> values */\ninset: 10px; /* value applied to all edges */\ninset: 4px 8px; /* top/bottom left/right */\ninset: 5px 15px 10px; /* top left/right bottom */\ninset: 2.4em 3em 3em 3em; /* top right bottom left */\n\n/* <percentage>s of the width (left/right) or height (top/bottom) of the containing block */\ninset: 10% 5% 5% 5%;\n\n/* Keyword value */\ninset: auto;\n\n/* Global values */\ninset: inherit;\ninset: initial;\ninset: revert;\ninset: revert-layer;\ninset: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "inset"}, "inset-block": {"desc": "The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <length> values */\ninset-block: 3px 10px;\ninset-block: 2.4em 3em;\ninset-block: 10px; /* value applied to start and end */\n\n/* <percentage>s of the width or height of the containing block */\ninset-block: 10% 5%;\n\n/* Keyword value */\ninset-block: auto;\n\n/* Global values */\ninset-block: inherit;\ninset-block: initial;\ninset-block: revert;\ninset-block: revert-layer;\ninset-block: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "inset-block"}, "inset-block-end": {"desc": "The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <length> values */\ninset-block-end: 3px;\ninset-block-end: 2.4em;\n\n/* <percentage>s of the width or height of the containing block */\ninset-block-end: 10%;\n\n/* Keyword value */\ninset-block-end: auto;\n\n/* Global values */\ninset-block-end: inherit;\ninset-block-end: initial;\ninset-block-end: revert;\ninset-block-end: revert-layer;\ninset-block-end: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "inset-block-end"}, "inset-block-start": {"desc": "The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <length> values */\ninset-block-start: 3px;\ninset-block-start: 2.4em;\n\n/* <percentage>s of the width or height of the containing block */\ninset-block-start: 10%;\n\n/* Keyword value */\ninset-block-start: auto;\n\n/* Global values */\ninset-block-start: inherit;\ninset-block-start: initial;\ninset-block-start: revert;\ninset-block-start: revert-layer;\ninset-block-start: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "inset-block-start"}, "inset-inline": {"desc": "The inset-inline CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <length> values */\ninset-inline: 3px 10px;\ninset-inline: 2.4em 3em;\ninset-inline: 10px; /* value applied to start and end */\n\n/* <percentage>s of the width or height of the containing block */\ninset-inline: 10% 5%;\n\n/* Keyword value */\ninset-inline: auto;\n\n/* Global values */\ninset-inline: inherit;\ninset-inline: initial;\ninset-inline: revert;\ninset-inline: revert-layer;\ninset-inline: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "inset-inline"}, "inset-inline-end": {"desc": "The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <length> values */\ninset-inline-end: 3px;\ninset-inline-end: 2.4em;\n\n/* <percentage>s of the width or height of the containing block */\ninset-inline-end: 10%;\n\n/* Keyword value */\ninset-inline-end: auto;\n\n/* Global values */\ninset-inline-end: inherit;\ninset-inline-end: initial;\ninset-inline-end: revert;\ninset-inline-end: revert-layer;\ninset-inline-end: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "inset-inline-end"}, "inset-inline-start": {"desc": "The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <length> values */\ninset-inline-start: 3px;\ninset-inline-start: 2.4em;\n\n/* <percentage>s of the width or height of the containing block */\ninset-inline-start: 10%;\n\n/* Keyword value */\ninset-inline-start: auto;\n\n/* Global values */\ninset-inline-start: inherit;\ninset-inline-start: initial;\ninset-inline-start: revert;\ninset-inline-start: revert-layer;\ninset-inline-start: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "inset-inline-start"}, "isolation": {"desc": "The isolation CSS property determines whether an element must create a new stacking context.", "grammar": "/* Keyword values */\nisolation: auto;\nisolation: isolate;\n\n/* Global values */\nisolation: inherit;\nisolation: initial;\nisolation: revert;\nisolation: revert-layer;\nisolation: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "All elements. In SVG, it applies to container elements, graphics elements, and graphics referencing elements.", "name": "isolation"}, "justify-content": {"desc": "The CSS justify-content property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.The interactive example below demonstrates some of the values using Grid Layout.", "grammar": "/* Positional alignment */\njustify-content: center;     /* Pack items around the center */\njustify-content: start;      /* Pack items from the start */\njustify-content: end;        /* Pack items from the end */\njustify-content: flex-start; /* Pack flex items from the start */\njustify-content: flex-end;   /* Pack flex items from the end */\njustify-content: left;       /* Pack items from the left */\njustify-content: right;      /* Pack items from the right */\n\n/* Baseline alignment */\n/* justify-content does not take baseline values */\n\n/* Normal alignment */\njustify-content: normal;\n\n/* Distributed alignment */\njustify-content: space-between; /* Distribute items evenly\n                                   The first item is flush with the start,\n                                   the last is flush with the end */\njustify-content: space-around;  /* Distribute items evenly\n                                   Items have a half-size space\n                                   on either end */\njustify-content: space-evenly;  /* Distribute items evenly\n                                   Items have equal space around them */\njustify-content: stretch;       /* Distribute items evenly\n                                   Stretch 'auto'-sized items to fit\n                                   the container */\n\n/* Overflow alignment */\njustify-content: safe center;\njustify-content: unsafe center;\n\n/* Global values */\njustify-content: inherit;\njustify-content: initial;\njustify-content: revert;\njustify-content: revert-layer;\njustify-content: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "flex containers", "name": "justify-content"}, "justify-items": {"desc": "The CSS justify-items property defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis.", "grammar": "/* Basic keywords */\njustify-items: normal;\njustify-items: stretch;\n\n/* Positional alignment */\njustify-items: center;     /* Pack items around the center */\njustify-items: start;      /* Pack items from the start */\njustify-items: end;        /* Pack items from the end */\njustify-items: flex-start; /* Equivalent to 'start'. Note that justify-items is ignored in Flexbox layouts. */\njustify-items: flex-end;   /* Equivalent to 'end'. Note that justify-items is ignored in Flexbox layouts. */\njustify-items: self-start;\njustify-items: self-end;\njustify-items: left;       /* Pack items from the left */\njustify-items: right;      /* Pack items from the right */\n\n/* Baseline alignment */\njustify-items: baseline;\njustify-items: first baseline;\njustify-items: last baseline;\n\n/* Overflow alignment (for positional alignment only) */\njustify-items: safe center;\njustify-items: unsafe center;\n\n/* Legacy alignment */\njustify-items: legacy right;\njustify-items: legacy left;\njustify-items: legacy center;\n\n/* Global values */\njustify-items: inherit;\njustify-items: initial;\njustify-items: revert;\njustify-items: revert-layer;\njustify-items: unset;\n", "initial value": "legacy", "inherit": "no", "applicable elements": "all elements", "name": "justify-items"}, "justify-self": {"desc": "The CSS justify-self property sets the way a box is justified inside its alignment container along the appropriate axis.", "grammar": "/* Basic keywords */\njustify-self: auto;\njustify-self: normal;\njustify-self: stretch;\n\n/* Positional alignment */\njustify-self: center;     /* Pack item around the center */\njustify-self: start;      /* Pack item from the start */\njustify-self: end;        /* Pack item from the end */\njustify-self: flex-start; /* Equivalent to 'start'. Note that justify-self is ignored in Flexbox layouts. */\njustify-self: flex-end;   /* Equivalent to 'end'. Note that justify-self is ignored in Flexbox layouts. */\njustify-self: self-start;\njustify-self: self-end;\njustify-self: left;       /* Pack item from the left */\njustify-self: right;      /* Pack item from the right */\n\n/* Baseline alignment */\njustify-self: baseline;\njustify-self: first baseline;\njustify-self: last baseline;\n\n/* Overflow alignment (for positional alignment only) */\njustify-self: safe center;\njustify-self: unsafe center;\n\n/* Global values */\njustify-self: inherit;\njustify-self: initial;\njustify-self: revert;\njustify-self: revert-layer;\njustify-self: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "block-level boxes, absolutely-positioned boxes, and grid items", "name": "justify-self"}, "left": {"desc": "The left CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.", "grammar": "/* <length> values */\nleft: 3px;\nleft: 2.4em;\n\n/* <percentage>s of the width of the containing block */\nleft: 10%;\n\n/* Keyword value */\nleft: auto;\n\n/* Global values */\nleft: inherit;\nleft: initial;\nleft: revert;\nleft: revert-layer;\nleft: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "left"}, "letter-spacing": {"desc": "The letter-spacing CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of letter-spacing causes characters to spread farther apart, while negative values of letter-spacing bring characters closer together.", "grammar": "/* Keyword value */\nletter-spacing: normal;\n\n/* <length> values */\nletter-spacing: 0.3em;\nletter-spacing: 3px;\nletter-spacing: .3px;\n\n/* Global values */\nletter-spacing: inherit;\nletter-spacing: initial;\nletter-spacing: revert;\nletter-spacing: revert-layer;\nletter-spacing: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "letter-spacing"}, "line-break": {"desc": "The line-break CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.", "grammar": "/* Keyword values */\nline-break: auto;\nline-break: loose;\nline-break: normal;\nline-break: strict;\nline-break: anywhere;\n\n/* Global values */\nline-break: inherit;\nline-break: initial;\nline-break: revert;\nline-break: revert-layer;\nline-break: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "line-break"}, "line-height": {"desc": "The line-height CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.", "grammar": "/* Keyword value */\nline-height: normal;\n\n/* Unitless values: use this number multiplied\nby the element's font size */\nline-height: 3.5;\n\n/* <length> values */\nline-height: 3em;\n\n/* <percentage> values */\nline-height: 34%;\n\n/* Global values */\nline-height: inherit;\nline-height: initial;\nline-height: revert;\nline-height: revert-layer;\nline-height: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "line-height"}, "line-height-step": {"desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The line-height-step CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit./* Point values */line-height-step: 18pt; /* Global values */line-height-step: inherit;line-height-step: initial;line-height-step: revert;line-height-step: revert-layer;line-height-step: unset;", "grammar": "/* Point values */\nline-height-step: 18pt;\n\n/* Global values */\nline-height-step: inherit;\nline-height-step: initial;\nline-height-step: revert;\nline-height-step: revert-layer;\nline-height-step: unset;\n", "initial value": "0", "inherit": "yes", "applicable elements": "block containers", "name": "line-height-step"}, "list-style": {"desc": "The list-style CSS shorthand property allows you to set all the list style properties at once.", "grammar": "/* type */\nlist-style: square;\n\n/* image */\nlist-style: url('../img/shape.png');\n\n/* position */\nlist-style: inside;\n\n/* type | position */\nlist-style: georgian inside;\n\n/* type | image | position */\nlist-style: lower-roman url('../img/shape.png') outside;\n\n/* Keyword value */\nlist-style: none;\n\n/* Global values */\nlist-style: inherit;\nlist-style: initial;\nlist-style: revert;\nlist-style: revert-layer;\nlist-style: unset;\n", "initial value": "as each of the properties of the shorthand:list-style-type: disclist-style-position: outsidelist-style-image: none", "inherit": "yes", "applicable elements": "list items", "name": "list-style"}, "list-style-image": {"desc": "The list-style-image CSS property sets an image to be used as the list item marker.It is often more convenient to use the shorthand list-style.", "grammar": "/* Keyword values */\nlist-style-image: none;\n\n/* <url> values */\nlist-style-image: url('starsolid.gif');\n\n/* valid image values */\nlist-style-image: linear-gradient(to left bottom, red, blue);\n\n/* Global values */\nlist-style-image: inherit;\nlist-style-image: initial;\nlist-style-image: revert;\nlist-style-image: revert-layer;\nlist-style-image: unset;\n", "initial value": "none", "inherit": "yes", "applicable elements": "list items", "name": "list-style-image"}, "list-style-position": {"desc": "The list-style-position CSS property sets the position of the ::marker relative to a list item.", "grammar": "/* Keyword values */\nlist-style-position: inside;\nlist-style-position: outside;\n\n/* Global values */\nlist-style-position: inherit;\nlist-style-position: initial;\nlist-style-position: revert;\nlist-style-position: revert-layer;\nlist-style-position: unset;\n", "initial value": "outside", "inherit": "yes", "applicable elements": "list items", "name": "list-style-position"}, "list-style-type": {"desc": "The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.", "grammar": "/* Partial list of types */\nlist-style-type: disc;\nlist-style-type: circle;\nlist-style-type: square;\nlist-style-type: decimal;\nlist-style-type: georgian;\nlist-style-type: trad-chinese-informal;\nlist-style-type: kannada;\n\n/* <string> value */\nlist-style-type: '-';\n\n/* Identifier matching an @counter-style rule */\nlist-style-type: custom-counter-style;\n\n/* Keyword value */\nlist-style-type: none;\n\n/* Global values */\nlist-style-type: inherit;\nlist-style-type: initial;\nlist-style-type: revert;\nlist-style-type: revert-layer;\nlist-style-type: unset;\n", "initial value": "disc", "inherit": "yes", "applicable elements": "list items", "name": "list-style-type"}, "margin": {"desc": "The margin CSS shorthand property sets the margin area on all four sides of an element.", "grammar": "/* Apply to all four sides */\nmargin: 1em;\nmargin: -3px;\n\n/* vertical | horizontal */\nmargin: 5% auto;\n\n/* top | horizontal | bottom */\nmargin: 1em auto 2em;\n\n/* top | right | bottom | left */\nmargin: 2px 1em 0 auto;\n\n/* Global values */\nmargin: inherit;\nmargin: initial;\nmargin: revert;\nmargin: revert-layer;\nmargin: unset;\n", "initial value": "as each of the properties of the shorthand:margin-bottom: 0margin-left: 0margin-right: 0margin-top: 0", "inherit": "no", "applicable elements": "all elements, except elements with table display types other than table-caption, table and inline-table. It also applies to ::first-letter and ::first-line.", "name": "margin"}, "margin-block": {"desc": "The margin-block CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.", "grammar": "/* <length> values */\nmargin-block: 10px 20px;  /* An absolute length */\nmargin-block: 1em 2em;    /* relative to the text size */\nmargin-block: 5% 2%;      /* relative to the nearest block container's width */\nmargin-block: 10px;       /* sets both start and end values */\n\n/* Keyword values */\nmargin-block: auto;\n\n/* Global values */\nmargin-block: inherit;\nmargin-block: initial;\nmargin-block: revert;\nmargin-block: revert-layer;\nmargin-block: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as margin", "name": "margin-block"}, "margin-block-end": {"desc": "The margin-block-end CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.", "grammar": "/* <length> values */\nmargin-block-end: 10px;  /* An absolute length */\nmargin-block-end: 1em;   /* relative to the text size */\nmargin-block-end: 5%;    /* relative to the nearest block container's width */\n\n/* Keyword values */\nmargin-block-end: auto;\n\n/* Global values */\nmargin-block-end: inherit;\nmargin-block-end: initial;\nmargin-block-end: revert;\nmargin-block-end: revert-layer;\nmargin-block-end: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as margin", "name": "margin-block-end"}, "margin-block-start": {"desc": "The margin-block-start CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.", "grammar": "/* <length> values */\nmargin-block-start: 10px;  /* An absolute length */\nmargin-block-start: 1em;   /* relative to the text size */\nmargin-block-start: 5%;    /* relative to the nearest block container's width */\n\n/* Keyword values */\nmargin-block-start: auto;\n\n/* Global values */\nmargin-block-start: inherit;\nmargin-block-start: initial;\nmargin-block-start: revert;\nmargin-block-start: revert-layer;\nmargin-block-start: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as margin", "name": "margin-block-start"}, "margin-bottom": {"desc": "The margin-bottom CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.", "grammar": "/* <length> values */\nmargin-bottom: 10px;  /* An absolute length */\nmargin-bottom: 1em;   /* relative to the text size */\nmargin-bottom: 5%;    /* relative to the nearest block container's width */\n\n/* Keyword values */\nmargin-bottom: auto;\n\n/* Global values */\nmargin-bottom: inherit;\nmargin-bottom: initial;\nmargin-bottom: revert;\nmargin-bottom: revert-layer;\nmargin-bottom: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except elements with table display types other than table-caption, table and inline-table. It also applies to ::first-letter and ::first-line.", "name": "margin-bottom"}, "margin-inline": {"desc": "The margin-inline CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.", "grammar": "/* <length> values */\nmargin-inline: 10px 20px;  /* An absolute length */\nmargin-inline: 1em 2em;    /* relative to the text size */\nmargin-inline: 5% 2%;      /* relative to the nearest block container's width */\nmargin-inline: 10px;       /* sets both start and end values */\n\n/* Keyword values */\nmargin-inline: auto;\n\n/* Global values */\nmargin-inline: inherit;\nmargin-inline: initial;\nmargin-inline: revert;\nmargin-inline: revert-layer;\nmargin-inline: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as margin", "name": "margin-inline"}, "margin-inline-end": {"desc": "The margin-inline-end CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the margin-top, margin-right, margin-bottom or margin-left property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <length> values */\nmargin-inline-end: 10px;   /* An absolute length */\nmargin-inline-end: 1em;    /* relative to the text size */\nmargin-inline-end: 5%;     /* relative to the nearest block container's width */\n\n/* Keyword values */\nmargin-inline-end: auto;\n\n/* Global values */\nmargin-inline-end: inherit;\nmargin-inline-end: initial;\nmargin-inline-end: revert;\nmargin-inline-end: revert-layer;\nmargin-inline-end: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as margin", "name": "margin-inline-end"}, "margin-inline-start": {"desc": "The margin-inline-start CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the margin-top, margin-right, margin-bottom, or margin-left property depending on the values defined for writing-mode, direction, and text-orientation.", "grammar": "/* <length> values */\nmargin-inline-start: 10px;  /* An absolute length */\nmargin-inline-start: 1em;   /* relative to the text size */\nmargin-inline-start: 5%;    /* relative to the nearest block container's width */\n\n/* Keyword values */\nmargin-inline-start: auto;\n\n/* Global values */\nmargin-inline-start: inherit;\nmargin-inline-start: initial;\nmargin-inline-start: revert;\nmargin-inline-start: revert-layer;\nmargin-inline-start: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as margin", "name": "margin-inline-start"}, "margin-left": {"desc": "The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.", "grammar": "/* <length> values */\nmargin-left: 10px;  /* An absolute length */\nmargin-left: 1em;   /* relative to the text size */\nmargin-left: 5%;    /* relative to the nearest block container's width */\n\n/* Keyword values */\nmargin-left: auto;\n\n/* Global values */\nmargin-left: inherit;\nmargin-left: initial;\nmargin-left: revert;\nmargin-left: revert-layer;\nmargin-left: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except elements with table display types other than table-caption, table and inline-table. It also applies to ::first-letter and ::first-line.", "name": "margin-left"}, "margin-right": {"desc": "The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.", "grammar": "/* <length> values */\nmargin-right: 20px;  /* An absolute length */\nmargin-right: 1em;   /* relative to the text size */\nmargin-right: 5%;    /* relative to the nearest block container's width */\n\n/* Keyword values */\nmargin-right: auto;\n\n/* Global values */\nmargin-right: inherit;\nmargin-right: initial;\nmargin-right: revert;\nmargin-right: revert-layer;\nmargin-right: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except elements with table display types other than table-caption, table and inline-table. It also applies to ::first-letter and ::first-line.", "name": "margin-right"}, "margin-top": {"desc": "The margin-top CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.", "grammar": "/* <length> values */\nmargin-top: 10px;  /* An absolute length */\nmargin-top: 1em;   /* relative to the text size */\nmargin-top: 5%;    /* relative to the nearest block container's width */\n\n/* Keyword values */\nmargin-top: auto;\n\n/* Global values */\nmargin-top: inherit;\nmargin-top: initial;\nmargin-top: revert;\nmargin-top: revert-layer;\nmargin-top: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except elements with table display types other than table-caption, table and inline-table. It also applies to ::first-letter and ::first-line.", "name": "margin-top"}, "margin-trim": {"desc": "The margin-trim property allows the container to trim the margins of its children where they adjoin the container's edges.", "grammar": "margin-trim: none;\nmargin-trim: in-flow;\nmargin-trim: all;\n\n/* Global values */\nmargin-trim: inherit;\nmargin-trim: initial;\nmargin-trim: revert;\nmargin-trim: revert-layer;\nmargin-trim: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "Block containers and multi-column containers. It also applies to ::first-letter and ::first-line.", "name": "margin-trim"}, "mask": {"desc": "The mask CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points. Note: As well as the properties listed below, the mask shorthand also resets mask-border to its initial value. It is therefore recommended to use the mask shorthand rather than other shorthands or the individual properties to override any mask settings earlier in the cascade. This will ensure that mask-border has also been reset to allow the new styles to take effect.", "grammar": "/* Keyword values */\nmask: none;\n\n/* Image values */\nmask: url(mask.png);                       /* Pixel image used as mask */\nmask: url(masks.svg#star);                 /* Element within SVG graphic used as mask */\n\n/* Combined values */\nmask: url(masks.svg#star) luminance;       /* Element within SVG graphic used as luminance mask */\nmask: url(masks.svg#star) 40px 20px;       /* Element within SVG graphic used as mask positioned 40px from the top and 20px from the left */\nmask: url(masks.svg#star) 0 0/50px 50px;   /* Element within SVG graphic used as mask with a width and height of 50px */\nmask: url(masks.svg#star) repeat-x;        /* Element within SVG graphic used as horizontally repeated mask */\nmask: url(masks.svg#star) stroke-box;      /* Element within SVG graphic used as mask extending to the box enclosed by the stroke */\nmask: url(masks.svg#star) exclude;         /* Element within SVG graphic used as mask and combined with background using non-overlapping parts */\n\n/* Global values */\nmask: inherit;\nmask: initial;\nmask: revert;\nmask: revert-layer;\nmask: unset;\n\n/* Multiple masks */\nmask: url(masks.svg#star) left / 16px repeat-y,    /* Element within SVG graphic is used as a mask on the left-hand side with a width of 16px */\n      url(masks.svg#circle) right / 16px repeat-y; /* Element within SVG graphic is used as a mask on the right-hand side with a width of 16px */\n", "initial value": "as each of the properties of the shorthand:mask-image: nonemask-mode: match-sourcemask-repeat: no-repeatmask-position: centermask-clip: border-boxmask-origin: border-boxmask-size: automask-composite: add", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask"}, "mask-border": {"desc": "The mask-border CSS shorthand property lets you create a mask along the edge of an element's border.", "grammar": "/* source | slice */\nmask-border: url('border-mask.png') 25;\n\n/* source | slice | repeat */\nmask-border: url('border-mask.png') 25 space;\n\n/* source | slice | width */\nmask-border: url('border-mask.png') 25 / 35px;\n\n/* source | slice | width | outset | repeat | mode */\nmask-border: url('border-mask.png') 25 / 35px / 12px space alpha;\n\n/* Global values */\nmask-border: inherit;\nmask-border: initial;\nmask-border: revert;\nmask-border: revert-layer;\nmask-border: unset;\n", "initial value": "as each of the properties of the shorthand:mask-border-mode: alphamask-border-outset: 0mask-border-repeat: stretchmask-border-slice: 0mask-border-source: nonemask-border-width: auto", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-border"}, "mask-border-mode": {"desc": "The mask-border-mode CSS property specifies the blending mode used in a mask border.", "grammar": "/* Keyword values */\nmask-border-mode: luminance;\nmask-border-mode: alpha;\n\n/* Global values */\nmask-border-mode: inherit;\nmask-border-mode: initial;\nmask-border-mode: revert;\nmask-border-mode: revert-layer;\nmask-border-mode: unset;\n", "initial value": "alpha", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-border-mode"}, "mask-border-outset": {"desc": "The mask-border-outset CSS property specifies the distance by which an element's mask border is set out from its border box.", "grammar": "/* <length> value */\nmask-border-outset: 1rem;\n\n/* <number> value */\nmask-border-outset: 1.5;\n\n/* vertical | horizontal */\nmask-border-outset: 1 1.2;\n\n/* top | horizontal | bottom */\nmask-border-outset: 30px 2 45px;\n\n/* top | right | bottom | left */\nmask-border-outset: 7px 12px 14px 5px;\n\n/* Global values */\nmask-border-outset: inherit;\nmask-border-outset: initial;\nmask-border-outset: revert;\nmask-border-outset: revert-layer;\nmask-border-outset: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-border-outset"}, "mask-border-repeat": {"desc": "The mask-border-repeat CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.", "grammar": "/* Keyword value */\nmask-border-repeat: stretch;\nmask-border-repeat: repeat;\nmask-border-repeat: round;\nmask-border-repeat: space;\n\n/* vertical | horizontal */\nmask-border-repeat: round stretch;\n\n/* Global values */\nmask-border-repeat: inherit;\nmask-border-repeat: initial;\nmask-border-repeat: revert;\nmask-border-repeat: revert-layer;\nmask-border-repeat: unset;\n", "initial value": "stretch", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-border-repeat"}, "mask-border-slice": {"desc": "The mask-border-slice CSS property divides the image set by mask-border-source into regions. These regions are used to form the components of an element's mask border.", "grammar": "/* All sides */\nmask-border-slice: 30%;\n\n/* vertical | horizontal */\nmask-border-slice: 10% 30%;\n\n/* top | horizontal | bottom */\nmask-border-slice: 30 30% 45;\n\n/* top | right | bottom | left */\nmask-border-slice: 7 12 14 5;\n\n/* Using the `fill` keyword */\nmask-border-slice: 10% fill 7 12;\n\n/* Global values */\nmask-border-slice: inherit;\nmask-border-slice: initial;\nmask-border-slice: revert;\nmask-border-slice: revert-layer;\nmask-border-slice: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-border-slice"}, "mask-border-source": {"desc": "The mask-border-source CSS property sets the source image used to create an element's mask border.The mask-border-slice property is used to divide the source image into regions, which are then dynamically applied to the final mask border.", "grammar": "/* Keyword value */\nmask-border-source: none;\n\n/* <image> values */\nmask-border-source: url(image.jpg);\nmask-border-source: linear-gradient(to top, red, yellow);\n\n/* Global values */\nmask-border-source: inherit;\nmask-border-source: initial;\nmask-border-source: revert;\nmask-border-source: revert-layer;\nmask-border-source: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-border-source"}, "mask-border-width": {"desc": "The mask-border-width CSS property sets the width of an element's mask border.", "grammar": "/* Keyword value */\nmask-border-width: auto;\n\n/* <length> value */\nmask-border-width: 1rem;\n\n/* <percentage> value */\nmask-border-width: 25%;\n\n/* <number> value */\nmask-border-width: 3;\n\n/* vertical | horizontal */\nmask-border-width: 2em 3em;\n\n/* top | horizontal | bottom */\nmask-border-width: 5% 15% 10%;\n\n/* top | right | bottom | left */\nmask-border-width: 5% 2em 10% auto;\n\n/* Global values */\nmask-border-width: inherit;\nmask-border-width: initial;\nmask-border-width: revert;\nmask-border-width: revert-layer;\nmask-border-width: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-border-width"}, "mask-clip": {"desc": "The mask-clip CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area./* <geometry-box> values */mask-clip: content-box;mask-clip: padding-box;mask-clip: border-box;mask-clip: margin-box;mask-clip: fill-box;mask-clip: stroke-box;mask-clip: view-box; /* Keyword values */mask-clip: no-clip; /* Non-standard keyword values */-webkit-mask-clip: border;-webkit-mask-clip: padding;-webkit-mask-clip: content;-webkit-mask-clip: text; /* Multiple values */mask-clip: padding-box, no-clip;mask-clip: view-box, fill-box, border-box; /* Global values */mask-clip: inherit;mask-clip: initial;mask-clip: revert;mask-clip: revert-layer;mask-clip: unset;", "grammar": "/* <geometry-box> values */\nmask-clip: content-box;\nmask-clip: padding-box;\nmask-clip: border-box;\nmask-clip: margin-box;\nmask-clip: fill-box;\nmask-clip: stroke-box;\nmask-clip: view-box;\n\n/* Keyword values */\nmask-clip: no-clip;\n\n/* Non-standard keyword values */\n-webkit-mask-clip: border;\n-webkit-mask-clip: padding;\n-webkit-mask-clip: content;\n-webkit-mask-clip: text;\n\n/* Multiple values */\nmask-clip: padding-box, no-clip;\nmask-clip: view-box, fill-box, border-box;\n\n/* Global values */\nmask-clip: inherit;\nmask-clip: initial;\nmask-clip: revert;\nmask-clip: revert-layer;\nmask-clip: unset;\n", "initial value": "border-box", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-clip"}, "mask-composite": {"desc": "The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it./* Keyword values */mask-composite: add;mask-composite: subtract;mask-composite: intersect;mask-composite: exclude; /* Global values */mask-composite: inherit;mask-composite: initial;mask-composite: revert;mask-composite: revert-layer;mask-composite: unset;", "grammar": "/* Keyword values */\nmask-composite: add;\nmask-composite: subtract;\nmask-composite: intersect;\nmask-composite: exclude;\n\n/* Global values */\nmask-composite: inherit;\nmask-composite: initial;\nmask-composite: revert;\nmask-composite: revert-layer;\nmask-composite: unset;\n", "initial value": "add", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-composite"}, "mask-image": {"desc": "The mask-image CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the mask-mode property. /* Keyword value */mask-image: none; /* <mask-source> value */mask-image: url(masks.svg#mask1); /* <image> values */mask-image: linear-gradient(rgba(0, 0, 0, 1.0), transparent);mask-image: image(url(mask.png), skyblue); /* Multiple values */mask-image: image(url(mask.png), skyblue), linear-gradient(rgba(0, 0, 0, 1.0), transparent); /* Global values */mask-image: inherit;mask-image: initial;mask-image: revert;mask-image: revert-layer;mask-image: unset;", "grammar": "/* Keyword value */\nmask-image: none;\n\n/* <mask-source> value */\nmask-image: url(masks.svg#mask1);\n\n/* <image> values */\nmask-image: linear-gradient(rgba(0, 0, 0, 1.0), transparent);\nmask-image: image(url(mask.png), skyblue);\n\n/* Multiple values */\nmask-image: image(url(mask.png), skyblue), linear-gradient(rgba(0, 0, 0, 1.0), transparent);\n\n/* Global values */\nmask-image: inherit;\nmask-image: initial;\nmask-image: revert;\nmask-image: revert-layer;\nmask-image: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-image"}, "mask-mode": {"desc": "The mask-mode CSS property sets whether the mask reference defined by mask-image is treated as a luminance or alpha mask./* Keyword values */mask-mode: alpha;mask-mode: luminance;mask-mode: match-source; /* Multiple values */mask-mode: alpha, match-source; /* Global values */mask-mode: inherit;mask-mode: initial;mask-mode: revert;mask-mode: revert-layer;mask-mode: unset;", "grammar": "/* Keyword values */\nmask-mode: alpha;\nmask-mode: luminance;\nmask-mode: match-source;\n\n/* Multiple values */\nmask-mode: alpha, match-source;\n\n/* Global values */\nmask-mode: inherit;\nmask-mode: initial;\nmask-mode: revert;\nmask-mode: revert-layer;\nmask-mode: unset;\n", "initial value": "match-source", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-mode"}, "mask-origin": {"desc": "The mask-origin CSS property sets the origin of a mask./* Keyword values */mask-origin: content-box;mask-origin: padding-box;mask-origin: border-box;mask-origin: margin-box;mask-origin: fill-box;mask-origin: stroke-box;mask-origin: view-box; /* Multiple values */mask-origin: padding-box, content-box;mask-origin: view-box, fill-box, border-box; /* Non-standard keyword values */-webkit-mask-origin: content;-webkit-mask-origin: padding;-webkit-mask-origin: border; /* Global values */mask-origin: inherit;mask-origin: initial;mask-origin: revert;mask-origin: revert-layer;mask-origin: unset; For elements rendered as a single box, this property specifies the mask positioning area. In other words, this property specifies the origin position of an image specified by the mask-image CSS property. For elements rendered as multiple boxes, such as inline boxes on several lines or boxes on several pages, it specifies which boxes box-decoration-break operates upon to determine the mask positioning area.", "grammar": "/* Keyword values */\nmask-origin: content-box;\nmask-origin: padding-box;\nmask-origin: border-box;\nmask-origin: margin-box;\nmask-origin: fill-box;\nmask-origin: stroke-box;\nmask-origin: view-box;\n\n/* Multiple values */\nmask-origin: padding-box, content-box;\nmask-origin: view-box, fill-box, border-box;\n\n/* Non-standard keyword values */\n-webkit-mask-origin: content;\n-webkit-mask-origin: padding;\n-webkit-mask-origin: border;\n\n/* Global values */\nmask-origin: inherit;\nmask-origin: initial;\nmask-origin: revert;\nmask-origin: revert-layer;\nmask-origin: unset;\n", "initial value": "border-box", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-origin"}, "mask-position": {"desc": "The mask-position CSS property sets the initial position, relative to the mask position layer set by mask-origin, for each defined mask image./* Keyword values */mask-position: top;mask-position: bottom;mask-position: left;mask-position: right;mask-position: center; /* <position> values */mask-position: 25% 75%;mask-position: 0px 0px;mask-position: 10% 8em; /* Multiple values */mask-position: top right;mask-position: 1rem 1rem, center; /* Global values */mask-position: inherit;mask-position: initial;mask-position: revert;mask-position: revert-layer;mask-position: unset;", "grammar": "/* Keyword values */\nmask-position: top;\nmask-position: bottom;\nmask-position: left;\nmask-position: right;\nmask-position: center;\n\n/* <position> values */\nmask-position: 25% 75%;\nmask-position: 0px 0px;\nmask-position: 10% 8em;\n\n/* Multiple values */\nmask-position: top right;\nmask-position: 1rem 1rem, center;\n\n/* Global values */\nmask-position: inherit;\nmask-position: initial;\nmask-position: revert;\nmask-position: revert-layer;\nmask-position: unset;\n", "initial value": "center", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-position"}, "mask-repeat": {"desc": "The mask-repeat CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all./* One-value syntax */mask-repeat: repeat-x;mask-repeat: repeat-y;mask-repeat: repeat;mask-repeat: space;mask-repeat: round;mask-repeat: no-repeat; /* Two-value syntax: horizontal | vertical */mask-repeat: repeat space;mask-repeat: repeat repeat;mask-repeat: round space;mask-repeat: no-repeat round; /* Multiple values */mask-repeat: space round, no-repeat;mask-repeat: round repeat, space, repeat-x; /* Global values */mask-repeat: inherit;mask-repeat: initial;mask-repeat: revert;mask-repeat: revert-layer;mask-repeat: unset; By default, the repeated images are clipped to the size of the element, but they can be scaled to fit (using round) or evenly distributed from end to end (using space).", "grammar": "/* One-value syntax */\nmask-repeat: repeat-x;\nmask-repeat: repeat-y;\nmask-repeat: repeat;\nmask-repeat: space;\nmask-repeat: round;\nmask-repeat: no-repeat;\n\n/* Two-value syntax: horizontal | vertical */\nmask-repeat: repeat space;\nmask-repeat: repeat repeat;\nmask-repeat: round space;\nmask-repeat: no-repeat round;\n\n/* Multiple values */\nmask-repeat: space round, no-repeat;\nmask-repeat: round repeat, space, repeat-x;\n\n/* Global values */\nmask-repeat: inherit;\nmask-repeat: initial;\nmask-repeat: revert;\nmask-repeat: revert-layer;\nmask-repeat: unset;\n", "initial value": "no-repeat", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-repeat"}, "mask-size": {"desc": "The mask-size CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio./* Keywords syntax */mask-size: cover;mask-size: contain; /* One-value syntax *//* the width of the image (height set to 'auto') */mask-size: 50%;mask-size: 3em;mask-size: 12px;mask-size: auto; /* Two-value syntax *//* first value: width of the image, second value: height */mask-size: 50% auto;mask-size: 3em 25%;mask-size: auto 6px;mask-size: auto auto; /* Multiple values *//* Do not confuse this with mask-size: auto auto */mask-size: auto, auto;mask-size: 50%, 25%, 25%;mask-size: 6px, auto, contain; /* Global values */mask-size: inherit;mask-size: initial;mask-size: revert;mask-size: revert-layer;mask-size: unset; Note: If the value of this property is not set in a mask shorthand property that is applied to the element after the mask-size CSS property, the value of this property is then reset to its initial value by the shorthand property.", "grammar": "/* Keywords syntax */\nmask-size: cover;\nmask-size: contain;\n\n/* One-value syntax */\n/* the width of the image (height set to 'auto') */\nmask-size: 50%;\nmask-size: 3em;\nmask-size: 12px;\nmask-size: auto;\n\n/* Two-value syntax */\n/* first value: width of the image, second value: height */\nmask-size: 50% auto;\nmask-size: 3em 25%;\nmask-size: auto 6px;\nmask-size: auto auto;\n\n/* Multiple values */\n/* Do not confuse this with mask-size: auto auto */\nmask-size: auto, auto;\nmask-size: 50%, 25%, 25%;\nmask-size: 6px, auto, contain;\n\n/* Global values */\nmask-size: inherit;\nmask-size: initial;\nmask-size: revert;\nmask-size: revert-layer;\nmask-size: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements; In SVG, it applies to container elements excluding the defs element and all graphics elements", "name": "mask-size"}, "mask-type": {"desc": "The mask-type CSS property sets whether an SVG <mask> element is used as a luminance or an alpha mask. It applies to the <mask> element itself./* Keyword values */mask-type: luminance;mask-type: alpha; /* Global values */mask-type: inherit;mask-type: initial;mask-type: revert;mask-type: revert-layer;mask-type: unset; This property may be overridden by the mask-mode property, which has the same effect but applies to the element where the mask is used. Alpha masks will generally be faster to render.", "grammar": "/* Keyword values */\nmask-type: luminance;\nmask-type: alpha;\n\n/* Global values */\nmask-type: inherit;\nmask-type: initial;\nmask-type: revert;\nmask-type: revert-layer;\nmask-type: unset;\n", "initial value": "luminance", "inherit": "no", "applicable elements": "<mask> elements", "name": "mask-type"}, "max-block-size": {"desc": "The max-block-size CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by writing-mode. That is, if the writing direction is horizontal, then max-block-size is equivalent to max-height; if the writing direction is vertical, max-block-size is the same as max-width.The other dimension's maximum length is specified using the max-inline-size property.This is useful because the max-width is always used for horizontal sizes and max-height is always used for vertical sizes, and if you need to set lengths based on the size of your text content, you need to be able to do so with the writing direction in mind.Any time you would normally use max-height or max-width, you should instead use max-block-size to set the maximum \"height\" of the content (even though this may not be a vertical value) and max-inline-size to set the maximum \"width\" of the content (although this may instead be vertical rather than horizontal). See the Example in writing-mode, which shows the different writing modes in action.", "grammar": "/* <length> values */\nmax-block-size: 300px;\nmax-block-size: 25em;\n\n/* <percentage> values */\nmax-block-size: 75%;\n\n/* Keyword values */\nmax-block-size: none;\nmax-block-size: max-content;\nmax-block-size: min-content;\nmax-block-size: fit-content(20em);\n\n/* Global values */\nmax-block-size: inherit;\nmax-block-size: initial;\nmax-block-size: revert;\nmax-block-size: revert-layer;\nmax-block-size: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as width and height", "name": "max-block-size"}, "max-height": {"desc": "The max-height CSS property sets the maximum height of an element. It prevents the used value of the height property from becoming larger than the value specified for max-height.", "grammar": "/* <length> value */\nmax-height: 3.5em;\n\n/* <percentage> value */\nmax-height: 75%;\n\n/* Keyword values */\nmax-height: none;\nmax-height: max-content;\nmax-height: min-content;\nmax-height: fit-content(20em);\n\n/* Global values */\nmax-height: inherit;\nmax-height: initial;\nmax-height: revert;\nmax-height: revert-layer;\nmax-height: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements but non-replaced inline elements, table columns, and column groups", "name": "max-height"}, "max-inline-size": {"desc": "The max-inline-size CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the max-width or the max-height property, depending on the value of writing-mode.If the writing mode is vertically oriented, the value of max-inline-size relates to the maximal height of the element; otherwise, it relates to the maximal width of the element. A related property is max-block-size, which defines the other dimension of the element.", "grammar": "/* <length> values */\nmax-inline-size: 300px;\nmax-inline-size: 25em;\n\n/* <percentage> values */\nmax-inline-size: 75%;\n\n/* Keyword values */\nmax-inline-size: none;\nmax-inline-size: max-content;\nmax-inline-size: min-content;\nmax-inline-size: fit-content(20em);\n\n/* Global values */\nmax-inline-size: inherit;\nmax-inline-size: initial;\nmax-inline-size: revert;\nmax-inline-size: revert-layer;\nmax-inline-size: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as width and height", "name": "max-inline-size"}, "max-width": {"desc": "The max-width CSS property sets the maximum width of an element. It prevents the used value of the width property from becoming larger than the value specified by max-width.", "grammar": "/* <length> value */\nmax-width: 3.5em;\n\n/* <percentage> value */\nmax-width: 75%;\n\n/* Keyword values */\nmax-width: none;\nmax-width: max-content;\nmax-width: min-content;\nmax-width: fit-content(20em);\n\n/* Global values */\nmax-width: inherit;\nmax-width: initial;\nmax-width: revert;\nmax-width: revert-layer;\nmax-width: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements but non-replaced inline elements, table rows, and row groups", "name": "max-width"}, "min-block-size": {"desc": "The min-block-size CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode.If the writing mode is vertically oriented, the value of min-block-size relates to the minimum width of the element; otherwise, it relates to the minimum height of the element. A related property is min-inline-size, which defines the other dimension of the element.", "grammar": "/* <length> values */\nmin-block-size: 100px;\nmin-block-size: 5em;\n\n/* <percentage> values */\nmin-block-size: 10%;\n\n/* Keyword values */\nmin-block-size: max-content;\nmin-block-size: min-content;\nmin-block-size: fit-content(20em);\n\n/* Global values */\nmin-block-size: inherit;\nmin-block-size: initial;\nmin-block-size: revert;\nmin-block-size: revert-layer;\nmin-block-size: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as width and height", "name": "min-block-size"}, "min-height": {"desc": "The min-height CSS property sets the minimum height of an element. It prevents the used value of the height property from becoming smaller than the value specified for min-height.", "grammar": "/* <length> value */\nmin-height: 3.5em;\n\n/* <percentage> value */\nmin-height: 10%;\n\n/* Keyword values */\nmin-height: max-content;\nmin-height: min-content;\nmin-height: fit-content(20em);\n\n/* Global values */\nmin-height: inherit;\nmin-height: initial;\nmin-height: revert;\nmin-height: revert-layer;\nmin-height: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements but non-replaced inline elements, table columns, and column groups", "name": "min-height"}, "min-inline-size": {"desc": "The min-inline-size CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode.", "grammar": "/* <length> values */\nmin-inline-size: 100px;\nmin-inline-size: 5em;\n\n/* <percentage> values */\nmin-inline-size: 10%;\n\n/* Keyword values */\nmin-inline-size: max-content;\nmin-inline-size: min-content;\nmin-inline-size: fit-content(20em);\n\n/* Global values */\nmin-inline-size: inherit;\nmin-inline-size: initial;\nmin-inline-size: revert;\nmin-inline-size: revert-layer;\nmin-inline-size: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "same as width and height", "name": "min-inline-size"}, "min-width": {"desc": "The min-width CSS property sets the minimum width of an element. It prevents the used value of the width property from becoming smaller than the value specified for min-width.", "grammar": "/* <length> value */\nmin-width: 3.5em;\n\n/* <percentage> value */\nmin-width: 10%;\n\n/* Keyword values */\nmin-width: max-content;\nmin-width: min-content;\nmin-width: fit-content(20em);\n\n/* Global values */\nmin-width: inherit;\nmin-width: initial;\nmin-width: revert;\nmin-width: revert-layer;\nmin-width: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements but non-replaced inline elements, table rows, and row groups", "name": "min-width"}, "mix-blend-mode": {"desc": "The mix-blend-mode CSS property sets how an element's content should blend with the content of the element's parent and the element's background.", "grammar": "/* Keyword values */\nmix-blend-mode: normal;\nmix-blend-mode: multiply;\nmix-blend-mode: screen;\nmix-blend-mode: overlay;\nmix-blend-mode: darken;\nmix-blend-mode: lighten;\nmix-blend-mode: color-dodge;\nmix-blend-mode: color-burn;\nmix-blend-mode: hard-light;\nmix-blend-mode: soft-light;\nmix-blend-mode: difference;\nmix-blend-mode: exclusion;\nmix-blend-mode: hue;\nmix-blend-mode: saturation;\nmix-blend-mode: color;\nmix-blend-mode: luminosity;\n\n/* Global values */\nmix-blend-mode: inherit;\nmix-blend-mode: initial;\nmix-blend-mode: revert;\nmix-blend-mode: revert-layer;\nmix-blend-mode: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "all elements", "name": "mix-blend-mode"}, "object-fit": {"desc": "The object-fit CSS property sets how the content of a replaced element, such as an <img> or <video>, should be resized to fit its container.You can alter the alignment of the replaced element's content object within the element's box using the object-position property.", "grammar": "object-fit: contain;\nobject-fit: cover;\nobject-fit: fill;\nobject-fit: none;\nobject-fit: scale-down;\n\n/* Global values */\nobject-fit: inherit;\nobject-fit: initial;\nobject-fit: revert;\nobject-fit: revert-layer;\nobject-fit: unset;\n", "initial value": "fill", "inherit": "no", "applicable elements": "replaced elements", "name": "object-fit"}, "object-position": {"desc": "The object-position CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.You can adjust how the replaced element's object's intrinsic size (that is, its natural size) is adjusted to fit within the element's box using the object-fit property.", "grammar": "/* Keyword values */\nobject-position: top;\nobject-position: bottom;\nobject-position: left;\nobject-position: right;\nobject-position: center;\n\n/* <percentage> values */\nobject-position: 25% 75%;\n\n/* <length> values */\nobject-position: 0 0;\nobject-position: 1cm 2cm;\nobject-position: 10ch 8em;\n\n/* Edge offsets values */\nobject-position: bottom 10px right 20px;\nobject-position: right 3em bottom 10px;\nobject-position: top 0 right 10px;\n\n/* Global values */\nobject-position: inherit;\nobject-position: initial;\nobject-position: revert;\nobject-position: revert-layer;\nobject-position: unset;\n", "initial value": "50% 50%", "inherit": "yes", "applicable elements": "replaced elements", "name": "object-position"}, "offset": {"desc": "The offset CSS shorthand property sets all the properties required for animating an element along a defined path. Note: Early versions of the spec called this property motion.", "grammar": "/* Offset position */\noffset: auto;\noffset: 10px 30px;\noffset: none;\n\n/* Offset path */\noffset: ray(45deg closest-side);\noffset: path('M 100 100 L 300 100 L 200 300 z');\noffset: url(arc.svg);\n\n/* Offset path with distance and/or rotation */\noffset: url(circle.svg) 100px;\noffset: url(circle.svg) 40%;\noffset: url(circle.svg) 30deg;\noffset: url(circle.svg) 50px 20deg;\n\n/* Including offset anchor */\noffset: ray(45deg closest-side) / 40px 20px;\noffset: url(arc.svg) 2cm / 0.5cm 3cm;\noffset: url(arc.svg) 30deg / 50px 100px;\n\n/* Global values */\noffset: inherit;\noffset: initial;\noffset: revert;\noffset: revert-layer;\noffset: unset;\n", "initial value": "as each of the properties of the shorthand:offset-position: autooffset-path: noneoffset-distance: 0offset-anchor: autooffset-rotate: auto", "inherit": "no", "applicable elements": "transformable elements", "name": "offset"}, "offset-anchor": {"desc": "The offset-anchor CSS property specifies the point inside the box of an element traveling along an offset-path that is actually moving along the path.", "grammar": "/* Keyword values */\noffset-anchor: top;\noffset-anchor: bottom;\noffset-anchor: left;\noffset-anchor: right;\noffset-anchor: center;\noffset-anchor: auto;\n\n/* <percentage> values */\noffset-anchor: 25% 75%;\n\n/* <length> values */\noffset-anchor: 0 0;\noffset-anchor: 1cm 2cm;\noffset-anchor: 10ch 8em;\n\n/* Edge offsets values */\noffset-anchor: bottom 10px right 20px;\noffset-anchor: right 3em bottom 10px;\n\n/* Global values */\noffset-anchor: inherit;\noffset-anchor: initial;\noffset-anchor: revert;\noffset-anchor: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "transformable elements", "name": "offset-anchor"}, "offset-distance": {"desc": "The offset-distance CSS property specifies a position along an offset-path for an element to be placed.", "grammar": "/* Default value */\noffset-distance: 0;\n\n/* the middle of the offset-path */\noffset-distance: 50%;\n\n/* a fixed length positioned along the path */\noffset-distance: 40px;\n\n/* Global values */\noffset-distance: inherit;\noffset-distance: initial;\noffset-distance: revert;\noffset-distance: revert-layer;\noffset-distance: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "transformable elements", "name": "offset-distance"}, "offset-path": {"desc": "The offset-path CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.", "grammar": "/* Default */\noffset-path: none;\n\n/* Function values */\noffset-path: ray(45deg closest-side contain);\n\n/* URL */\noffset-path: url(#path);\n\n/* Shapes */\noffset-path: circle(50% at 25% 25%);\noffset-path: inset(50% 50% 50% 50%);\noffset-path: polygon(30% 0%, 70% 0%, 100% 50%, 30% 100%, 0% 70%, 0% 30%);\noffset-path: path('M 0,200 Q 200,200 260,80 Q 290,20 400,0 Q 300,100 400,200');\n\n/* Geometry Boxes */\noffset-path: margin-box;\noffset-path: stroke-box;\n\n/* Global values */\noffset-path: inherit;\noffset-path: initial;\noffset-path: revert;\noffset-path: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "transformable elements", "name": "offset-path"}, "offset-position": {"desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The offset-position CSS property defines the initial position of the offset-path.", "grammar": "/* Keyword values */\noffset-position: auto;\noffset-position: top;\noffset-position: bottom;\noffset-position: left;\noffset-position: right;\noffset-position: center;\n\n/* <percentage> values */\noffset-position: 25% 75%;\n\n/* <length> values */\noffset-position: 0 0;\noffset-position: 1cm 2cm;\noffset-position: 10ch 8em;\n\n/* Edge offsets values */\noffset-position: bottom 10px right 20px;\noffset-position: right 3em bottom 10px;\noffset-position: bottom 10px right;\noffset-position: top right 10px;\n\n/* Global values */\noffset-position: inherit;\noffset-position: initial;\noffset-position: revert;\noffset-position: revert-layer;\noffset-position: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "transformable elements", "name": "offset-position"}, "offset-rotate": {"desc": "The offset-rotate CSS property defines the orientation/direction of the element as it is positioned along the offset-path.", "grammar": "/* Follow the path direction, with optional additional angle */\noffset-rotate: auto;\noffset-rotate: auto 45deg;\n\n/* Follow the path direction but facing the opposite direction of `auto` */\noffset-rotate: reverse;\n\n/* Keep a constant rotation regardless the position on the path */\noffset-rotate: 90deg;\noffset-rotate: .5turn;\n\n/* Global values */\noffset-rotate: inherit;\noffset-rotate: initial;\noffset-rotate: revert;\noffset-rotate: revert-layer;\noffset-rotate: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "transformable elements", "name": "offset-rotate"}, "opacity": {"desc": "The opacity CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.", "grammar": "opacity: 0.9\nopacity: 90%\n\n/* Global values */\nopacity: inherit;\nopacity: initial;\nopacity: revert;\nopacity: revert-layer;\nopacity: unset;\n", "initial value": "1", "inherit": "no", "applicable elements": "all elements", "name": "opacity"}, "order": {"desc": "The order CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order.", "grammar": "/* <integer> values */\norder: 5;\norder: -5;\n\n/* Global values */\norder: inherit;\norder: initial;\norder: revert;\norder: revert-layer;\norder: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "Flex items, grid items, and absolutely-positioned flex and grid container children", "name": "order"}, "orphans": {"desc": "The orphans CSS property sets the minimum number of lines in a block container that must be shown at the bottom of a page, region, or column./* <integer> values */orphans: 2;orphans: 3; /* Global values */orphans: inherit;orphans: initial;orphans: revert;orphans: revert-layer;orphans: unset; In typography, an orphan is the first line of a paragraph that appears alone at the bottom of a page. (The paragraph continues on a following page.)", "grammar": "/* <integer> values */\norphans: 2;\norphans: 3;\n\n/* Global values */\norphans: inherit;\norphans: initial;\norphans: revert;\norphans: revert-layer;\norphans: unset;\n", "initial value": "2", "inherit": "yes", "applicable elements": "block container elements", "name": "orphans"}, "outline": {"desc": "The outline CSS shorthand property sets most of the outline properties in a single declaration.", "grammar": "/* style */\noutline: solid;\n\n/* color | style */\noutline: #f66 dashed;\n\n/* style | width */\noutline: inset thick;\n\n/* color | style | width */\noutline: green solid 3px;\n\n/* Global values */\noutline: inherit;\noutline: initial;\noutline: revert;\noutline: revert-layer;\noutline: unset;\n", "initial value": "as each of the properties of the shorthand:outline-color: invert, for browsers supporting it, currentColor for the otheroutline-style: noneoutline-width: medium", "inherit": "no", "applicable elements": "all elements", "name": "outline"}, "outline-color": {"desc": "The outline-color CSS property sets the color of an element's outline.", "grammar": "/* <color> values */\noutline-color: #f92525;\noutline-color: rgb(30,222,121);\noutline-color: blue;\n\n/* Keyword value */\noutline-color: invert;\n\n/* Global values */\noutline-color: inherit;\noutline-color: initial;\noutline-color: revert;\noutline-color: revert-layer;\noutline-color: unset;\n", "initial value": "invert, for browsers supporting it, currentColor for the other", "inherit": "no", "applicable elements": "all elements", "name": "outline-color"}, "outline-offset": {"desc": "The outline-offset CSS property sets the amount of space between an outline and the edge or border of an element.", "grammar": "/* <length> values */\noutline-offset: 3px;\noutline-offset: 0.2em;\n\n/* Global values */\noutline-offset: inherit;\noutline-offset: initial;\noutline-offset: revert;\noutline-offset: revert-layer;\noutline-offset: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "outline-offset"}, "outline-style": {"desc": "The outline-style CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the border.", "grammar": "/* Keyword values */\noutline-style: auto;\noutline-style: none;\noutline-style: dotted;\noutline-style: dashed;\noutline-style: solid;\noutline-style: double;\noutline-style: groove;\noutline-style: ridge;\noutline-style: inset;\noutline-style: outset;\n\n/* Global values */\noutline-style: inherit;\noutline-style: initial;\noutline-style: revert;\noutline-style: revert-layer;\noutline-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "outline-style"}, "outline-width": {"desc": "The CSS outline-width property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the border.", "grammar": "/* Keyword values */\noutline-width: thin;\noutline-width: medium;\noutline-width: thick;\n\n/* <length> values */\noutline-width: 1px;\noutline-width: 0.1em;\n\n/* Global values */\noutline-width: inherit;\noutline-width: initial;\noutline-width: revert;\noutline-width: revert-layer;\noutline-width: unset;\n", "initial value": "medium", "inherit": "no", "applicable elements": "all elements", "name": "outline-width"}, "overflow": {"desc": "The overflow CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.", "grammar": "/* Keyword values */\noverflow: visible;\noverflow: hidden;\noverflow: clip;\noverflow: scroll;\noverflow: auto;\noverflow: hidden visible;\n\n/* Global values */\noverflow: inherit;\noverflow: initial;\noverflow: revert;\noverflow: revert-layer;\noverflow: unset;\n", "initial value": "visible", "inherit": "no", "applicable elements": "Block-containers, flex containers, and grid containers", "name": "overflow"}, "overflow-anchor": {"desc": "The overflow-anchor CSS property provides a way to opt out of the browser's scroll anchoring behavior, which adjusts scroll position to minimize content shifts.Scroll anchoring behavior is enabled by default in any browser that supports it. Therefore, changing the value of this property is typically only required if you are experiencing problems with scroll anchoring in a document or part of a document and need to turn the behavior off.", "grammar": "/* Keyword values */\noverflow-anchor: auto;\noverflow-anchor: none;\n\n/* Global values */\noverflow-anchor: inherit;\noverflow-anchor: initial;\noverflow-anchor: revert;\noverflow-anchor: revert-layer;\noverflow-anchor: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements", "name": "overflow-anchor"}, "overflow-block": {"desc": "The overflow-block CSS property sets what shows when content overflows the block start and block end edges of a box. This may be nothing, a scroll bar, or the overflow content. Note: The overflow-block property maps to overflow-y or overflow-x depending on the writing mode of the document.", "grammar": "/* Keyword values */\noverflow-block: visible;\noverflow-block: hidden;\noverflow-block: scroll;\noverflow-block: auto;\n\n/* Global values */\noverflow-block: inherit;\noverflow-block: initial;\noverflow-block: revert;\noverflow-block: revert-layer;\noverflow-block: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "Block-containers, flex containers, and grid containers", "name": "overflow-block"}, "overflow-clip-margin": {"desc": "The overflow-clip-margin CSS property determines how far outside its bounds an element with overflow: clip may be painted before being clipped.", "grammar": "overflow-clip-margin: 20px;\noverflow-clip-margin: 1em;\n\n/* Global values */\noverflow-clip-margin: inherit;\noverflow-clip-margin: initial;\noverflow-clip-margin: revert;\noverflow-clip-margin: revert-layer;\noverflow-clip-margin: unset;\n", "initial value": "0px", "inherit": "no", "applicable elements": "all elements", "name": "overflow-clip-margin"}, "overflow-inline": {"desc": "The overflow-inline CSS property sets what shows when content overflows the inline start and end edges of a box. This may be nothing, a scroll bar, or the overflow content. Note: The overflow-inline property maps to overflow-y or overflow-x depending on the writing mode of the document.", "grammar": "/* Keyword values */\noverflow-inline: visible;\noverflow-inline: hidden;\noverflow-inline: scroll;\noverflow-inline: auto;\n\n/* Global values */\noverflow-inline: inherit;\noverflow-inline: initial;\noverflow-inline: revert;\noverflow-inline: revert-layer;\noverflow-inline: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "Block-containers, flex containers, and grid containers", "name": "overflow-inline"}, "overflow-wrap": {"desc": "The overflow-wrap CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.", "grammar": "/* Keyword values */\noverflow-wrap: normal;\noverflow-wrap: break-word;\noverflow-wrap: anywhere;\n\n/* Global values */\noverflow-wrap: inherit;\noverflow-wrap: initial;\noverflow-wrap: revert;\noverflow-wrap: revert-layer;\noverflow-wrap: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "non-replaced inline elements", "name": "overflow-wrap"}, "overflow-x": {"desc": "The overflow-x CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.", "grammar": "/* Keyword values */\noverflow-x: visible;\noverflow-x: hidden;\noverflow-x: clip;\noverflow-x: scroll;\noverflow-x: auto;\n\n/* Global values */\noverflow-x: inherit;\noverflow-x: initial;\noverflow-x: revert;\noverflow-x: revert-layer;\noverflow-x: unset;\n", "initial value": "visible", "inherit": "no", "applicable elements": "Block-containers, flex containers, and grid containers", "name": "overflow-x"}, "overflow-y": {"desc": "The overflow-y CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.", "grammar": "/* Keyword values */\noverflow-y: visible;\noverflow-y: hidden;\noverflow-y: clip;\noverflow-y: scroll;\noverflow-y: auto;\n\n/* Global values */\noverflow-y: inherit;\noverflow-y: initial;\noverflow-y: revert;\noverflow-y: revert-layer;\noverflow-y: unset;\n", "initial value": "visible", "inherit": "no", "applicable elements": "Block-containers, flex containers, and grid containers", "name": "overflow-y"}, "overscroll-behavior": {"desc": "The overscroll-behavior CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for overscroll-behavior-x and overscroll-behavior-y.", "grammar": "/* Keyword values */\noverscroll-behavior: auto; /* default */\noverscroll-behavior: contain;\noverscroll-behavior: none;\n\n/* Two values */\noverscroll-behavior: auto contain;\n\n/* Global values */\noverscroll-behavior: inherit;\noverscroll-behavior: initial;\noverscroll-behavior: revert;\noverscroll-behavior: revert-layer;\noverscroll-behavior: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "non-replaced block-level elements and non-replaced inline-block elements", "name": "overscroll-behavior"}, "overscroll-behavior-block": {"desc": "The overscroll-behavior-block CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.See overscroll-behavior for a full explanation./* Keyword values */overscroll-behavior-block: auto; /* default */overscroll-behavior-block: contain;overscroll-behavior-block: none; /* Global values */overscroll-behavior-block: inherit;overscroll-behavior-block: initial;overscroll-behavior-block: revert;overscroll-behavior-block: revert-layer;overscroll-behavior-block: unset;", "grammar": "/* Keyword values */\noverscroll-behavior-block: auto; /* default */\noverscroll-behavior-block: contain;\noverscroll-behavior-block: none;\n\n/* Global values */\noverscroll-behavior-block: inherit;\noverscroll-behavior-block: initial;\noverscroll-behavior-block: revert;\noverscroll-behavior-block: revert-layer;\noverscroll-behavior-block: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "non-replaced block-level elements and non-replaced inline-block elements", "name": "overscroll-behavior-block"}, "overscroll-behavior-inline": {"desc": "The overscroll-behavior-inline CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.See overscroll-behavior for a full explanation./* Keyword values */overscroll-behavior-inline: auto; /* default */overscroll-behavior-inline: contain;overscroll-behavior-inline: none; /* Global values */overscroll-behavior-inline: inherit;overscroll-behavior-inline: initial;overscroll-behavior-inline: revert;overscroll-behavior-inline: revert-layer;overscroll-behavior-inline: unset;", "grammar": "/* Keyword values */\noverscroll-behavior-inline: auto; /* default */\noverscroll-behavior-inline: contain;\noverscroll-behavior-inline: none;\n\n/* Global values */\noverscroll-behavior-inline: inherit;\noverscroll-behavior-inline: initial;\noverscroll-behavior-inline: revert;\noverscroll-behavior-inline: revert-layer;\noverscroll-behavior-inline: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "non-replaced block-level elements and non-replaced inline-block elements", "name": "overscroll-behavior-inline"}, "overscroll-behavior-x": {"desc": "The overscroll-behavior-x CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.See overscroll-behavior for a full explanation./* Keyword values */overscroll-behavior-x: auto; /* default */overscroll-behavior-x: contain;overscroll-behavior-x: none; /* Global values */overscroll-behavior-x: inherit;overscroll-behavior-x: initial;overscroll-behavior-x: revert;overscroll-behavior-x: revert-layer;overscroll-behavior-x: unset;", "grammar": "/* Keyword values */\noverscroll-behavior-x: auto; /* default */\noverscroll-behavior-x: contain;\noverscroll-behavior-x: none;\n\n/* Global values */\noverscroll-behavior-x: inherit;\noverscroll-behavior-x: initial;\noverscroll-behavior-x: revert;\noverscroll-behavior-x: revert-layer;\noverscroll-behavior-x: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "non-replaced block-level elements and non-replaced inline-block elements", "name": "overscroll-behavior-x"}, "overscroll-behavior-y": {"desc": "The overscroll-behavior-y CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.See overscroll-behavior for a full explanation./* Keyword values */overscroll-behavior-y: auto; /* default */overscroll-behavior-y: contain;overscroll-behavior-y: none; /* Global values */overscroll-behavior-y: inherit;overscroll-behavior-y: initial;overscroll-behavior-y: revert;overscroll-behavior-y: revert-layer;overscroll-behavior-y: unset;", "grammar": "/* Keyword values */\noverscroll-behavior-y: auto; /* default */\noverscroll-behavior-y: contain;\noverscroll-behavior-y: none;\n\n/* Global values */\noverscroll-behavior-y: inherit;\noverscroll-behavior-y: initial;\noverscroll-behavior-y: revert;\noverscroll-behavior-y: revert-layer;\noverscroll-behavior-y: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "non-replaced block-level elements and non-replaced inline-block elements", "name": "overscroll-behavior-y"}, "padding": {"desc": "The padding CSS shorthand property sets the padding area on all four sides of an element at once.", "grammar": "/* Apply to all four sides */\npadding: 1em;\n\n/* vertical | horizontal */\npadding: 5% 10%;\n\n/* top | horizontal | bottom */\npadding: 1em 2em 2em;\n\n/* top | right | bottom | left */\npadding: 5px 1em 0 2em;\n\n/* Global values */\npadding: inherit;\npadding: initial;\npadding: revert;\npadding: revert-layer;\npadding: unset;\n", "initial value": "as each of the properties of the shorthand:padding-bottom: 0padding-left: 0padding-right: 0padding-top: 0", "inherit": "no", "applicable elements": "all elements, except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column. It also applies to ::first-letter and ::first-line.", "name": "padding"}, "padding-block-end": {"desc": "The padding-block-end CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.", "grammar": "/* <length> values */\npadding-block-end: 10px;      /* An absolute length */\npadding-block-end: 1em;       /* A length relative to the text size */\n\n/* <percentage> value */\npadding-block-end: 5%;        /* A padding relative to the block container's width */\n\n/* Global values */\npadding-block-end: inherit;\npadding-block-end: initial;\npadding-block-end: revert;\npadding-block-end: revert-layer;\npadding-block-end: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "padding-block-end"}, "padding-block-start": {"desc": "The padding-block-start CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.", "grammar": "/* <length> values */\npadding-block-start: 10px;      /* An absolute length */\npadding-block-start: 1em;       /* A length relative to the text size */\n\n/* <percentage> value */\npadding-block-start: 5%;        /* A padding relative to the block container's width */\n\n/* Global values */\npadding-block-start: inherit;\npadding-block-start: initial;\npadding-block-start: revert;\npadding-block-start: revert-layer;\npadding-block-start: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "padding-block-start"}, "padding-bottom": {"desc": "The padding-bottom CSS property sets the height of the padding area on the bottom of an element.", "grammar": "/* <length> values */\npadding-bottom: 0.5em;\npadding-bottom: 0;\npadding-bottom: 2cm;\n\n/* <percentage> value */\npadding-bottom: 10%;\n\n/* Global values */\npadding-bottom: inherit;\npadding-bottom: initial;\npadding-bottom: revert;\npadding-bottom: revert-layer;\npadding-bottom: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column. It also applies to ::first-letter and ::first-line.", "name": "padding-bottom"}, "padding-inline-end": {"desc": "The padding-inline-end CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.", "grammar": "/* <length> values */\npadding-inline-end: 10px;     /* An absolute length */\npadding-inline-end: 1em;      /* A length relative to the text size */\n\n/* <percentage> value */\npadding-inline-end: 5%;       /* A padding relative to the block container's width */\n\n/* Global values */\npadding-inline-end: inherit;\npadding-inline-end: initial;\npadding-inline-end: revert;\npadding-inline-end: revert-layer;\npadding-inline-end: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "padding-inline-end"}, "padding-inline-start": {"desc": "The padding-inline-start CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.", "grammar": "/* <length> values */\npadding-inline-start: 10px;   /* An absolute length */\npadding-inline-start: 1em;    /* A length relative to the text size */\n\n/* <percentage> value */\npadding-inline-start: 5%;     /* A padding relative to the block container's width */\n\n/* Global values */\npadding-inline-start: inherit;\npadding-inline-start: initial;\npadding-inline-start: revert;\npadding-inline-start: revert-layer;\npadding-inline-start: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "padding-inline-start"}, "padding-left": {"desc": "The padding-left CSS property sets the width of the padding area to the left of an element.", "grammar": "/* <length> values */\npadding-left: 0.5em;\npadding-left: 0;\npadding-left: 2cm;\n\n/* <percentage> value */\npadding-left: 10%;\n\n/* Global values */\npadding-left: inherit;\npadding-left: initial;\npadding-left: revert;\npadding-left: revert-layer;\npadding-left: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column. It also applies to ::first-letter and ::first-line.", "name": "padding-left"}, "padding-right": {"desc": "The padding-right CSS property sets the width of the padding area on the right of an element.", "grammar": "/* <length> values */\npadding-right: 0.5em;\npadding-right: 0;\npadding-right: 2cm;\n\n/* <percentage> value */\npadding-right: 10%;\n\n/* Global values */\npadding-right: inherit;\npadding-right: initial;\npadding-right: revert;\npadding-right: revert-layer;\npadding-right: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column. It also applies to ::first-letter and ::first-line.", "name": "padding-right"}, "padding-top": {"desc": "The padding-top CSS property sets the height of the padding area on the top of an element.", "grammar": "/* <length> values */\npadding-top: 0.5em;\npadding-top: 0;\npadding-top: 2cm;\n\n/* <percentage> value */\npadding-top: 10%;\n\n/* Global values */\npadding-top: inherit;\npadding-top: initial;\npadding-top: revert;\npadding-top: revert-layer;\npadding-top: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements, except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column. It also applies to ::first-letter and ::first-line.", "name": "padding-top"}, "page-break-after": {"desc": "Warning: This property has been replaced by the break-after property. The page-break-after CSS property adjusts page breaks after the current element./* Keyword values */page-break-after: auto;page-break-after: always;page-break-after: avoid;page-break-after: left;page-break-after: right;page-break-after: recto;page-break-after: verso; /* Global values */page-break-after: inherit;page-break-after: initial;page-break-after: revert;page-break-after: revert-layer;page-break-after: unset; This property applies to block elements that generate a box. It won't apply on an empty <div> that won't generate a box.", "grammar": "/* Keyword values */\npage-break-after: auto;\npage-break-after: always;\npage-break-after: avoid;\npage-break-after: left;\npage-break-after: right;\npage-break-after: recto;\npage-break-after: verso;\n\n/* Global values */\npage-break-after: inherit;\npage-break-after: initial;\npage-break-after: revert;\npage-break-after: revert-layer;\npage-break-after: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "block-level elements in the normal flow of the root element. User agents may also apply it to other elements like table-row elements.", "name": "page-break-after"}, "page-break-before": {"desc": "Warning: This property has been replaced by the break-before property. The page-break-before CSS property adjusts page breaks before the current element.This property applies to block elements that generate a box. It won't apply on an empty <div> that won't generate a box./* Keyword values */page-break-before: auto;page-break-before: always;page-break-before: avoid;page-break-before: left;page-break-before: right;page-break-before: recto;page-break-before: verso; /* Global values */page-break-before: inherit;page-break-before: initial;page-break-before: revert;page-break-before: revert-layer;page-break-before: unset;", "grammar": "/* Keyword values */\npage-break-before: auto;\npage-break-before: always;\npage-break-before: avoid;\npage-break-before: left;\npage-break-before: right;\npage-break-before: recto;\npage-break-before: verso;\n\n/* Global values */\npage-break-before: inherit;\npage-break-before: initial;\npage-break-before: revert;\npage-break-before: revert-layer;\npage-break-before: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "block-level elements in the normal flow of the root element. User agents may also apply it to other elements like table-row elements.", "name": "page-break-before"}, "page-break-inside": {"desc": "Warning: This property has been replaced by the break-inside property. The page-break-inside CSS property adjusts page breaks inside the current element./* Keyword values */page-break-inside: auto;page-break-inside: avoid; /* Global values */page-break-inside: inherit;page-break-inside: initial;page-break-inside: revert;page-break-inside: revert-layer;page-break-inside: unset;", "grammar": "/* Keyword values */\npage-break-inside: auto;\npage-break-inside: avoid;\n\n/* Global values */\npage-break-inside: inherit;\npage-break-inside: initial;\npage-break-inside: revert;\npage-break-inside: revert-layer;\npage-break-inside: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "block-level elements in the normal flow of the root element. User agents may also apply it to other elements like table-row elements.", "name": "page-break-inside"}, "perspective": {"desc": "The perspective CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.", "grammar": "/* Keyword value */\nperspective: none;\n\n/* <length> values */\nperspective: 20px;\nperspective: 3.5em;\n\n/* Global values */\nperspective: inherit;\nperspective: initial;\nperspective: revert;\nperspective: revert-layer;\nperspective: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "transformable elements", "name": "perspective"}, "perspective-origin": {"desc": "The perspective-origin CSS property determines the position at which the viewer is looking. It is used as the vanishing point by the perspective property.", "grammar": "/* One-value syntax */\nperspective-origin: x-position;\n\n/* Two-value syntax */\nperspective-origin: x-position y-position;\n\n/* When both x-position and y-position are keywords,\n   the following is also valid */\nperspective-origin: y-position x-position;\n\n/* Global values */\nperspective-origin: inherit;\nperspective-origin: initial;\nperspective-origin: revert;\nperspective-origin: revert-layer;\nperspective-origin: unset;\n", "initial value": "50% 50%", "inherit": "no", "applicable elements": "transformable elements", "name": "perspective-origin"}, "place-content": {"desc": "The place-content CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the align-content and justify-content properties) in a relevant layout system such as Grid or Flexbox.", "grammar": "/* Positional alignment */\n/* align-content does not take left and right values */\nplace-content: center start;\nplace-content: start center;\nplace-content: end left;\nplace-content: flex-start center;\nplace-content: flex-end center;\n\n/* Baseline alignment */\n/* justify-content does not take baseline values */\nplace-content: baseline center;\nplace-content: first baseline space-evenly;\nplace-content: last baseline right;\n\n/* Distributed alignment */\nplace-content: space-between space-evenly;\nplace-content: space-around space-evenly;\nplace-content: space-evenly stretch;\nplace-content: stretch space-evenly;\n\n/* Global values */\nplace-content: inherit;\nplace-content: initial;\nplace-content: revert;\nplace-content: revert-layer;\nplace-content: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "multi-line flex containers", "name": "place-content"}, "place-items": {"desc": "The CSS place-items shorthand property allows you to align items along both the block and inline directions at once (i.e. the align-items and justify-items properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.", "grammar": "/* Keyword values */\nplace-items: center;\nplace-items: normal start;\n\n/* Positional alignment */\nplace-items: center normal;\nplace-items: start legacy;\nplace-items: end normal;\nplace-items: self-start legacy;\nplace-items: self-end normal;\nplace-items: flex-start legacy;\nplace-items: flex-end normal;\nplace-items: left legacy;\nplace-items: right normal;\n\n/* Baseline alignment */\nplace-items: baseline normal;\nplace-items: first baseline legacy;\nplace-items: last baseline normal;\nplace-items: stretch legacy;\n\n/* Global values */\nplace-items: inherit;\nplace-items: initial;\nplace-items: revert;\nplace-items: revert-layer;\nplace-items: unset;\n", "initial value": "as each of the properties of the shorthand:align-items: normaljustify-items: legacy", "inherit": "no", "applicable elements": "all elements", "name": "place-items"}, "place-self": {"desc": "The place-self CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the align-self and justify-self properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.", "grammar": "/* Keyword values */\nplace-self: auto center;\nplace-self: normal start;\n\n/* Positional alignment */\nplace-self: center normal;\nplace-self: start auto;\nplace-self: end normal;\nplace-self: self-start auto;\nplace-self: self-end normal;\nplace-self: flex-start auto;\nplace-self: flex-end normal;\nplace-self: left auto;\nplace-self: right normal;\n\n/* Baseline alignment */\nplace-self: baseline normal;\nplace-self: first baseline auto;\nplace-self: last baseline normal;\nplace-self: stretch auto;\n\n/* Global values */\nplace-self: inherit;\nplace-self: initial;\nplace-self: revert;\nplace-self: revert-layer;\nplace-self: unset;\n", "initial value": "as each of the properties of the shorthand:align-self: autojustify-self: auto", "inherit": "no", "applicable elements": "block-level boxes, absolutely-positioned boxes, and grid items", "name": "place-self"}, "pointer-events": {"desc": "The pointer-events CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.", "grammar": "/* Keyword values */\npointer-events: auto;\npointer-events: none;\npointer-events: visiblePainted; /* SVG only */\npointer-events: visibleFill;    /* SVG only */\npointer-events: visibleStroke;  /* SVG only */\npointer-events: visible;        /* SVG only */\npointer-events: painted;        /* SVG only */\npointer-events: fill;           /* SVG only */\npointer-events: stroke;         /* SVG only */\npointer-events: all;            /* SVG only */\n\n/* Global values */\npointer-events: inherit;\npointer-events: initial;\npointer-events: revert;\npointer-events: revert-layer;\npointer-events: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "pointer-events"}, "position": {"desc": "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.", "grammar": "position: static;\nposition: relative;\nposition: absolute;\nposition: fixed;\nposition: sticky;\n\n/* Global values */\nposition: inherit;\nposition: initial;\nposition: revert;\nposition: revert-layer;\nposition: unset;\n", "initial value": "static", "inherit": "no", "applicable elements": "all elements", "name": "position"}, "print-color-adjust": {"desc": "The print-color-adjust CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.", "grammar": "print-color-adjust: economy;\nprint-color-adjust: exact;\n\n/* Global values */\nprint-color-adjust: inherit;\nprint-color-adjust: initial;\nprint-color-adjust: revert;\nprint-color-adjust: revert-layer;\nprint-color-adjust: unset;\n", "initial value": "economy", "inherit": "yes", "applicable elements": "all elements", "name": "print-color-adjust"}, "quotes": {"desc": "The quotes CSS property sets how the browser should render quotation marks that are added using the open-quotes or close-quotes values of the CSS content property.", "grammar": "/* Keyword value */\nquotes: none;\nquotes: auto;\n\n/* <string> values */\nquotes: \"«\" \"»\";           /* Set open-quote and close-quote to the French quotation marks */\nquotes: \"«\" \"»\" \"‹\" \"›\";   /* Set two levels of quotation marks */\n\n/* Global values */\nquotes: inherit;\nquotes: initial;\nquotes: revert;\nquotes: revert-layer;\nquotes: unset;\n", "initial value": "depends on user agent", "inherit": "yes", "applicable elements": "all elements", "name": "quotes"}, "resize": {"desc": "The resize CSS property sets whether an element is resizable, and if so, in which directions.", "grammar": "/* Keyword values */\nresize: none;\nresize: both;\nresize: horizontal;\nresize: vertical;\nresize: block;\nresize: inline;\n\n/* Global values */\nresize: inherit;\nresize: initial;\nresize: revert;\nresize: revert-layer;\nresize: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "elements with overflow other than visible, and optionally replaced elements representing images or videos, and iframes", "name": "resize"}, "right": {"desc": "The right CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.", "grammar": "/* <length> values */\nright: 3px;\nright: 2.4em;\n\n/* <percentage>s of the width of the containing block */\nright: 10%;\n\n/* Keyword value */\nright: auto;\n\n/* Global values */\nright: inherit;\nright: initial;\nright: revert;\nright: revert-layer;\nright: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "right"}, "rotate": {"desc": "The rotate CSS property allows you to specify rotation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform property.", "grammar": "/* Keyword values */\nrotate: none;\n\n/* Angle value */\nrotate: 90deg;\nrotate: 0.25turn;\nrotate: 1.57rad;\n\n/* x, y, or z axis name plus angle */\nrotate: x 90deg;\nrotate: y 0.25turn;\nrotate: z 1.57rad;\n\n/* Vector plus angle value */\nrotate: 1 1 1 90deg;\n\n/* Global values */\nrotate: inherit;\nrotate: initial;\nrotate: revert;\nrotate: revert-layer;\nrotate: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "transformable elements", "name": "rotate"}, "row-gap (grid-row-gap)": {"desc": "The row-gap CSS property sets the size of the gap (gutter) between an element's rows.", "grammar": "/* <length> values */\nrow-gap: 20px;\nrow-gap: 1em;\nrow-gap: 3vmin;\nrow-gap: 0.5cm;\n\n/* <percentage> value */\nrow-gap: 10%;\n\n/* Global values */\nrow-gap: inherit;\nrow-gap: initial;\nrow-gap: revert;\nrow-gap: revert-layer;\nrow-gap: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "multi-column elements, flex containers, grid containers", "name": "row-gap (grid-row-gap)"}, "ruby-align": {"desc": "The ruby-align CSS property defines the distribution of the different ruby elements over the base./* Keyword values */ruby-align: start;ruby-align: center;ruby-align: space-between;ruby-align: space-around; /* Global values */ruby-align: inherit;ruby-align: initial;ruby-align: revert;ruby-align: revert-layer;ruby-align: unset;", "grammar": "/* Keyword values */\nruby-align: start;\nruby-align: center;\nruby-align: space-between;\nruby-align: space-around;\n\n/* Global values */\nruby-align: inherit;\nruby-align: initial;\nruby-align: revert;\nruby-align: revert-layer;\nruby-align: unset;\n", "initial value": "space-around", "inherit": "yes", "applicable elements": "ruby bases, ruby annotations, ruby base containers, ruby annotation containers", "name": "ruby-align"}, "ruby-position": {"desc": "The ruby-position CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (over), under it (under), or between the characters on their right side (inter-character).", "grammar": "/* Keyword values */\nruby-position: over;\nruby-position: under;\nruby-position: inter-character;\nruby-position: alternate;\n\n/* Global values */\nruby-position: inherit;\nruby-position: initial;\nruby-position: revert;\nruby-position: revert-layer;\nruby-position: unset;\n", "initial value": "alternate", "inherit": "yes", "applicable elements": "ruby annotations containers", "name": "ruby-position"}, "scale": {"desc": "The scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.", "grammar": "/* Keyword values */\nscale: none;\n\n/* Single values */\n/* values of more than 1 make the element grow */\nscale: 2;\n/* values of less than 1 make the element shrink */\nscale: 0.5;\n\n/* Two values */\nscale: 2 0.5;\n\n/* Three values */\nscale: 2 0.5 2;\n\n/* Global values */\nscale: inherit;\nscale: initial;\nscale: revert;\nscale: revert-layer;\nscale: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "transformable elements", "name": "scale"}, "scroll-behavior": {"desc": "The scroll-behavior CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.", "grammar": "/* Keyword values */\nscroll-behavior: auto;\nscroll-behavior: smooth;\n\n/* Global values */\nscroll-behavior: inherit;\nscroll-behavior: initial;\nscroll-behavior: revert;\nscroll-behavior: revert-layer;\nscroll-behavior: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scrolling boxes", "name": "scroll-behavior"}, "scroll-margin": {"desc": "The scroll-margin shorthand property sets all of the scroll margins of an element at once, assigning values much like the margin property does for margins of an element.", "grammar": "/* <length> values */\nscroll-margin: 10px;\nscroll-margin: 1em .5em 1em 1em;\n\n/* Global values */\nscroll-margin: inherit;\nscroll-margin: initial;\nscroll-margin: revert;\nscroll-margin: revert-layer;\nscroll-margin: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin"}, "scroll-margin-block": {"desc": "The scroll-margin-block shorthand property sets the scroll margins of an element in the block dimension.", "grammar": "/* <length> values */\nscroll-margin-block: 10px;\nscroll-margin-block: 1em .5em ;\n\n/* Global values */\nscroll-margin-block: inherit;\nscroll-margin-block: initial;\nscroll-margin-block: revert;\nscroll-margin-block: revert-layer;\nscroll-margin-block: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-block"}, "scroll-margin-block-end": {"desc": "The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.", "grammar": "/* <length> values */\nscroll-margin-block-end: 10px;\nscroll-margin-block-end: 1em;\n\n/* Global values */\nscroll-margin-block-end: inherit;\nscroll-margin-block-end: initial;\nscroll-margin-block-end: revert;\nscroll-margin-block-end: revert-layer;\nscroll-margin-block-end: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-block-end"}, "scroll-margin-block-start": {"desc": "The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.", "grammar": "/* <length> values */\nscroll-margin-block-start: 10px;\nscroll-margin-block-start: 1em;\n\n/* Global values */\nscroll-margin-block-start: inherit;\nscroll-margin-block-start: initial;\nscroll-margin-block-start: revert;\nscroll-margin-block-start: revert-layer;\nscroll-margin-block-start: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-block-start"}, "scroll-margin-bottom": {"desc": "The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.", "grammar": "/* <length> values */\nscroll-margin-bottom: 10px;\nscroll-margin-bottom: 1em;\n\n/* Global values */\nscroll-margin-bottom: inherit;\nscroll-margin-bottom: initial;\nscroll-margin-bottom: revert;\nscroll-margin-bottom: revert-layer;\nscroll-margin-bottom: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-bottom"}, "scroll-margin-inline": {"desc": "The scroll-margin-inline shorthand property sets the scroll margins of an element in the inline dimension.", "grammar": "/* <length> values */\nscroll-margin-inline: 10px;\nscroll-margin-inline: 1em .5em ;\n\n/* Global values */\nscroll-margin-inline: inherit;\nscroll-margin-inline: initial;\nscroll-margin-inline: revert;\nscroll-margin-inline: revert-layer;\nscroll-margin-inline: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-inline"}, "scroll-margin-inline-end": {"desc": "The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.", "grammar": "/* <length> values */\nscroll-margin-inline-end: 10px;\nscroll-margin-inline-end: 1em;\n\n/* Global values */\nscroll-margin-inline-end: inherit;\nscroll-margin-inline-end: initial;\nscroll-margin-inline-end: revert;\nscroll-margin-inline-end: revert-layer;\nscroll-margin-inline-end: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-inline-end"}, "scroll-margin-inline-start": {"desc": "The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.", "grammar": "/* <length> values */\nscroll-margin-inline-start: 10px;\nscroll-margin-inline-start: 1em;\n\n/* Global values */\nscroll-margin-inline-start: inherit;\nscroll-margin-inline-start: initial;\nscroll-margin-inline-start: revert;\nscroll-margin-inline-start: revert-layer;\nscroll-margin-inline-start: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-inline-start"}, "scroll-margin-left": {"desc": "The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.", "grammar": "/* <length> values */\nscroll-margin-left: 10px;\nscroll-margin-left: 1em;\n\n/* Global values */\nscroll-margin-left: inherit;\nscroll-margin-left: initial;\nscroll-margin-left: revert;\nscroll-margin-left: revert-layer;\nscroll-margin-left: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-left"}, "scroll-margin-right": {"desc": "The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.", "grammar": "/* <length> values */\nscroll-margin-right: 10px;\nscroll-margin-right: 1em;\n\n/* Global values */\nscroll-margin-right: inherit;\nscroll-margin-right: initial;\nscroll-margin-right: revert;\nscroll-margin-right: revert-layer;\nscroll-margin-right: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-right"}, "scroll-margin-top": {"desc": "The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.", "grammar": "/* <length> values */\nscroll-margin-top: 10px;\nscroll-margin-top: 1em;\n\n/* Global values */\nscroll-margin-top: inherit;\nscroll-margin-top: initial;\nscroll-margin-top: revert;\nscroll-margin-top: revert-layer;\nscroll-margin-top: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "all elements", "name": "scroll-margin-top"}, "scroll-padding": {"desc": "The scroll-padding shorthand property sets scroll padding on all sides of an element at once, much like the padding property does for padding on an element.", "grammar": "/* Keyword values */\nscroll-padding: auto;\n\n/* <length> values */\nscroll-padding: 10px;\nscroll-padding: 1em .5em 1em 1em;\nscroll-padding: 10%;\n\n/* Global values */\nscroll-padding: inherit;\nscroll-padding: initial;\nscroll-padding: revert;\nscroll-padding: revert-layer;\nscroll-padding: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding"}, "scroll-padding-block-end": {"desc": "The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.", "grammar": "/* Keyword values */\nscroll-padding-block-end: auto;\n\n/* <length> values */\nscroll-padding-block-end: 10px;\nscroll-padding-block-end: 1em;\nscroll-padding-block-end: 10%;\n\n/* Global values */\nscroll-padding-block-end: inherit;\nscroll-padding-block-end: initial;\nscroll-padding-block-end: revert;\nscroll-padding-block-end: revert-layer;\nscroll-padding-block-end: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-block-end"}, "scroll-padding-block-start": {"desc": "The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.", "grammar": "/* Keyword values */\nscroll-padding-block-start: auto;\n\n/* <length> values */\nscroll-padding-block-start: 10px;\nscroll-padding-block-start: 1em;\nscroll-padding-block-start: 10%;\n\n/* Global values */\nscroll-padding-block-start: inherit;\nscroll-padding-block-start: initial;\nscroll-padding-block-start: revert;\nscroll-padding-block-start: revert-layer;\nscroll-padding-block-start: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-block-start"}, "scroll-padding-bottom": {"desc": "The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.", "grammar": "/* Keyword values */\nscroll-padding-bottom: auto;\n\n/* <length> values */\nscroll-padding-bottom: 10px;\nscroll-padding-bottom: 1em;\nscroll-padding-bottom: 10%;\n\n/* Global values */\nscroll-padding-bottom: inherit;\nscroll-padding-bottom: initial;\nscroll-padding-bottom: revert;\nscroll-padding-bottom: revert-layer;\nscroll-padding-bottom: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-bottom"}, "scroll-padding-inline": {"desc": "The scroll-padding-inline shorthand property sets the scroll padding of an element in the inline dimension.", "grammar": "/* Keyword values */\nscroll-padding-inline: auto;\n\n/* <length> values */\nscroll-padding-inline: 10px;\nscroll-padding-inline: 1em .5em;\nscroll-padding-inline: 10%;\n\n/* Global values */\nscroll-padding-inline: inherit;\nscroll-padding-inline: initial;\nscroll-padding-inline: revert;\nscroll-padding-inline: revert-layer;\nscroll-padding-inline: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-inline"}, "scroll-padding-inline-end": {"desc": "The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.", "grammar": "/* Keyword values */\nscroll-padding-inline-end: auto;\n\n/* <length> values */\nscroll-padding-inline-end: 10px;\nscroll-padding-inline-end: 1em;\nscroll-padding-inline-end: 10%;\n\n/* Global values */\nscroll-padding-inline-end: inherit;\nscroll-padding-inline-end: initial;\nscroll-padding-inline-end: revert;\nscroll-padding-inline-end: revert-layer;\nscroll-padding-inline-end: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-inline-end"}, "scroll-padding-inline-start": {"desc": "The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.", "grammar": "/* Keyword values */\nscroll-padding-inline-start: auto;\n\n/* <length> values */\nscroll-padding-inline-start: 10px;\nscroll-padding-inline-start: 1em;\nscroll-padding-inline-start: 10%;\n\n/* Global values */\nscroll-padding-inline-start: inherit;\nscroll-padding-inline-start: initial;\nscroll-padding-inline-start: revert;\nscroll-padding-inline-start: revert-layer;\nscroll-padding-inline-start: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-inline-start"}, "scroll-padding-left": {"desc": "The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.", "grammar": "/* Keyword values */\nscroll-padding-left: auto;\n\n/* <length> values */\nscroll-padding-left: 10px;\nscroll-padding-left: 1em;\nscroll-padding-left: 10%;\n\n/* Global values */\nscroll-padding-left: inherit;\nscroll-padding-left: initial;\nscroll-padding-left: revert;\nscroll-padding-left: revert-layer;\nscroll-padding-left: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-left"}, "scroll-padding-right": {"desc": "The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.", "grammar": "/* Keyword values */\nscroll-padding-right: auto;\n\n/* <length> values */\nscroll-padding-right: 10px;\nscroll-padding-right: 1em;\nscroll-padding-right: 10%;\n\n/* Global values */\nscroll-padding-right: inherit;\nscroll-padding-right: initial;\nscroll-padding-right: revert;\nscroll-padding-right: revert-layer;\nscroll-padding-right: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-right"}, "scroll-padding-top": {"desc": "The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.", "grammar": "/* Keyword values */\nscroll-padding-top: auto;\n\n/* <length> values */\nscroll-padding-top: 10px;\nscroll-padding-top: 1em;\nscroll-padding-top: 10%;\n\n/* Global values */\nscroll-padding-top: inherit;\nscroll-padding-top: initial;\nscroll-padding-top: revert;\nscroll-padding-top: revert-layer;\nscroll-padding-top: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-padding-top"}, "scroll-snap-coordinate": {"desc": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The scroll-snap-coordinate CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's scroll-snap-destination for each respective axis./* Keyword value */scroll-snap-coordinate: none; /* <position> values */scroll-snap-coordinate: 50px 50px; /* Single coordinate */scroll-snap-coordinate: 100px 100px, 100px bottom; /* Multiple coordinates */ /* Global values */scroll-snap-coordinate: inherit;scroll-snap-coordinate: initial;scroll-snap-coordinate: unset; If the element has been transformed, the snap coordinates are likewise transformed, thus aligning the snap points with the element as it is displayed.", "grammar": "/* Keyword value */\nscroll-snap-coordinate: none;\n\n/* <position> values */\nscroll-snap-coordinate: 50px 50px;                   /* Single coordinate */\nscroll-snap-coordinate: 100px 100px, 100px bottom;   /* Multiple coordinates */\n\n/* Global values */\nscroll-snap-coordinate: inherit;\nscroll-snap-coordinate: initial;\nscroll-snap-coordinate: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "scroll-snap-coordinate"}, "scroll-snap-destination": {"desc": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The scroll-snap-destination CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with./* <position> value */scroll-snap-destination: 400px 600px; /* Global values */scroll-snap-destination: inherit;scroll-snap-destination: initial;scroll-snap-destination: unset;", "grammar": "/* <position> value */\nscroll-snap-destination: 400px 600px;\n\n/* Global values */\nscroll-snap-destination: inherit;\nscroll-snap-destination: initial;\nscroll-snap-destination: unset;\n", "initial value": "0px 0px", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-snap-destination"}, "scroll-snap-points-x": {"desc": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The scroll-snap-points-x CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to./* Keyword value */scroll-snap-points-x: none; /* Repeating snap points */scroll-snap-points-x: repeat(400px); /* Global values */scroll-snap-points-x: inherit;scroll-snap-points-x: initial;scroll-snap-points-x: unset;", "grammar": "/* Keyword value */\nscroll-snap-points-x: none;\n\n/* Repeating snap points */\nscroll-snap-points-x: repeat(400px);\n\n/* Global values */\nscroll-snap-points-x: inherit;\nscroll-snap-points-x: initial;\nscroll-snap-points-x: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-snap-points-x"}, "scroll-snap-points-y": {"desc": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The scroll-snap-points-y CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to./* Keyword value */scroll-snap-points-y: none; /* Repeated snap points */scroll-snap-points-y: repeat(400px); /* Global values */scroll-snap-points-y: inherit;scroll-snap-points-y: initial;scroll-snap-points-y: unset;", "grammar": "/* Keyword value */\nscroll-snap-points-y: none;\n\n/* Repeated snap points */\nscroll-snap-points-y: repeat(400px);\n\n/* Global values */\nscroll-snap-points-y: inherit;\nscroll-snap-points-y: initial;\nscroll-snap-points-y: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "scroll containers", "name": "scroll-snap-points-y"}, "scroll-snap-type": {"desc": "The scroll-snap-type CSS property sets how strictly snap points are enforced on the scroll container in case there is one.", "grammar": "/* Keyword values */\nscroll-snap-type: none;\nscroll-snap-type: x;\nscroll-snap-type: y;\nscroll-snap-type: block;\nscroll-snap-type: inline;\nscroll-snap-type: both;\n\n/* Optional mandatory | proximity*/\nscroll-snap-type: x mandatory;\nscroll-snap-type: y proximity;\nscroll-snap-type: both mandatory;\n\n/* etc */\n\n/* Global values */\nscroll-snap-type: inherit;\nscroll-snap-type: initial;\nscroll-snap-type: revert;\nscroll-snap-type: revert-layer;\nscroll-snap-type: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "scroll-snap-type"}, "scrollbar-color": {"desc": "The scrollbar-color CSS property sets the color of the scrollbar track and thumb.The track refers to the background of the scrollbar, which is generally fixed regardless of the scrolling position.The thumb refers to the moving part of the scrollbar, which usually floats on top of the track.", "grammar": "/* Keyword values */\nscrollbar-color: auto;\n\n/* <color> values */\nscrollbar-color: rebeccapurple green;   /* Two valid colors.\nThe first applies to the thumb of the scrollbar, the second to the track. */\n\n/* Global values */\nscrollbar-color: inherit;\nscrollbar-color: initial;\nscrollbar-color: revert;\nscrollbar-color: revert-layer;\nscrollbar-color: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "scrolling boxes", "name": "scrollbar-color"}, "scrollbar-width": {"desc": "The scrollbar-width property allows the author to set the maximum thickness of an element's scrollbars when they are shown.", "grammar": "/* Keyword values */\nscrollbar-width: auto;\nscrollbar-width: thin;\nscrollbar-width: none;\n\n/* Global values */\nscrollbar-width: inherit;\nscrollbar-width: initial;\nscrollbar-width: revert;\nscrollbar-width: revert-layer;\nscrollbar-width: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "scrolling boxes", "name": "scrollbar-width"}, "shape-image-threshold": {"desc": "The shape-image-threshold CSS property sets the alpha channel threshold used to extract the shape using an image as the value for shape-outside.", "grammar": "/* <number> value */\nshape-image-threshold: 0.7;\n\n/* Global values */\nshape-image-threshold: inherit;\nshape-image-threshold: initial;\nshape-image-threshold: revert;\nshape-image-threshold: revert-layer;\nshape-image-threshold: unset;\n", "initial value": "0.0", "inherit": "no", "applicable elements": "floats", "name": "shape-image-threshold"}, "shape-margin": {"desc": "The shape-margin CSS property sets a margin for a CSS shape created using shape-outside.", "grammar": "/* <length> values */\nshape-margin: 10px;\nshape-margin: 20mm;\n\n/* <percentage> value */\nshape-margin: 60%;\n\n/* Global values */\nshape-margin: inherit;\nshape-margin: initial;\nshape-margin: revert;\nshape-margin: revert-layer;\nshape-margin: unset;\n", "initial value": "0", "inherit": "no", "applicable elements": "floats", "name": "shape-margin"}, "shape-outside": {"desc": "The shape-outside CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; shape-outside provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.", "grammar": "/* Keyword values */\nshape-outside: none;\nshape-outside: margin-box;\nshape-outside: content-box;\nshape-outside: border-box;\nshape-outside: padding-box;\n\n/* Function values */\nshape-outside: circle();\nshape-outside: ellipse();\nshape-outside: inset(10px 10px 10px 10px);\nshape-outside: polygon(10px 10px, 20px 20px, 30px 30px);\nshape-outside: path('M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z');\n\n/* <url> value */\nshape-outside: url(image.png);\n\n/* <gradient> value */\nshape-outside: linear-gradient(45deg, rgba(255, 255, 255, 0) 150px, red 150px);\n\n/* Global values */\nshape-outside: inherit;\nshape-outside: initial;\nshape-outside: revert;\nshape-outside: revert-layer;\nshape-outside: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "floats", "name": "shape-outside"}, "tab-size": {"desc": "The tab-size CSS property is used to customize the width of tab characters (U+0009).", "grammar": "/* <integer> values */\ntab-size: 4;\ntab-size: 0;\n\n/* <length> values */\ntab-size: 10px;\ntab-size: 2em;\n\n/* Global values */\ntab-size: inherit;\ntab-size: initial;\ntab-size: revert;\ntab-size: revert-layer;\ntab-size: unset;\n", "initial value": "8", "inherit": "yes", "applicable elements": "block containers", "name": "tab-size"}, "table-layout": {"desc": "The table-layout CSS property sets the algorithm used to lay out <table> cells, rows, and columns.", "grammar": "/* Keyword values */\ntable-layout: auto;\ntable-layout: fixed;\n\n/* Global values */\ntable-layout: inherit;\ntable-layout: initial;\ntable-layout: revert;\ntable-layout: revert-layer;\ntable-layout: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "table and inline-table elements", "name": "table-layout"}, "text-align": {"desc": "The text-align CSS property sets the horizontal alignment of the content inside a block element or table-cell box. This means it works like vertical-align but in the horizontal direction.", "grammar": "/* Keyword values */\ntext-align: start;\ntext-align: end;\ntext-align: left;\ntext-align: right;\ntext-align: center;\ntext-align: justify;\ntext-align: justify-all;\ntext-align: match-parent;\n\n/* Character-based alignment in a table column */\ntext-align: \".\";\ntext-align: \".\" center;\n\n/* Block alignment values (Non-standard syntax) */\ntext-align: -moz-center;\ntext-align: -webkit-center;\n\n/* Global values */\ntext-align: inherit;\ntext-align: initial;\ntext-align: revert;\ntext-align: revert-layer;\ntext-align: unset;\n", "initial value": "start, or a nameless value that acts as left if direction is ltr, right if direction is rtl if start is not supported by the browser.", "inherit": "yes", "applicable elements": "block containers", "name": "text-align"}, "text-align-last": {"desc": "The text-align-last CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.", "grammar": "/* Keyword values */\ntext-align-last: auto;\ntext-align-last: start;\ntext-align-last: end;\ntext-align-last: left;\ntext-align-last: right;\ntext-align-last: center;\ntext-align-last: justify;\n\n/* Global values */\ntext-align-last: inherit;\ntext-align-last: initial;\ntext-align-last: revert;\ntext-align-last: revert-layer;\ntext-align-last: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "block containers", "name": "text-align-last"}, "text-combine-upright": {"desc": "The text-combine-upright CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.This is used to produce an effect that is known as tate-chū-yoko (縦中横) in Japanese, or as 直書橫向 in Chinese.", "grammar": "/* Keyword values */\ntext-combine-upright: none;\ntext-combine-upright: all;\n\n/* Digits values */\ntext-combine-upright: digits;     /* fits 2 consecutive digits horizontally inside vertical text */\ntext-combine-upright: digits 4;   /* fits up to 4 consecutive digits horizontally inside vertical text */\n\n/* Global values */\ntext-combine-upright: inherit;\ntext-combine-upright: initial;\ntext-combine-upright: revert;\ntext-combine-upright: revert-layer;\ntext-combine-upright: unset;\n", "initial value": "none", "inherit": "yes", "applicable elements": "non-replaced inline elements", "name": "text-combine-upright"}, "text-decoration": {"desc": "The text-decoration shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for text-decoration-line, text-decoration-color, text-decoration-style, and the newer text-decoration-thickness property.", "grammar": "text-decoration: underline;\ntext-decoration: overline red;\ntext-decoration: none;\n\n/* Global values */\ntext-decoration: inherit;\ntext-decoration: initial;\ntext-decoration: revert;\ntext-decoration: revert-layer;\ntext-decoration: unset;\n", "initial value": "as each of the properties of the shorthand:text-decoration-color: currentcolortext-decoration-style: solidtext-decoration-line: none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "text-decoration"}, "text-decoration-color": {"desc": "The text-decoration-color CSS property sets the color of decorations added to text by text-decoration-line.The color applies to decorations, such as underlines, overlines, strikethroughs, and wavy lines like those used to mark misspellings, in the scope of the property's value.", "grammar": "/* <color> values */\ntext-decoration-color: currentcolor;\ntext-decoration-color: red;\ntext-decoration-color: #00ff00;\ntext-decoration-color: rgba(255, 128, 128, 0.5);\ntext-decoration-color: transparent;\n\n/* Global values */\ntext-decoration-color: inherit;\ntext-decoration-color: initial;\ntext-decoration-color: revert;\ntext-decoration-color: revert-layer;\ntext-decoration-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "text-decoration-color"}, "text-decoration-line": {"desc": "The text-decoration-line CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.", "grammar": "/* Single keyword */\ntext-decoration-line: none;\ntext-decoration-line: underline;\ntext-decoration-line: overline;\ntext-decoration-line: line-through;\ntext-decoration-line: blink;\n\n/* Multiple keywords */\ntext-decoration-line: underline overline;               /* Two decoration lines */\ntext-decoration-line: overline underline line-through;  /* Multiple decoration lines */\n\n/* Global values */\ntext-decoration-line: inherit;\ntext-decoration-line: initial;\ntext-decoration-line: revert;\ntext-decoration-line: revert-layer;\ntext-decoration-line: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "text-decoration-line"}, "text-decoration-skip": {"desc": "The text-decoration-skip CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors. Note: Most other browsers are converging on supporting the simpler text-decoration-skip-ink property. /* Keyword values */text-decoration-skip: none;text-decoration-skip: objects;text-decoration-skip: spaces;text-decoration-skip: edges;text-decoration-skip: box-decoration; /* Multiple keywords */text-decoration-skip: objects spaces;text-decoration-skip: leading-spaces trailing-spaces;text-decoration-skip: objects edges box-decoration; /* Global values */text-decoration-skip: inherit;text-decoration-skip: initial;text-decoration-skip: revert;text-decoration-skip: revert-layer;text-decoration-skip: unset;", "grammar": "/* Keyword values */\ntext-decoration-skip: none;\ntext-decoration-skip: objects;\ntext-decoration-skip: spaces;\ntext-decoration-skip: edges;\ntext-decoration-skip: box-decoration;\n\n/* Multiple keywords */\ntext-decoration-skip: objects spaces;\ntext-decoration-skip: leading-spaces trailing-spaces;\ntext-decoration-skip: objects edges box-decoration;\n\n/* Global values */\ntext-decoration-skip: inherit;\ntext-decoration-skip: initial;\ntext-decoration-skip: revert;\ntext-decoration-skip: revert-layer;\ntext-decoration-skip: unset;\n", "initial value": "objects", "inherit": "yes", "applicable elements": "all elements", "name": "text-decoration-skip"}, "text-decoration-skip-ink": {"desc": "The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.", "grammar": "/* Single keyword */\ntext-decoration-skip-ink: none;\ntext-decoration-skip-ink: auto;\ntext-decoration-skip-ink: all;\n\n/* Global keywords */\ntext-decoration-skip-ink: inherit;\ntext-decoration-skip-ink: initial;\ntext-decoration-skip-ink: revert;\ntext-decoration-skip-ink: revert-layer;\ntext-decoration-skip-ink: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "text-decoration-skip-ink"}, "text-decoration-style": {"desc": "The text-decoration-style CSS property sets the style of the lines specified by text-decoration-line. The style applies to all lines that are set with text-decoration-line.", "grammar": "/* Keyword values */\ntext-decoration-style: solid;\ntext-decoration-style: double;\ntext-decoration-style: dotted;\ntext-decoration-style: dashed;\ntext-decoration-style: wavy;\n\n/* Global values */\ntext-decoration-style: inherit;\ntext-decoration-style: initial;\ntext-decoration-style: revert;\ntext-decoration-style: revert-layer;\ntext-decoration-style: unset;\n", "initial value": "solid", "inherit": "no", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "text-decoration-style"}, "text-emphasis": {"desc": "The text-emphasis CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for text-emphasis-style and text-emphasis-color.", "grammar": "/* Initial value */\ntext-emphasis: none; /* No emphasis marks */\n\n/* <string> value */\ntext-emphasis: 'x';\ntext-emphasis: '点';\ntext-emphasis: '\\25B2';\ntext-emphasis: '*' #555;\ntext-emphasis: 'foo'; /* Should NOT use. It may be computed to or rendered as 'f' only */\n\n/* Keywords value */\ntext-emphasis: filled;\ntext-emphasis: open;\ntext-emphasis: filled sesame;\ntext-emphasis: open sesame;\n\n/* Keywords value combined with a color */\ntext-emphasis: filled sesame #555;\n\n/* Global values */\ntext-emphasis: inherit;\ntext-emphasis: initial;\ntext-emphasis: revert;\ntext-emphasis: revert-layer;\ntext-emphasis: unset;\n", "initial value": "as each of the properties of the shorthand:text-emphasis-style: nonetext-emphasis-color: currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "text-emphasis"}, "text-emphasis-color": {"desc": "The text-emphasis-color CSS property sets the color of emphasis marks. This value can also be set using the text-emphasis shorthand.", "grammar": "/* Initial value */\ntext-emphasis-color: currentcolor;\n\n/* <color> */\ntext-emphasis-color: #555;\ntext-emphasis-color: blue;\ntext-emphasis-color: rgba(90, 200, 160, 0.8);\ntext-emphasis-color: transparent;\n\n/* Global values */\ntext-emphasis-color: inherit;\ntext-emphasis-color: initial;\ntext-emphasis-color: revert;\ntext-emphasis-color: revert-layer;\ntext-emphasis-color: unset;\n", "initial value": "currentcolor", "inherit": "no", "applicable elements": "all elements", "name": "text-emphasis-color"}, "text-emphasis-position": {"desc": "The text-emphasis-position CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.", "grammar": "/* Initial value */\ntext-emphasis-position: over right;\n\n/* Keywords value */\ntext-emphasis-position: over left;\ntext-emphasis-position: under right;\ntext-emphasis-position: under left;\n\ntext-emphasis-position: left over;\ntext-emphasis-position: right under;\ntext-emphasis-position: left under;\n\n/* Global values */\ntext-emphasis-position: inherit;\ntext-emphasis-position: initial;\ntext-emphasis-position: revert;\ntext-emphasis-position: revert-layer;\ntext-emphasis-position: unset;\n", "initial value": "over right", "inherit": "no", "applicable elements": "all elements", "name": "text-emphasis-position"}, "text-emphasis-style": {"desc": "The text-emphasis-style CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the text-emphasis shorthand.", "grammar": "/* Initial value */\ntext-emphasis-style: none; /* No emphasis marks */\n\n/* <string> values */\ntext-emphasis-style: 'x';\ntext-emphasis-style: '点';\ntext-emphasis-style: '\\25B2';\ntext-emphasis-style: '*';\ntext-emphasis-style: 'foo'; /* Should NOT be used. It may be computed to or rendered as 'f' only */\n\n/* Keyword values */\ntext-emphasis-style: filled;\ntext-emphasis-style: open;\ntext-emphasis-style: dot;\ntext-emphasis-style: circle;\ntext-emphasis-style: double-circle;\ntext-emphasis-style: triangle;\ntext-emphasis-style: filled sesame;\ntext-emphasis-style: open sesame;\n\n/* Global values */\ntext-emphasis-style: inherit;\ntext-emphasis-style: initial;\ntext-emphasis-style: revert;\ntext-emphasis-style: revert-layer;\ntext-emphasis-style: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "all elements", "name": "text-emphasis-style"}, "text-indent": {"desc": "The text-indent CSS property sets the length of empty space (indentation) that is put before lines of text in a block.", "grammar": "/* <length> values */\ntext-indent: 3mm;\ntext-indent: 40px;\n\n/* <percentage> value\n   relative to the containing block width */\ntext-indent: 15%;\n\n/* Keyword values */\ntext-indent: 5em each-line;\ntext-indent: 5em hanging;\ntext-indent: 5em hanging each-line;\n\n/* Global values */\ntext-indent: inherit;\ntext-indent: initial;\ntext-indent: revert;\ntext-indent: revert-layer;\ntext-indent: unset;\n", "initial value": "0", "inherit": "yes", "applicable elements": "block containers", "name": "text-indent"}, "text-justify": {"desc": "The text-justify CSS property sets what type of justification should be applied to text when text-align: justify; is set on an element.", "grammar": "text-justify: none;\ntext-justify: auto;\ntext-justify: inter-word;\ntext-justify: inter-character;\ntext-justify: distribute; /* Deprecated value */\n\n/* Global values */\ntext-justify: inherit;\ntext-justify: initial;\ntext-justify: revert;\ntext-justify: revert-layer;\ntext-justify: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "inline-level and table-cell elements", "name": "text-justify"}, "text-orientation": {"desc": "The text-orientation CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when writing-mode is not horizontal-tb). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.", "grammar": "/* Keyword values */\ntext-orientation: mixed;\ntext-orientation: upright;\ntext-orientation: sideways-right;\ntext-orientation: sideways;\ntext-orientation: use-glyph-orientation;\n\n/* Global values */\ntext-orientation: inherit;\ntext-orientation: initial;\ntext-orientation: revert;\ntext-orientation: revert-layer;\ntext-orientation: unset;\n", "initial value": "mixed", "inherit": "yes", "applicable elements": "all elements, except table row groups, rows, column groups, and columns", "name": "text-orientation"}, "text-overflow": {"desc": "The text-overflow CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('…'), or display a custom string.", "grammar": "overflow: hidden;\nwhite-space: nowrap;\n", "initial value": "clip", "inherit": "no", "applicable elements": "block container elements", "name": "text-overflow"}, "text-rendering": {"desc": "The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text.The browser makes trade-offs among speed, legibility, and geometric precision./* Keyword values */text-rendering: auto;text-rendering: optimizeSpeed;text-rendering: optimizeLegibility;text-rendering: geometricPrecision; /* Global values */text-rendering: inherit;text-rendering: initial;text-rendering: revert;text-rendering: revert-layer;text-rendering: unset; Note: The text-rendering property is an SVG property that is not defined in any CSS standard. However, Gecko and WebKit browsers let you apply this property to HTML and XML content on Windows, macOS, and Linux. One very visible effect is optimizeLegibility, which enables ligatures (ff, fi, fl, etc.) in text smaller than 20px for some fonts (for example, Microsoft's Calibri, Candara, Constantia, and Corbel, or the DejaVu font family).", "grammar": "/* Keyword values */\ntext-rendering: auto;\ntext-rendering: optimizeSpeed;\ntext-rendering: optimizeLegibility;\ntext-rendering: geometricPrecision;\n\n/* Global values */\ntext-rendering: inherit;\ntext-rendering: initial;\ntext-rendering: revert;\ntext-rendering: revert-layer;\ntext-rendering: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "text elements", "name": "text-rendering"}, "text-shadow": {"desc": "The text-shadow CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its decorations. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.", "grammar": "/* offset-x | offset-y | blur-radius | color */\ntext-shadow: 1px 1px 2px black;\n\n/* color | offset-x | offset-y | blur-radius */\ntext-shadow: #fc0 1px 0 10px;\n\n/* offset-x | offset-y | color */\ntext-shadow: 5px 5px #558abb;\n\n/* color | offset-x | offset-y */\ntext-shadow: white 2px 5px;\n\n/* offset-x | offset-y\n/* Use defaults for color and blur-radius */\ntext-shadow: 5px 10px;\n\n/* Global values */\ntext-shadow: inherit;\ntext-shadow: initial;\ntext-shadow: revert;\ntext-shadow: revert-layer;\ntext-shadow: unset;\n", "initial value": "none", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "text-shadow"}, "text-size-adjust": {"desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property./* Keyword values */text-size-adjust: none;text-size-adjust: auto; /* <percentage> value */text-size-adjust: 80%; /* Global values */text-size-adjust: inherit;text-size-adjust: initial;text-size-adjust: revert;text-size-adjust: revert-layer;text-size-adjust: unset; Because many websites have not been developed with small devices in mind, mobile browsers differ from desktop browsers in the way they render web pages. Instead of laying out pages at the width of the device screen, they lay them out using a viewport that is much wider, usually 800 or 1000 pixels. To map the extra-wide layout back to the original device size, they either show only part of the whole render or scale the viewport down to fit.Since text that has been scaled down to fit a mobile screen may be very small, many mobile browsers apply a text inflation algorithm to enlarge the text to make it more readable. When an element containing text uses 100% of the screen's width, the algorithm increases its text size, but without modifying the layout. The text-size-adjust property allows web authors to disable or modify this behavior, as web pages designed with small screens in mind do not need it.", "grammar": "/* Keyword values */\ntext-size-adjust: none;\ntext-size-adjust: auto;\n\n/* <percentage> value */\ntext-size-adjust: 80%;\n\n/* Global values */\ntext-size-adjust: inherit;\ntext-size-adjust: initial;\ntext-size-adjust: revert;\ntext-size-adjust: revert-layer;\ntext-size-adjust: unset;\n", "initial value": "auto for smartphone browsers supporting inflation, none in other cases (and then not modifiable).", "inherit": "yes", "applicable elements": "all elements", "name": "text-size-adjust"}, "text-transform": {"desc": "The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.", "grammar": "/* Keyword values */\ntext-transform: none;\ntext-transform: capitalize;\ntext-transform: uppercase;\ntext-transform: lowercase;\ntext-transform: full-width;\ntext-transform: full-size-kana;\n\n/* Global values */\ntext-transform: inherit;\ntext-transform: initial;\ntext-transform: revert;\ntext-transform: revert-layer;\ntext-transform: unset;\n", "initial value": "none", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "text-transform"}, "text-underline-position": {"desc": "The text-underline-position CSS property specifies the position of the underline which is set using the text-decoration property's underline value.", "grammar": "/* Single keyword */\ntext-underline-position: auto;\ntext-underline-position: under;\ntext-underline-position: left;\ntext-underline-position: right;\n\n/* Multiple keywords */\ntext-underline-position: under left;\ntext-underline-position: right under;\n\n/* Global values */\ntext-underline-position: inherit;\ntext-underline-position: initial;\ntext-underline-position: revert;\ntext-underline-position: revert-layer;\ntext-underline-position: unset;\n", "initial value": "auto", "inherit": "yes", "applicable elements": "all elements", "name": "text-underline-position"}, "top": {"desc": "The top CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.", "grammar": "/* <length> values */\ntop: 3px;\ntop: 2.4em;\n\n/* <percentage>s of the height of the containing block */\ntop: 10%;\n\n/* Keyword value */\ntop: auto;\n\n/* Global values */\ntop: inherit;\ntop: initial;\ntop: revert;\ntop: revert-layer;\ntop: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "top"}, "touch-action": {"desc": "The touch-action CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser)./* Keyword values */touch-action: auto;touch-action: none;touch-action: pan-x;touch-action: pan-left;touch-action: pan-right;touch-action: pan-y;touch-action: pan-up;touch-action: pan-down;touch-action: pinch-zoom;touch-action: manipulation; /* Global values */touch-action: inherit;touch-action: initial;touch-action: revert;touch-action: revert-layer;touch-action: unset; By default, panning (scrolling) and pinching gestures are handled exclusively by the browser. An application using Pointer events will receive a pointercancel event when the browser starts handling a touch gesture. By explicitly specifying which gestures should be handled by the browser, an application can supply its own behavior in pointermove and pointerup listeners for the remaining gestures. Applications using Touch events disable the browser handling of gestures by calling preventDefault(), but should also use touch-action to ensure the browser knows the intent of the application before any event listeners have been invoked.When a gesture is started, the browser intersects the touch-action values of the touched element and its ancestors, up to the one that implements the gesture (in other words, the first containing scrolling element). This means that in practice, touch-action is typically applied only to top-level elements which have some custom behavior, without needing to specify touch-action explicitly on any of that element's descendants. Note: After a gesture starts, changes to touch-action will not have any impact on the behavior of the current gesture.", "grammar": "/* Keyword values */\ntouch-action: auto;\ntouch-action: none;\ntouch-action: pan-x;\ntouch-action: pan-left;\ntouch-action: pan-right;\ntouch-action: pan-y;\ntouch-action: pan-up;\ntouch-action: pan-down;\ntouch-action: pinch-zoom;\ntouch-action: manipulation;\n\n/* Global values */\ntouch-action: inherit;\ntouch-action: initial;\ntouch-action: revert;\ntouch-action: revert-layer;\ntouch-action: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements except: non-replaced inline elements, table rows, row groups, table columns, and column groups", "name": "touch-action"}, "transform": {"desc": "The transform CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.", "grammar": "/* Keyword values */\ntransform: none;\n\n/* Function values */\ntransform: matrix(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);\ntransform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\ntransform: perspective(17px);\ntransform: rotate(0.5turn);\ntransform: rotate3d(1, 2.0, 3.0, 10deg);\ntransform: rotateX(10deg);\ntransform: rotateY(10deg);\ntransform: rotateZ(10deg);\ntransform: translate(12px, 50%);\ntransform: translate3d(12px, 50%, 3em);\ntransform: translateX(2em);\ntransform: translateY(3in);\ntransform: translateZ(2px);\ntransform: scale(2, 0.5);\ntransform: scale3d(2.5, 1.2, 0.3);\ntransform: scaleX(2);\ntransform: scaleY(0.5);\ntransform: scaleZ(0.3);\ntransform: skew(30deg, 20deg);\ntransform: skewX(30deg);\ntransform: skewY(1.07rad);\n\n/* Multiple function values */\ntransform: translateX(10px) rotate(10deg) translateY(5px);\ntransform: perspective(500px) translate(10px, 0, 20px) rotateY(3deg);\n\n/* Global values */\ntransform: inherit;\ntransform: initial;\ntransform: revert;\ntransform: revert-layer;\ntransform: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "transformable elements", "name": "transform"}, "transform-box": {"desc": "The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate./* Keyword values */transform-box: content-box;transform-box: border-box;transform-box: fill-box;transform-box: stroke-box;transform-box: view-box; /* Global values */transform-box: inherit;transform-box: initial;transform-box: revert;transform-box: revert-layer;transform-box: unset;", "grammar": "/* Keyword values */\ntransform-box: content-box;\ntransform-box: border-box;\ntransform-box: fill-box;\ntransform-box: stroke-box;\ntransform-box: view-box;\n\n/* Global values */\ntransform-box: inherit;\ntransform-box: initial;\ntransform-box: revert;\ntransform-box: revert-layer;\ntransform-box: unset;\n", "initial value": "view-box", "inherit": "no", "applicable elements": "transformable elements", "name": "transform-box"}, "transform-origin": {"desc": "The transform-origin CSS property sets the origin for an element's transformations.", "grammar": "transform-origin: -100% 50%;\ntransform: rotate(45deg);\n", "initial value": "50% 50% 0", "inherit": "no", "applicable elements": "transformable elements", "name": "transform-origin"}, "transform-style": {"desc": "The transform-style CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.", "grammar": "/* Keyword values */\ntransform-style: flat;\ntransform-style: preserve-3d;\n\n/* Global values */\ntransform-style: inherit;\ntransform-style: initial;\ntransform-style: revert;\ntransform-style: revert-layer;\ntransform-style: unset;\n", "initial value": "flat", "inherit": "no", "applicable elements": "transformable elements", "name": "transform-style"}, "transition": {"desc": "The transition CSS property is a shorthand property for transition-property, transition-duration, transition-timing-function, and transition-delay.", "grammar": "/* Apply to 1 property */\n/* property name | duration */\ntransition: margin-right 4s;\n\n/* property name | duration | delay */\ntransition: margin-right 4s 1s;\n\n/* property name | duration | easing function */\ntransition: margin-right 4s ease-in-out;\n\n/* property name | duration | easing function | delay */\ntransition: margin-right 4s ease-in-out 1s;\n\n/* Apply to 2 properties */\ntransition: margin-right 4s, color 1s;\n\n/* Apply to all changed properties */\ntransition: all 0.5s ease-out;\n\n/* Global values */\ntransition: inherit;\ntransition: initial;\ntransition: revert;\ntransition: revert-layer;\ntransition: unset;\n", "initial value": "as each of the properties of the shorthand:transition-delay: 0stransition-duration: 0stransition-property: alltransition-timing-function: ease", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "transition"}, "transition-delay": {"desc": "The transition-delay CSS property specifies the duration to wait before starting a property's transition effect when its value changes.", "grammar": "/* <time> values */\ntransition-delay: 3s;\ntransition-delay: 2s, 4ms;\n\n/* Global values */\ntransition-delay: inherit;\ntransition-delay: initial;\ntransition-delay: revert;\ntransition-delay: revert-layer;\ntransition-delay: unset;\n", "initial value": "0s", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "transition-delay"}, "transition-duration": {"desc": "The transition-duration CSS property sets the length of time a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur.", "grammar": "/* <time> values */\ntransition-duration: 6s;\ntransition-duration: 120ms;\ntransition-duration: 1s, 15s;\ntransition-duration: 10s, 30s, 230ms;\n\n/* Global values */\ntransition-duration: inherit;\ntransition-duration: initial;\ntransition-duration: revert;\ntransition-duration: revert-layer;\ntransition-duration: unset;\n", "initial value": "0s", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "transition-duration"}, "transition-property": {"desc": "The transition-property CSS property sets the CSS properties to which a transition effect should be applied.", "grammar": "/* Keyword values */\ntransition-property: none;\ntransition-property: all;\n\n/* <custom-ident> values */\ntransition-property: test_05;\ntransition-property: -specific;\ntransition-property: sliding-vertically;\n\n/* Multiple values */\ntransition-property: test1, animation4;\ntransition-property: all, height, color;\ntransition-property: all, -moz-specific, sliding;\n\n/* Global values */\ntransition-property: inherit;\ntransition-property: initial;\ntransition-property: revert;\ntransition-property: revert-layer;\ntransition-property: unset;\n", "initial value": "all", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "transition-property"}, "transition-timing-function": {"desc": "The transition-timing-function CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.", "grammar": "/* Keyword values */\ntransition-timing-function: ease;\ntransition-timing-function: ease-in;\ntransition-timing-function: ease-out;\ntransition-timing-function: ease-in-out;\ntransition-timing-function: linear;\ntransition-timing-function: step-start;\ntransition-timing-function: step-end;\n\n/* Function values */\ntransition-timing-function: steps(4, jump-end);\ntransition-timing-function: cubic-bezier(0.1, 0.7, 1.0, 0.1);\n\n/* Steps Function keywords */\ntransition-timing-function: steps(4, jump-start);\ntransition-timing-function: steps(10, jump-end);\ntransition-timing-function: steps(20, jump-none);\ntransition-timing-function: steps(5, jump-both);\ntransition-timing-function: steps(6, start);\ntransition-timing-function: steps(8, end);\n\n/* Multiple timing functions */\ntransition-timing-function: ease, step-start, cubic-bezier(0.1, 0.7, 1.0, 0.1);\n\n/* Global values */\ntransition-timing-function: inherit;\ntransition-timing-function: initial;\ntransition-timing-function: revert;\ntransition-timing-function: revert-layer;\ntransition-timing-function: unset;\n", "initial value": "ease", "inherit": "no", "applicable elements": "all elements, ::before and ::after pseudo-elements", "name": "transition-timing-function"}, "translate": {"desc": "The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.", "grammar": "/* Keyword values */\ntranslate: none;\n\n/* Single values */\ntranslate: 100px;\ntranslate: 50%;\n\n/* Two values */\ntranslate: 100px 200px;\ntranslate: 50% 105px;\n\n/* Three values */\ntranslate: 50% 105px 5rem;\n\n/* Global values */\ntranslate: inherit;\ntranslate: initial;\ntranslate: revert;\ntranslate: revert-layer;\ntranslate: unset;\n", "initial value": "none", "inherit": "no", "applicable elements": "transformable elements", "name": "translate"}, "unicode-bidi": {"desc": "The unicode-bidi CSS property, together with the direction property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The unicode-bidi property overrides this algorithm and allows the developer to control the text embedding.", "grammar": "/* Keyword values */\nunicode-bidi: normal;\nunicode-bidi: embed;\nunicode-bidi: isolate;\nunicode-bidi: bidi-override;\nunicode-bidi: isolate-override;\nunicode-bidi: plaintext;\n\n/* Global values */\nunicode-bidi: inherit;\nunicode-bidi: initial;\nunicode-bidi: revert;\nunicode-bidi: revert-layer;\nunicode-bidi: unset;\n", "initial value": "normal", "inherit": "no", "applicable elements": "all elements, though some values have no effect on non-inline elements", "name": "unicode-bidi"}, "user-select": {"desc": "The user-select CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.", "grammar": "/* Keyword values */\nuser-select: none;\nuser-select: auto;\nuser-select: text;\nuser-select: contain;\nuser-select: all;\n\n/* Global values */\nuser-select: inherit;\nuser-select: initial;\nuser-select: revert;\nuser-select: revert-layer;\nuser-select: unset;\n\n/* Mozilla-specific values */\n-moz-user-select: none;\n-moz-user-select: text;\n-moz-user-select: all;\n\n/* WebKit-specific values */\n-webkit-user-select: none;\n-webkit-user-select: text;\n-webkit-user-select: all; /* Doesn't work in Safari; use only\n                             \"none\" or \"text\", or else it will\n                             allow typing in the <html> container */\n\n/* Microsoft-specific values */\n-ms-user-select: none;\n-ms-user-select: text;\n-ms-user-select: element;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements", "name": "user-select"}, "vertical-align": {"desc": "The vertical-align CSS property sets vertical alignment of an inline, inline-block or table-cell box.", "grammar": "/* Keyword values */\nvertical-align: baseline;\nvertical-align: sub;\nvertical-align: super;\nvertical-align: text-top;\nvertical-align: text-bottom;\nvertical-align: middle;\nvertical-align: top;\nvertical-align: bottom;\n\n/* <length> values */\nvertical-align: 10em;\nvertical-align: 4px;\n\n/* <percentage> values */\nvertical-align: 20%;\n\n/* Global values */\nvertical-align: inherit;\nvertical-align: initial;\nvertical-align: revert;\nvertical-align: revert-layer;\nvertical-align: unset;\n", "initial value": "baseline", "inherit": "no", "applicable elements": "inline-level and table-cell elements. It also applies to ::first-letter and ::first-line.", "name": "vertical-align"}, "visibility": {"desc": "The visibility CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a <table>.", "grammar": "/* Keyword values */\nvisibility: visible;\nvisibility: hidden;\nvisibility: collapse;\n\n/* Global values */\nvisibility: inherit;\nvisibility: initial;\nvisibility: revert;\nvisibility: revert-layer;\nvisibility: unset;\n", "initial value": "visible", "inherit": "yes", "applicable elements": "all elements", "name": "visibility"}, "white-space": {"desc": "The white-space CSS property sets how white space inside an element is handled.", "grammar": "/* Keyword values */\nwhite-space: normal;\nwhite-space: nowrap;\nwhite-space: pre;\nwhite-space: pre-wrap;\nwhite-space: pre-line;\nwhite-space: break-spaces;\n\n/* Global values */\nwhite-space: inherit;\nwhite-space: initial;\nwhite-space: revert;\nwhite-space: revert-layer;\nwhite-space: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements", "name": "white-space"}, "widows": {"desc": "The widows CSS property sets the minimum number of lines in a block container that must be shown at the top of a page, region, or column./* <integer> values */widows: 2;widows: 3; /* Global values */widows: inherit;widows: initial;widows: revert;widows: revert-layer;widows: unset; In typography, a widow is the last line of a paragraph that appears alone at the top of a page. (The paragraph is continued from a prior page.)", "grammar": "/* <integer> values */\nwidows: 2;\nwidows: 3;\n\n/* Global values */\nwidows: inherit;\nwidows: initial;\nwidows: revert;\nwidows: revert-layer;\nwidows: unset;\n", "initial value": "2", "inherit": "yes", "applicable elements": "block container elements", "name": "widows"}, "width": {"desc": "The width CSS property sets an element's width. By default, it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.", "grammar": "/* <length> values */\nwidth: 300px;\nwidth: 25em;\n\n/* <percentage> value */\nwidth: 75%;\n\n/* Keyword values */\nwidth: max-content;\nwidth: min-content;\nwidth: fit-content(20em);\nwidth: auto;\n\n/* Global values */\nwidth: inherit;\nwidth: initial;\nwidth: revert;\nwidth: revert-layer;\nwidth: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements but non-replaced inline elements, table rows, and row groups", "name": "width"}, "will-change": {"desc": "The will-change CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required. Warning: will-change is intended to be used as a last resort, in order to try to deal with existing performance problems. It should not be used to anticipate performance problems. /* Keyword values */will-change: auto;will-change: scroll-position;will-change: contents;will-change: transform; /* Example of <custom-ident> */will-change: opacity; /* Example of <custom-ident> */will-change: left, top; /* Example of two <animatable-feature> */ /* Global values */will-change: inherit;will-change: initial;will-change: revert;will-change: revert-layer;will-change: unset; Proper usage of this property can be a bit tricky: Don't apply will-change to too many elements. The browser already tries as hard as it can to optimize everything. Some of the stronger optimizations that are likely to be tied to will-change end up using a lot of a machine's resources, and when overused like this can cause the page to slow down or consume a lot of resources.Use sparingly. The normal behavior for optimizations that the browser make is to remove the optimizations as soon as it can and revert back to normal. But adding will-change directly in a stylesheet implies that the targeted elements are always a few moments away from changing and the browser will keep the optimizations for much longer time than it would have otherwise. So it is a good practice to switch will-change on and off using script code before and after the change occurs.Don't apply will-change to elements to perform premature optimization. If your page is performing well, don't add the will-change property to elements just to wring out a little more speed. will-change is intended to be used as something of a last resort, in order to try to deal with existing performance problems. It should not be used to anticipate performance problems. Excessive use of will-change will result in excessive memory use and will cause more complex rendering to occur as the browser attempts to prepare for the possible change. This will lead to worse performance.Give it sufficient time to work. This property is intended as a method for authors to let the user-agent know about properties that are likely to change ahead of time. Then the browser can choose to apply any ahead-of-time optimizations required for the property change before the property change actually happens. So it is important to give the browser some time to actually do the optimizations. Find some way to predict at least slightly ahead of time that something will change, and set will-change then.Be aware, that will-change may actually influence the visual appearance of elements, when used with property values, that create a stacking context (e.g. will-change: opacity), as the stacking context is created up front.", "grammar": "/* Keyword values */\nwill-change: auto;\nwill-change: scroll-position;\nwill-change: contents;\nwill-change: transform;        /* Example of <custom-ident> */\nwill-change: opacity;          /* Example of <custom-ident> */\nwill-change: left, top;        /* Example of two <animatable-feature> */\n\n/* Global values */\nwill-change: inherit;\nwill-change: initial;\nwill-change: revert;\nwill-change: revert-layer;\nwill-change: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "all elements", "name": "will-change"}, "word-break": {"desc": "The word-break CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.", "grammar": "/* Keyword values */\nword-break: normal;\nword-break: break-all;\nword-break: keep-all;\nword-break: break-word; /* deprecated */\n\n/* Global values */\nword-break: inherit;\nword-break: initial;\nword-break: revert;\nword-break: revert-layer;\nword-break: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements", "name": "word-break"}, "word-spacing": {"desc": "The word-spacing CSS property sets the length of space between words and between tags.", "grammar": "/* Keyword value */\nword-spacing: normal;\n\n/* <length> values */\nword-spacing: 3px;\nword-spacing: 0.3em;\n\n/* <percentage> values */\nword-spacing: 50%;\nword-spacing: 200%;\n\n/* Global values */\nword-spacing: inherit;\nword-spacing: initial;\nword-spacing: revert;\nword-spacing: revert-layer;\nword-spacing: unset;\n", "initial value": "normal", "inherit": "yes", "applicable elements": "all elements. It also applies to ::first-letter and ::first-line.", "name": "word-spacing"}, "writing-mode": {"desc": "The writing-mode CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (html element for HTML documents).", "grammar": "/* Keyword values */\nwriting-mode: horizontal-tb;\nwriting-mode: vertical-rl;\nwriting-mode: vertical-lr;\n\n/* Global values */\nwriting-mode: inherit;\nwriting-mode: initial;\nwriting-mode: revert;\nwriting-mode: revert-layer;\nwriting-mode: unset;\n", "initial value": "horizontal-tb", "inherit": "yes", "applicable elements": "all elements except table row groups, table column groups, table rows, and table columns", "name": "writing-mode"}, "z-index": {"desc": "The z-index CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.", "grammar": "/* Keyword value */\nz-index: auto;\n\n/* <integer> values */\nz-index: 0;\nz-index: 3;\nz-index: 289;\nz-index: -1; /* Negative values to lower the priority */\n\n/* Global values */\nz-index: inherit;\nz-index: initial;\nz-index: revert;\nz-index: revert-layer;\nz-index: unset;\n", "initial value": "auto", "inherit": "no", "applicable elements": "positioned elements", "name": "z-index"}}